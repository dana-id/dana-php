<?php
/**
 * EnvInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\IPG
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IPG Cashier Pay API
 *
 * API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\IPG\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * EnvInfo Class Doc Comment
 *
 * @category Class
 * @package  Dana\IPG
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EnvInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EnvInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'session_id' => 'string',
        'token_id' => 'string',
        'website_language' => 'string',
        'client_ip' => 'string',
        'os_type' => 'string',
        'app_version' => 'string',
        'sdk_version' => 'string',
        'source_platform' => 'string',
        'order_os_type' => 'string',
        'merchant_app_version' => 'string',
        'terminal_type' => 'string',
        'order_terminal_type' => 'string',
        'extend_info' => 'string',
        'client_key' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'session_id' => null,
        'token_id' => null,
        'website_language' => null,
        'client_ip' => null,
        'os_type' => null,
        'app_version' => null,
        'sdk_version' => null,
        'source_platform' => null,
        'order_os_type' => null,
        'merchant_app_version' => null,
        'terminal_type' => null,
        'order_terminal_type' => null,
        'extend_info' => null,
        'client_key' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'session_id' => false,
        'token_id' => false,
        'website_language' => false,
        'client_ip' => false,
        'os_type' => false,
        'app_version' => false,
        'sdk_version' => false,
        'source_platform' => false,
        'order_os_type' => false,
        'merchant_app_version' => false,
        'terminal_type' => false,
        'order_terminal_type' => false,
        'extend_info' => false,
        'client_key' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'session_id' => 'sessionId',
        'token_id' => 'tokenId',
        'website_language' => 'websiteLanguage',
        'client_ip' => 'clientIp',
        'os_type' => 'osType',
        'app_version' => 'appVersion',
        'sdk_version' => 'sdkVersion',
        'source_platform' => 'sourcePlatform',
        'order_os_type' => 'orderOsType',
        'merchant_app_version' => 'merchantAppVersion',
        'terminal_type' => 'terminalType',
        'order_terminal_type' => 'orderTerminalType',
        'extend_info' => 'extendInfo',
        'client_key' => 'clientKey'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'session_id' => 'setSessionId',
        'token_id' => 'setTokenId',
        'website_language' => 'setWebsiteLanguage',
        'client_ip' => 'setClientIp',
        'os_type' => 'setOsType',
        'app_version' => 'setAppVersion',
        'sdk_version' => 'setSdkVersion',
        'source_platform' => 'setSourcePlatform',
        'order_os_type' => 'setOrderOsType',
        'merchant_app_version' => 'setMerchantAppVersion',
        'terminal_type' => 'setTerminalType',
        'order_terminal_type' => 'setOrderTerminalType',
        'extend_info' => 'setExtendInfo',
        'client_key' => 'setClientKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'session_id' => 'getSessionId',
        'token_id' => 'getTokenId',
        'website_language' => 'getWebsiteLanguage',
        'client_ip' => 'getClientIp',
        'os_type' => 'getOsType',
        'app_version' => 'getAppVersion',
        'sdk_version' => 'getSdkVersion',
        'source_platform' => 'getSourcePlatform',
        'order_os_type' => 'getOrderOsType',
        'merchant_app_version' => 'getMerchantAppVersion',
        'terminal_type' => 'getTerminalType',
        'order_terminal_type' => 'getOrderTerminalType',
        'extend_info' => 'getExtendInfo',
        'client_key' => 'getClientKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SOURCE_PLATFORM_IPG = 'IPG';
    public const TERMINAL_TYPE_APP = 'APP';
    public const TERMINAL_TYPE_WEB = 'WEB';
    public const TERMINAL_TYPE_WAP = 'WAP';
    public const TERMINAL_TYPE_SYSTEM = 'SYSTEM';
    public const ORDER_TERMINAL_TYPE_APP = 'APP';
    public const ORDER_TERMINAL_TYPE_WEB = 'WEB';
    public const ORDER_TERMINAL_TYPE_WAP = 'WAP';
    public const ORDER_TERMINAL_TYPE_SYSTEM = 'SYSTEM';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourcePlatformAllowableValues()
    {
        return [
            self::SOURCE_PLATFORM_IPG,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTerminalTypeAllowableValues()
    {
        return [
            self::TERMINAL_TYPE_APP,
            self::TERMINAL_TYPE_WEB,
            self::TERMINAL_TYPE_WAP,
            self::TERMINAL_TYPE_SYSTEM,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderTerminalTypeAllowableValues()
    {
        return [
            self::ORDER_TERMINAL_TYPE_APP,
            self::ORDER_TERMINAL_TYPE_WEB,
            self::ORDER_TERMINAL_TYPE_WAP,
            self::ORDER_TERMINAL_TYPE_SYSTEM,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('session_id', $data ?? [], null);
        $this->setIfExists('token_id', $data ?? [], null);
        $this->setIfExists('website_language', $data ?? [], null);
        $this->setIfExists('client_ip', $data ?? [], null);
        $this->setIfExists('os_type', $data ?? [], null);
        $this->setIfExists('app_version', $data ?? [], null);
        $this->setIfExists('sdk_version', $data ?? [], null);
        $this->setIfExists('source_platform', $data ?? [], null);
        $this->setIfExists('order_os_type', $data ?? [], null);
        $this->setIfExists('merchant_app_version', $data ?? [], null);
        $this->setIfExists('terminal_type', $data ?? [], null);
        $this->setIfExists('order_terminal_type', $data ?? [], null);
        $this->setIfExists('extend_info', $data ?? [], null);
        $this->setIfExists('client_key', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['session_id']) && (mb_strlen($this->container['session_id']) > 128)) {
            $invalidProperties[] = "invalid value for 'session_id', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['token_id']) && (mb_strlen($this->container['token_id']) > 128)) {
            $invalidProperties[] = "invalid value for 'token_id', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['website_language']) && (mb_strlen($this->container['website_language']) > 16)) {
            $invalidProperties[] = "invalid value for 'website_language', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['client_ip']) && (mb_strlen($this->container['client_ip']) > 32)) {
            $invalidProperties[] = "invalid value for 'client_ip', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['os_type']) && (mb_strlen($this->container['os_type']) > 128)) {
            $invalidProperties[] = "invalid value for 'os_type', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['app_version']) && (mb_strlen($this->container['app_version']) > 128)) {
            $invalidProperties[] = "invalid value for 'app_version', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['sdk_version']) && (mb_strlen($this->container['sdk_version']) > 128)) {
            $invalidProperties[] = "invalid value for 'sdk_version', the character length must be smaller than or equal to 128.";
        }

        if ($this->container['source_platform'] === null) {
            $invalidProperties[] = "'source_platform' can't be null";
        }
        $allowedValues = $this->getSourcePlatformAllowableValues();
        if (!is_null($this->container['source_platform']) && !in_array($this->container['source_platform'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'source_platform', must be one of '%s'",
                $this->container['source_platform'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['source_platform']) > 32)) {
            $invalidProperties[] = "invalid value for 'source_platform', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['order_os_type']) && (mb_strlen($this->container['order_os_type']) > 128)) {
            $invalidProperties[] = "invalid value for 'order_os_type', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['merchant_app_version']) && (mb_strlen($this->container['merchant_app_version']) > 128)) {
            $invalidProperties[] = "invalid value for 'merchant_app_version', the character length must be smaller than or equal to 128.";
        }

        if ($this->container['terminal_type'] === null) {
            $invalidProperties[] = "'terminal_type' can't be null";
        }
        $allowedValues = $this->getTerminalTypeAllowableValues();
        if (!is_null($this->container['terminal_type']) && !in_array($this->container['terminal_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'terminal_type', must be one of '%s'",
                $this->container['terminal_type'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['terminal_type']) > 32)) {
            $invalidProperties[] = "invalid value for 'terminal_type', the character length must be smaller than or equal to 32.";
        }

        $allowedValues = $this->getOrderTerminalTypeAllowableValues();
        if (!is_null($this->container['order_terminal_type']) && !in_array($this->container['order_terminal_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'order_terminal_type', must be one of '%s'",
                $this->container['order_terminal_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['order_terminal_type']) && (mb_strlen($this->container['order_terminal_type']) > 32)) {
            $invalidProperties[] = "invalid value for 'order_terminal_type', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['extend_info']) && (mb_strlen($this->container['extend_info']) > 4096)) {
            $invalidProperties[] = "invalid value for 'extend_info', the character length must be smaller than or equal to 4096.";
        }

        if (!is_null($this->container['client_key']) && (mb_strlen($this->container['client_key']) > 64)) {
            $invalidProperties[] = "invalid value for 'client_key', the character length must be smaller than or equal to 64.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets session_id
     *
     * @return string|null
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param string|null $session_id Session identifier
     *
     * @return self
     */
    public function setSessionId($session_id)
    {
        if (is_null($session_id)) {
            throw new \InvalidArgumentException('non-nullable session_id cannot be null');
        }
        if ((mb_strlen($session_id) > 128)) {
            throw new \InvalidArgumentException('invalid length for $session_id when calling EnvInfo., must be smaller than or equal to 128.');
        }

        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets token_id
     *
     * @return string|null
     */
    public function getTokenId()
    {
        return $this->container['token_id'];
    }

    /**
     * Sets token_id
     *
     * @param string|null $token_id Token identifier
     *
     * @return self
     */
    public function setTokenId($token_id)
    {
        if (is_null($token_id)) {
            throw new \InvalidArgumentException('non-nullable token_id cannot be null');
        }
        if ((mb_strlen($token_id) > 128)) {
            throw new \InvalidArgumentException('invalid length for $token_id when calling EnvInfo., must be smaller than or equal to 128.');
        }

        $this->container['token_id'] = $token_id;

        return $this;
    }

    /**
     * Gets website_language
     *
     * @return string|null
     */
    public function getWebsiteLanguage()
    {
        return $this->container['website_language'];
    }

    /**
     * Sets website_language
     *
     * @param string|null $website_language Website language
     *
     * @return self
     */
    public function setWebsiteLanguage($website_language)
    {
        if (is_null($website_language)) {
            throw new \InvalidArgumentException('non-nullable website_language cannot be null');
        }
        if ((mb_strlen($website_language) > 16)) {
            throw new \InvalidArgumentException('invalid length for $website_language when calling EnvInfo., must be smaller than or equal to 16.');
        }

        $this->container['website_language'] = $website_language;

        return $this;
    }

    /**
     * Gets client_ip
     *
     * @return string|null
     */
    public function getClientIp()
    {
        return $this->container['client_ip'];
    }

    /**
     * Sets client_ip
     *
     * @param string|null $client_ip Client IP address
     *
     * @return self
     */
    public function setClientIp($client_ip)
    {
        if (is_null($client_ip)) {
            throw new \InvalidArgumentException('non-nullable client_ip cannot be null');
        }
        if ((mb_strlen($client_ip) > 32)) {
            throw new \InvalidArgumentException('invalid length for $client_ip when calling EnvInfo., must be smaller than or equal to 32.');
        }

        $this->container['client_ip'] = $client_ip;

        return $this;
    }

    /**
     * Gets os_type
     *
     * @return string|null
     */
    public function getOsType()
    {
        return $this->container['os_type'];
    }

    /**
     * Sets os_type
     *
     * @param string|null $os_type Operating system type
     *
     * @return self
     */
    public function setOsType($os_type)
    {
        if (is_null($os_type)) {
            throw new \InvalidArgumentException('non-nullable os_type cannot be null');
        }
        if ((mb_strlen($os_type) > 128)) {
            throw new \InvalidArgumentException('invalid length for $os_type when calling EnvInfo., must be smaller than or equal to 128.');
        }

        $this->container['os_type'] = $os_type;

        return $this;
    }

    /**
     * Gets app_version
     *
     * @return string|null
     */
    public function getAppVersion()
    {
        return $this->container['app_version'];
    }

    /**
     * Sets app_version
     *
     * @param string|null $app_version App version
     *
     * @return self
     */
    public function setAppVersion($app_version)
    {
        if (is_null($app_version)) {
            throw new \InvalidArgumentException('non-nullable app_version cannot be null');
        }
        if ((mb_strlen($app_version) > 128)) {
            throw new \InvalidArgumentException('invalid length for $app_version when calling EnvInfo., must be smaller than or equal to 128.');
        }

        $this->container['app_version'] = $app_version;

        return $this;
    }

    /**
     * Gets sdk_version
     *
     * @return string|null
     */
    public function getSdkVersion()
    {
        return $this->container['sdk_version'];
    }

    /**
     * Sets sdk_version
     *
     * @param string|null $sdk_version SDK version
     *
     * @return self
     */
    public function setSdkVersion($sdk_version)
    {
        if (is_null($sdk_version)) {
            throw new \InvalidArgumentException('non-nullable sdk_version cannot be null');
        }
        if ((mb_strlen($sdk_version) > 128)) {
            throw new \InvalidArgumentException('invalid length for $sdk_version when calling EnvInfo., must be smaller than or equal to 128.');
        }

        $this->container['sdk_version'] = $sdk_version;

        return $this;
    }

    /**
     * Gets source_platform
     *
     * @return string
     */
    public function getSourcePlatform()
    {
        return $this->container['source_platform'];
    }

    /**
     * Sets source_platform
     *
     * @param string $source_platform The source platform is always independent payment gateway (IPG)
     *
     * @return self
     */
    public function setSourcePlatform($source_platform)
    {
        if (is_null($source_platform)) {
            throw new \InvalidArgumentException('non-nullable source_platform cannot be null');
        }
        $allowedValues = $this->getSourcePlatformAllowableValues();
        if (!in_array($source_platform, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'source_platform', must be one of '%s'",
                    $source_platform,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($source_platform) > 32)) {
            throw new \InvalidArgumentException('invalid length for $source_platform when calling EnvInfo., must be smaller than or equal to 32.');
        }

        $this->container['source_platform'] = $source_platform;

        return $this;
    }

    /**
     * Gets order_os_type
     *
     * @return string|null
     */
    public function getOrderOsType()
    {
        return $this->container['order_os_type'];
    }

    /**
     * Sets order_os_type
     *
     * @param string|null $order_os_type Order operating system type
     *
     * @return self
     */
    public function setOrderOsType($order_os_type)
    {
        if (is_null($order_os_type)) {
            throw new \InvalidArgumentException('non-nullable order_os_type cannot be null');
        }
        if ((mb_strlen($order_os_type) > 128)) {
            throw new \InvalidArgumentException('invalid length for $order_os_type when calling EnvInfo., must be smaller than or equal to 128.');
        }

        $this->container['order_os_type'] = $order_os_type;

        return $this;
    }

    /**
     * Gets merchant_app_version
     *
     * @return string|null
     */
    public function getMerchantAppVersion()
    {
        return $this->container['merchant_app_version'];
    }

    /**
     * Sets merchant_app_version
     *
     * @param string|null $merchant_app_version Merchant App version
     *
     * @return self
     */
    public function setMerchantAppVersion($merchant_app_version)
    {
        if (is_null($merchant_app_version)) {
            throw new \InvalidArgumentException('non-nullable merchant_app_version cannot be null');
        }
        if ((mb_strlen($merchant_app_version) > 128)) {
            throw new \InvalidArgumentException('invalid length for $merchant_app_version when calling EnvInfo., must be smaller than or equal to 128.');
        }

        $this->container['merchant_app_version'] = $merchant_app_version;

        return $this;
    }

    /**
     * Gets terminal_type
     *
     * @return string
     */
    public function getTerminalType()
    {
        return $this->container['terminal_type'];
    }

    /**
     * Sets terminal_type
     *
     * @param string $terminal_type Terminal type. The enums:<br> * APP - Mobile Application<br> * WEB - Browser Web<br> * WAP - Mobile Wap<br> * SYSTEM - System Call<br>
     *
     * @return self
     */
    public function setTerminalType($terminal_type)
    {
        if (is_null($terminal_type)) {
            throw new \InvalidArgumentException('non-nullable terminal_type cannot be null');
        }
        $allowedValues = $this->getTerminalTypeAllowableValues();
        if (!in_array($terminal_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'terminal_type', must be one of '%s'",
                    $terminal_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($terminal_type) > 32)) {
            throw new \InvalidArgumentException('invalid length for $terminal_type when calling EnvInfo., must be smaller than or equal to 32.');
        }

        $this->container['terminal_type'] = $terminal_type;

        return $this;
    }

    /**
     * Gets order_terminal_type
     *
     * @return string|null
     */
    public function getOrderTerminalType()
    {
        return $this->container['order_terminal_type'];
    }

    /**
     * Sets order_terminal_type
     *
     * @param string|null $order_terminal_type Order terminal type. The enums:<br> * APP - Mobile Application<br> * WEB - Browser Web<br> * WAP - Mobile Wap<br> * SYSTEM - System Call<br>
     *
     * @return self
     */
    public function setOrderTerminalType($order_terminal_type)
    {
        if (is_null($order_terminal_type)) {
            throw new \InvalidArgumentException('non-nullable order_terminal_type cannot be null');
        }
        $allowedValues = $this->getOrderTerminalTypeAllowableValues();
        if (!in_array($order_terminal_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'order_terminal_type', must be one of '%s'",
                    $order_terminal_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($order_terminal_type) > 32)) {
            throw new \InvalidArgumentException('invalid length for $order_terminal_type when calling EnvInfo., must be smaller than or equal to 32.');
        }

        $this->container['order_terminal_type'] = $order_terminal_type;

        return $this;
    }

    /**
     * Gets extend_info
     *
     * @return string|null
     */
    public function getExtendInfo()
    {
        return $this->container['extend_info'];
    }

    /**
     * Sets extend_info
     *
     * @param string|null $extend_info Extend information
     *
     * @return self
     */
    public function setExtendInfo($extend_info)
    {
        if (is_null($extend_info)) {
            throw new \InvalidArgumentException('non-nullable extend_info cannot be null');
        }
        if ((mb_strlen($extend_info) > 4096)) {
            throw new \InvalidArgumentException('invalid length for $extend_info when calling EnvInfo., must be smaller than or equal to 4096.');
        }

        $this->container['extend_info'] = $extend_info;

        return $this;
    }

    /**
     * Gets client_key
     *
     * @return string|null
     */
    public function getClientKey()
    {
        return $this->container['client_key'];
    }

    /**
     * Sets client_key
     *
     * @param string|null $client_key Unique identifier for partner was generated by DANA
     *
     * @return self
     */
    public function setClientKey($client_key)
    {
        if (is_null($client_key)) {
            throw new \InvalidArgumentException('non-nullable client_key cannot be null');
        }
        if ((mb_strlen($client_key) > 64)) {
            throw new \InvalidArgumentException('invalid length for $client_key when calling EnvInfo., must be smaller than or equal to 64.');
        }

        $this->container['client_key'] = $client_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


