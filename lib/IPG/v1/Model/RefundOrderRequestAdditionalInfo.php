<?php
/**
 * RefundOrderRequestAdditionalInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\IPG
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IPG Cashier Pay API
 *
 * API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\IPG\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * RefundOrderRequestAdditionalInfo Class Doc Comment
 *
 * @category Class
 * @description Additional information
 * @package  Dana\IPG
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RefundOrderRequestAdditionalInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RefundOrderRequestAdditionalInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'payout_account_no' => 'string',
        'refund_applied_time' => 'string',
        'actor_type' => 'string',
        'return_charge_to_payer' => 'string',
        'destination' => 'string',
        'env_info' => 'object',
        'audit_info' => 'object',
        'actor_context' => 'object',
        'refund_option_bill' => 'object[]',
        'extend_info' => 'string',
        'async_refund' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'payout_account_no' => null,
        'refund_applied_time' => null,
        'actor_type' => null,
        'return_charge_to_payer' => null,
        'destination' => null,
        'env_info' => null,
        'audit_info' => null,
        'actor_context' => null,
        'refund_option_bill' => null,
        'extend_info' => null,
        'async_refund' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'payout_account_no' => false,
        'refund_applied_time' => false,
        'actor_type' => false,
        'return_charge_to_payer' => false,
        'destination' => false,
        'env_info' => false,
        'audit_info' => false,
        'actor_context' => false,
        'refund_option_bill' => false,
        'extend_info' => false,
        'async_refund' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payout_account_no' => 'payoutAccountNo',
        'refund_applied_time' => 'refundAppliedTime',
        'actor_type' => 'actorType',
        'return_charge_to_payer' => 'returnChargeToPayer',
        'destination' => 'destination',
        'env_info' => 'envInfo',
        'audit_info' => 'auditInfo',
        'actor_context' => 'actorContext',
        'refund_option_bill' => 'refundOptionBill',
        'extend_info' => 'extendInfo',
        'async_refund' => 'asyncRefund'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payout_account_no' => 'setPayoutAccountNo',
        'refund_applied_time' => 'setRefundAppliedTime',
        'actor_type' => 'setActorType',
        'return_charge_to_payer' => 'setReturnChargeToPayer',
        'destination' => 'setDestination',
        'env_info' => 'setEnvInfo',
        'audit_info' => 'setAuditInfo',
        'actor_context' => 'setActorContext',
        'refund_option_bill' => 'setRefundOptionBill',
        'extend_info' => 'setExtendInfo',
        'async_refund' => 'setAsyncRefund'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payout_account_no' => 'getPayoutAccountNo',
        'refund_applied_time' => 'getRefundAppliedTime',
        'actor_type' => 'getActorType',
        'return_charge_to_payer' => 'getReturnChargeToPayer',
        'destination' => 'getDestination',
        'env_info' => 'getEnvInfo',
        'audit_info' => 'getAuditInfo',
        'actor_context' => 'getActorContext',
        'refund_option_bill' => 'getRefundOptionBill',
        'extend_info' => 'getExtendInfo',
        'async_refund' => 'getAsyncRefund'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('payout_account_no', $data ?? [], null);
        $this->setIfExists('refund_applied_time', $data ?? [], null);
        $this->setIfExists('actor_type', $data ?? [], null);
        $this->setIfExists('return_charge_to_payer', $data ?? [], null);
        $this->setIfExists('destination', $data ?? [], null);
        $this->setIfExists('env_info', $data ?? [], null);
        $this->setIfExists('audit_info', $data ?? [], null);
        $this->setIfExists('actor_context', $data ?? [], null);
        $this->setIfExists('refund_option_bill', $data ?? [], null);
        $this->setIfExists('extend_info', $data ?? [], null);
        $this->setIfExists('async_refund', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['payout_account_no']) && (mb_strlen($this->container['payout_account_no']) > 64)) {
            $invalidProperties[] = "invalid value for 'payout_account_no', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['refund_applied_time']) && (mb_strlen($this->container['refund_applied_time']) > 25)) {
            $invalidProperties[] = "invalid value for 'refund_applied_time', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['actor_type']) && (mb_strlen($this->container['actor_type']) > 64)) {
            $invalidProperties[] = "invalid value for 'actor_type', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['return_charge_to_payer']) && (mb_strlen($this->container['return_charge_to_payer']) > 64)) {
            $invalidProperties[] = "invalid value for 'return_charge_to_payer', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['destination']) && (mb_strlen($this->container['destination']) > 64)) {
            $invalidProperties[] = "invalid value for 'destination', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['env_info'] === null) {
            $invalidProperties[] = "'env_info' can't be null";
        }
        if (!is_null($this->container['extend_info']) && (mb_strlen($this->container['extend_info']) > 4096)) {
            $invalidProperties[] = "invalid value for 'extend_info', the character length must be smaller than or equal to 4096.";
        }

        if (!is_null($this->container['async_refund']) && (mb_strlen($this->container['async_refund']) > 5)) {
            $invalidProperties[] = "invalid value for 'async_refund', the character length must be smaller than or equal to 5.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payout_account_no
     *
     * @return string|null
     */
    public function getPayoutAccountNo()
    {
        return $this->container['payout_account_no'];
    }

    /**
     * Sets payout_account_no
     *
     * @param string|null $payout_account_no Additional information of payout account number. This param need to be filled if want to refund to specific payout account not that specified by DANA
     *
     * @return self
     */
    public function setPayoutAccountNo($payout_account_no)
    {
        if (is_null($payout_account_no)) {
            throw new \InvalidArgumentException('non-nullable payout_account_no cannot be null');
        }
        if ((mb_strlen($payout_account_no) > 64)) {
            throw new \InvalidArgumentException('invalid length for $payout_account_no when calling RefundOrderRequestAdditionalInfo., must be smaller than or equal to 64.');
        }

        $this->container['payout_account_no'] = $payout_account_no;

        return $this;
    }

    /**
     * Gets refund_applied_time
     *
     * @return string|null
     */
    public function getRefundAppliedTime()
    {
        return $this->container['refund_applied_time'];
    }

    /**
     * Sets refund_applied_time
     *
     * @param string|null $refund_applied_time Additional information of refund applied time, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
     *
     * @return self
     */
    public function setRefundAppliedTime($refund_applied_time)
    {
        if (is_null($refund_applied_time)) {
            throw new \InvalidArgumentException('non-nullable refund_applied_time cannot be null');
        }
        if ((mb_strlen($refund_applied_time) > 25)) {
            throw new \InvalidArgumentException('invalid length for $refund_applied_time when calling RefundOrderRequestAdditionalInfo., must be smaller than or equal to 25.');
        }

        $this->container['refund_applied_time'] = $refund_applied_time;

        return $this;
    }

    /**
     * Gets actor_type
     *
     * @return string|null
     */
    public function getActorType()
    {
        return $this->container['actor_type'];
    }

    /**
     * Sets actor_type
     *
     * @param string|null $actor_type Additional information of actor type, refer to ActorTypeEnum
     *
     * @return self
     */
    public function setActorType($actor_type)
    {
        if (is_null($actor_type)) {
            throw new \InvalidArgumentException('non-nullable actor_type cannot be null');
        }
        if ((mb_strlen($actor_type) > 64)) {
            throw new \InvalidArgumentException('invalid length for $actor_type when calling RefundOrderRequestAdditionalInfo., must be smaller than or equal to 64.');
        }

        $this->container['actor_type'] = $actor_type;

        return $this;
    }

    /**
     * Gets return_charge_to_payer
     *
     * @return string|null
     */
    public function getReturnChargeToPayer()
    {
        return $this->container['return_charge_to_payer'];
    }

    /**
     * Sets return_charge_to_payer
     *
     * @param string|null $return_charge_to_payer Additional information of return charge to payer
     *
     * @return self
     */
    public function setReturnChargeToPayer($return_charge_to_payer)
    {
        if (is_null($return_charge_to_payer)) {
            throw new \InvalidArgumentException('non-nullable return_charge_to_payer cannot be null');
        }
        if ((mb_strlen($return_charge_to_payer) > 64)) {
            throw new \InvalidArgumentException('invalid length for $return_charge_to_payer when calling RefundOrderRequestAdditionalInfo., must be smaller than or equal to 64.');
        }

        $this->container['return_charge_to_payer'] = $return_charge_to_payer;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return string|null
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param string|null $destination Additional information of destination
     *
     * @return self
     */
    public function setDestination($destination)
    {
        if (is_null($destination)) {
            throw new \InvalidArgumentException('non-nullable destination cannot be null');
        }
        if ((mb_strlen($destination) > 64)) {
            throw new \InvalidArgumentException('invalid length for $destination when calling RefundOrderRequestAdditionalInfo., must be smaller than or equal to 64.');
        }

        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets env_info
     *
     * @return object
     */
    public function getEnvInfo()
    {
        return $this->container['env_info'];
    }

    /**
     * Sets env_info
     *
     * @param object $env_info Additional information of environment
     *
     * @return self
     */
    public function setEnvInfo($env_info)
    {
        if (is_null($env_info)) {
            throw new \InvalidArgumentException('non-nullable env_info cannot be null');
        }
        $this->container['env_info'] = $env_info;

        return $this;
    }

    /**
     * Gets audit_info
     *
     * @return object|null
     */
    public function getAuditInfo()
    {
        return $this->container['audit_info'];
    }

    /**
     * Sets audit_info
     *
     * @param object|null $audit_info Additional information of audit
     *
     * @return self
     */
    public function setAuditInfo($audit_info)
    {
        if (is_null($audit_info)) {
            throw new \InvalidArgumentException('non-nullable audit_info cannot be null');
        }
        $this->container['audit_info'] = $audit_info;

        return $this;
    }

    /**
     * Gets actor_context
     *
     * @return object|null
     */
    public function getActorContext()
    {
        return $this->container['actor_context'];
    }

    /**
     * Sets actor_context
     *
     * @param object|null $actor_context Additional information of actor context
     *
     * @return self
     */
    public function setActorContext($actor_context)
    {
        if (is_null($actor_context)) {
            throw new \InvalidArgumentException('non-nullable actor_context cannot be null');
        }
        $this->container['actor_context'] = $actor_context;

        return $this;
    }

    /**
     * Gets refund_option_bill
     *
     * @return object[]|null
     */
    public function getRefundOptionBill()
    {
        return $this->container['refund_option_bill'];
    }

    /**
     * Sets refund_option_bill
     *
     * @param object[]|null $refund_option_bill Additional information of refund option bill
     *
     * @return self
     */
    public function setRefundOptionBill($refund_option_bill)
    {
        if (is_null($refund_option_bill)) {
            throw new \InvalidArgumentException('non-nullable refund_option_bill cannot be null');
        }
        $this->container['refund_option_bill'] = $refund_option_bill;

        return $this;
    }

    /**
     * Gets extend_info
     *
     * @return string|null
     */
    public function getExtendInfo()
    {
        return $this->container['extend_info'];
    }

    /**
     * Sets extend_info
     *
     * @param string|null $extend_info Additional information of extend
     *
     * @return self
     */
    public function setExtendInfo($extend_info)
    {
        if (is_null($extend_info)) {
            throw new \InvalidArgumentException('non-nullable extend_info cannot be null');
        }
        if ((mb_strlen($extend_info) > 4096)) {
            throw new \InvalidArgumentException('invalid length for $extend_info when calling RefundOrderRequestAdditionalInfo., must be smaller than or equal to 4096.');
        }

        $this->container['extend_info'] = $extend_info;

        return $this;
    }

    /**
     * Gets async_refund
     *
     * @return string|null
     */
    public function getAsyncRefund()
    {
        return $this->container['async_refund'];
    }

    /**
     * Sets async_refund
     *
     * @param string|null $async_refund Additional information of async refund to determine the process of refund whether sync or async. The values is true/false
     *
     * @return self
     */
    public function setAsyncRefund($async_refund)
    {
        if (is_null($async_refund)) {
            throw new \InvalidArgumentException('non-nullable async_refund cannot be null');
        }
        if ((mb_strlen($async_refund) > 5)) {
            throw new \InvalidArgumentException('invalid length for $async_refund when calling RefundOrderRequestAdditionalInfo., must be smaller than or equal to 5.');
        }

        $this->container['async_refund'] = $async_refund;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


