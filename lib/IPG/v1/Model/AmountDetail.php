<?php
/**
 * AmountDetail
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\IPG
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IPG Cashier Pay API
 *
 * API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\IPG\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * AmountDetail Class Doc Comment
 *
 * @category Class
 * @package  Dana\IPG
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AmountDetail implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AmountDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order_amount' => '\Dana\IPG\v1\Model\Money',
        'pay_amount' => '\Dana\IPG\v1\Model\Money',
        'void_amount' => '\Dana\IPG\v1\Model\Money',
        'confirm_amount' => '\Dana\IPG\v1\Model\Money',
        'refund_amount' => '\Dana\IPG\v1\Model\Money',
        'chargeback_amount' => '\Dana\IPG\v1\Model\Money',
        'charge_amount' => '\Dana\IPG\v1\Model\Money'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'order_amount' => null,
        'pay_amount' => null,
        'void_amount' => null,
        'confirm_amount' => null,
        'refund_amount' => null,
        'chargeback_amount' => null,
        'charge_amount' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'order_amount' => false,
        'pay_amount' => false,
        'void_amount' => false,
        'confirm_amount' => false,
        'refund_amount' => false,
        'chargeback_amount' => false,
        'charge_amount' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_amount' => 'orderAmount',
        'pay_amount' => 'payAmount',
        'void_amount' => 'voidAmount',
        'confirm_amount' => 'confirmAmount',
        'refund_amount' => 'refundAmount',
        'chargeback_amount' => 'chargebackAmount',
        'charge_amount' => 'chargeAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_amount' => 'setOrderAmount',
        'pay_amount' => 'setPayAmount',
        'void_amount' => 'setVoidAmount',
        'confirm_amount' => 'setConfirmAmount',
        'refund_amount' => 'setRefundAmount',
        'chargeback_amount' => 'setChargebackAmount',
        'charge_amount' => 'setChargeAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_amount' => 'getOrderAmount',
        'pay_amount' => 'getPayAmount',
        'void_amount' => 'getVoidAmount',
        'confirm_amount' => 'getConfirmAmount',
        'refund_amount' => 'getRefundAmount',
        'chargeback_amount' => 'getChargebackAmount',
        'charge_amount' => 'getChargeAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('order_amount', $data ?? [], null);
        $this->setIfExists('pay_amount', $data ?? [], null);
        $this->setIfExists('void_amount', $data ?? [], null);
        $this->setIfExists('confirm_amount', $data ?? [], null);
        $this->setIfExists('refund_amount', $data ?? [], null);
        $this->setIfExists('chargeback_amount', $data ?? [], null);
        $this->setIfExists('charge_amount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['order_amount'] === null) {
            $invalidProperties[] = "'order_amount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_amount
     *
     * @return \Dana\IPG\v1\Model\Money
     */
    public function getOrderAmount()
    {
        return $this->container['order_amount'];
    }

    /**
     * Sets order_amount
     *
     * @param \Dana\IPG\v1\Model\Money $order_amount Order amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br>
     *
     * @return self
     */
    public function setOrderAmount($order_amount)
    {
        if (is_null($order_amount)) {
            throw new \InvalidArgumentException('non-nullable order_amount cannot be null');
        }
        $this->container['order_amount'] = $order_amount;

        return $this;
    }

    /**
     * Gets pay_amount
     *
     * @return \Dana\IPG\v1\Model\Money|null
     */
    public function getPayAmount()
    {
        return $this->container['pay_amount'];
    }

    /**
     * Sets pay_amount
     *
     * @param \Dana\IPG\v1\Model\Money|null $pay_amount Pay amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br>
     *
     * @return self
     */
    public function setPayAmount($pay_amount)
    {
        if (is_null($pay_amount)) {
            throw new \InvalidArgumentException('non-nullable pay_amount cannot be null');
        }
        $this->container['pay_amount'] = $pay_amount;

        return $this;
    }

    /**
     * Gets void_amount
     *
     * @return \Dana\IPG\v1\Model\Money|null
     */
    public function getVoidAmount()
    {
        return $this->container['void_amount'];
    }

    /**
     * Sets void_amount
     *
     * @param \Dana\IPG\v1\Model\Money|null $void_amount Void amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br>
     *
     * @return self
     */
    public function setVoidAmount($void_amount)
    {
        if (is_null($void_amount)) {
            throw new \InvalidArgumentException('non-nullable void_amount cannot be null');
        }
        $this->container['void_amount'] = $void_amount;

        return $this;
    }

    /**
     * Gets confirm_amount
     *
     * @return \Dana\IPG\v1\Model\Money|null
     */
    public function getConfirmAmount()
    {
        return $this->container['confirm_amount'];
    }

    /**
     * Sets confirm_amount
     *
     * @param \Dana\IPG\v1\Model\Money|null $confirm_amount Confirm amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br>
     *
     * @return self
     */
    public function setConfirmAmount($confirm_amount)
    {
        if (is_null($confirm_amount)) {
            throw new \InvalidArgumentException('non-nullable confirm_amount cannot be null');
        }
        $this->container['confirm_amount'] = $confirm_amount;

        return $this;
    }

    /**
     * Gets refund_amount
     *
     * @return \Dana\IPG\v1\Model\Money|null
     */
    public function getRefundAmount()
    {
        return $this->container['refund_amount'];
    }

    /**
     * Sets refund_amount
     *
     * @param \Dana\IPG\v1\Model\Money|null $refund_amount Refund amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br>
     *
     * @return self
     */
    public function setRefundAmount($refund_amount)
    {
        if (is_null($refund_amount)) {
            throw new \InvalidArgumentException('non-nullable refund_amount cannot be null');
        }
        $this->container['refund_amount'] = $refund_amount;

        return $this;
    }

    /**
     * Gets chargeback_amount
     *
     * @return \Dana\IPG\v1\Model\Money|null
     */
    public function getChargebackAmount()
    {
        return $this->container['chargeback_amount'];
    }

    /**
     * Sets chargeback_amount
     *
     * @param \Dana\IPG\v1\Model\Money|null $chargeback_amount Chargeback amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br>
     *
     * @return self
     */
    public function setChargebackAmount($chargeback_amount)
    {
        if (is_null($chargeback_amount)) {
            throw new \InvalidArgumentException('non-nullable chargeback_amount cannot be null');
        }
        $this->container['chargeback_amount'] = $chargeback_amount;

        return $this;
    }

    /**
     * Gets charge_amount
     *
     * @return \Dana\IPG\v1\Model\Money|null
     */
    public function getChargeAmount()
    {
        return $this->container['charge_amount'];
    }

    /**
     * Sets charge_amount
     *
     * @param \Dana\IPG\v1\Model\Money|null $charge_amount Charge amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br>
     *
     * @return self
     */
    public function setChargeAmount($charge_amount)
    {
        if (is_null($charge_amount)) {
            throw new \InvalidArgumentException('non-nullable charge_amount cannot be null');
        }
        $this->container['charge_amount'] = $charge_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


