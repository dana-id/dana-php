<?php
/**
 * TimeDetail
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\IPG
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IPG Cashier Pay API
 *
 * API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\IPG\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * TimeDetail Class Doc Comment
 *
 * @category Class
 * @package  Dana\IPG
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TimeDetail implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TimeDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'created_time' => 'string',
        'expiry_time' => 'string',
        'paid_times' => 'string[]',
        'confirmed_times' => 'string[]',
        'cancelled_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'created_time' => null,
        'expiry_time' => null,
        'paid_times' => null,
        'confirmed_times' => null,
        'cancelled_time' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'created_time' => false,
        'expiry_time' => false,
        'paid_times' => false,
        'confirmed_times' => false,
        'cancelled_time' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created_time' => 'createdTime',
        'expiry_time' => 'expiryTime',
        'paid_times' => 'paidTimes',
        'confirmed_times' => 'confirmedTimes',
        'cancelled_time' => 'cancelledTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created_time' => 'setCreatedTime',
        'expiry_time' => 'setExpiryTime',
        'paid_times' => 'setPaidTimes',
        'confirmed_times' => 'setConfirmedTimes',
        'cancelled_time' => 'setCancelledTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created_time' => 'getCreatedTime',
        'expiry_time' => 'getExpiryTime',
        'paid_times' => 'getPaidTimes',
        'confirmed_times' => 'getConfirmedTimes',
        'cancelled_time' => 'getCancelledTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('created_time', $data ?? [], null);
        $this->setIfExists('expiry_time', $data ?? [], null);
        $this->setIfExists('paid_times', $data ?? [], null);
        $this->setIfExists('confirmed_times', $data ?? [], null);
        $this->setIfExists('cancelled_time', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['created_time'] === null) {
            $invalidProperties[] = "'created_time' can't be null";
        }
        if ((mb_strlen($this->container['created_time']) > 25)) {
            $invalidProperties[] = "invalid value for 'created_time', the character length must be smaller than or equal to 25.";
        }

        if (!preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/", $this->container['created_time'])) {
            $invalidProperties[] = "invalid value for 'created_time', must be conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/.";
        }

        if ($this->container['expiry_time'] === null) {
            $invalidProperties[] = "'expiry_time' can't be null";
        }
        if ((mb_strlen($this->container['expiry_time']) > 25)) {
            $invalidProperties[] = "invalid value for 'expiry_time', the character length must be smaller than or equal to 25.";
        }

        if (!preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/", $this->container['expiry_time'])) {
            $invalidProperties[] = "invalid value for 'expiry_time', must be conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/.";
        }

        if (!is_null($this->container['cancelled_time']) && (mb_strlen($this->container['cancelled_time']) > 25)) {
            $invalidProperties[] = "invalid value for 'cancelled_time', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['cancelled_time']) && !preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/", $this->container['cancelled_time'])) {
            $invalidProperties[] = "invalid value for 'cancelled_time', must be conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created_time
     *
     * @return string
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param string $created_time Time of created order, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
     *
     * @return self
     */
    public function setCreatedTime($created_time)
    {
        if (is_null($created_time)) {
            throw new \InvalidArgumentException('non-nullable created_time cannot be null');
        }
        if ((mb_strlen($created_time) > 25)) {
            throw new \InvalidArgumentException('invalid length for $created_time when calling TimeDetail., must be smaller than or equal to 25.');
        }
        if ((!preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/", ObjectSerializer::toString($created_time)))) {
            throw new \InvalidArgumentException("invalid value for \$created_time when calling TimeDetail., must conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/.");
        }

        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets expiry_time
     *
     * @return string
     */
    public function getExpiryTime()
    {
        return $this->container['expiry_time'];
    }

    /**
     * Sets expiry_time
     *
     * @param string $expiry_time Time of expiry order, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
     *
     * @return self
     */
    public function setExpiryTime($expiry_time)
    {
        if (is_null($expiry_time)) {
            throw new \InvalidArgumentException('non-nullable expiry_time cannot be null');
        }
        if ((mb_strlen($expiry_time) > 25)) {
            throw new \InvalidArgumentException('invalid length for $expiry_time when calling TimeDetail., must be smaller than or equal to 25.');
        }
        if ((!preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/", ObjectSerializer::toString($expiry_time)))) {
            throw new \InvalidArgumentException("invalid value for \$expiry_time when calling TimeDetail., must conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/.");
        }

        $this->container['expiry_time'] = $expiry_time;

        return $this;
    }

    /**
     * Gets paid_times
     *
     * @return string[]|null
     */
    public function getPaidTimes()
    {
        return $this->container['paid_times'];
    }

    /**
     * Sets paid_times
     *
     * @param string[]|null $paid_times Time of paid order, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
     *
     * @return self
     */
    public function setPaidTimes($paid_times)
    {
        if (is_null($paid_times)) {
            throw new \InvalidArgumentException('non-nullable paid_times cannot be null');
        }
        $this->container['paid_times'] = $paid_times;

        return $this;
    }

    /**
     * Gets confirmed_times
     *
     * @return string[]|null
     */
    public function getConfirmedTimes()
    {
        return $this->container['confirmed_times'];
    }

    /**
     * Sets confirmed_times
     *
     * @param string[]|null $confirmed_times Time of confirmed order, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
     *
     * @return self
     */
    public function setConfirmedTimes($confirmed_times)
    {
        if (is_null($confirmed_times)) {
            throw new \InvalidArgumentException('non-nullable confirmed_times cannot be null');
        }
        $this->container['confirmed_times'] = $confirmed_times;

        return $this;
    }

    /**
     * Gets cancelled_time
     *
     * @return string|null
     */
    public function getCancelledTime()
    {
        return $this->container['cancelled_time'];
    }

    /**
     * Sets cancelled_time
     *
     * @param string|null $cancelled_time Time of cancelled order, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
     *
     * @return self
     */
    public function setCancelledTime($cancelled_time)
    {
        if (is_null($cancelled_time)) {
            throw new \InvalidArgumentException('non-nullable cancelled_time cannot be null');
        }
        if ((mb_strlen($cancelled_time) > 25)) {
            throw new \InvalidArgumentException('invalid length for $cancelled_time when calling TimeDetail., must be smaller than or equal to 25.');
        }
        if ((!preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/", ObjectSerializer::toString($cancelled_time)))) {
            throw new \InvalidArgumentException("invalid value for \$cancelled_time when calling TimeDetail., must conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/.");
        }

        $this->container['cancelled_time'] = $cancelled_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


