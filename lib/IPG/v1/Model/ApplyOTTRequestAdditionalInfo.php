<?php
/**
 * ApplyOTTRequestAdditionalInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\IPG
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IPG Cashier Pay API
 *
 * API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\IPG\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * ApplyOTTRequestAdditionalInfo Class Doc Comment
 *
 * @category Class
 * @description Additional information
 * @package  Dana\IPG
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApplyOTTRequestAdditionalInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ApplyOTTRequestAdditionalInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'access_token' => 'string',
        'end_user_ip_address' => 'string',
        'device_id' => 'string',
        'latitude' => 'string',
        'longitude' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'access_token' => null,
        'end_user_ip_address' => null,
        'device_id' => null,
        'latitude' => null,
        'longitude' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'access_token' => false,
        'end_user_ip_address' => false,
        'device_id' => false,
        'latitude' => false,
        'longitude' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'access_token' => 'accessToken',
        'end_user_ip_address' => 'endUserIpAddress',
        'device_id' => 'deviceId',
        'latitude' => 'latitude',
        'longitude' => 'longitude'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'access_token' => 'setAccessToken',
        'end_user_ip_address' => 'setEndUserIpAddress',
        'device_id' => 'setDeviceId',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'access_token' => 'getAccessToken',
        'end_user_ip_address' => 'getEndUserIpAddress',
        'device_id' => 'getDeviceId',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('access_token', $data ?? [], null);
        $this->setIfExists('end_user_ip_address', $data ?? [], null);
        $this->setIfExists('device_id', $data ?? [], null);
        $this->setIfExists('latitude', $data ?? [], null);
        $this->setIfExists('longitude', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['access_token'] === null) {
            $invalidProperties[] = "'access_token' can't be null";
        }
        if ((mb_strlen($this->container['access_token']) > 512)) {
            $invalidProperties[] = "invalid value for 'access_token', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['end_user_ip_address']) && (mb_strlen($this->container['end_user_ip_address']) > 15)) {
            $invalidProperties[] = "invalid value for 'end_user_ip_address', the character length must be smaller than or equal to 15.";
        }

        if ($this->container['device_id'] === null) {
            $invalidProperties[] = "'device_id' can't be null";
        }
        if ((mb_strlen($this->container['device_id']) > 400)) {
            $invalidProperties[] = "invalid value for 'device_id', the character length must be smaller than or equal to 400.";
        }

        if (!is_null($this->container['latitude']) && (mb_strlen($this->container['latitude']) > 10)) {
            $invalidProperties[] = "invalid value for 'latitude', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['latitude']) && !preg_match("/^[-+]?[0-9]{1,2}([.][0-9]{1,4})?$/", $this->container['latitude'])) {
            $invalidProperties[] = "invalid value for 'latitude', must be conform to the pattern /^[-+]?[0-9]{1,2}([.][0-9]{1,4})?$/.";
        }

        if (!is_null($this->container['longitude']) && (mb_strlen($this->container['longitude']) > 10)) {
            $invalidProperties[] = "invalid value for 'longitude', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['longitude']) && !preg_match("/^[-+]?[0-9]{1,2}([.][0-9]{1,4})?$/", $this->container['longitude'])) {
            $invalidProperties[] = "invalid value for 'longitude', must be conform to the pattern /^[-+]?[0-9]{1,2}([.][0-9]{1,4})?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets access_token
     *
     * @return string
     */
    public function getAccessToken()
    {
        return $this->container['access_token'];
    }

    /**
     * Sets access_token
     *
     * @param string $access_token Contains customer token, which has been obtained from binding process
     *
     * @return self
     */
    public function setAccessToken($access_token)
    {
        if (is_null($access_token)) {
            throw new \InvalidArgumentException('non-nullable access_token cannot be null');
        }
        if ((mb_strlen($access_token) > 512)) {
            throw new \InvalidArgumentException('invalid length for $access_token when calling ApplyOTTRequestAdditionalInfo., must be smaller than or equal to 512.');
        }

        $this->container['access_token'] = $access_token;

        return $this;
    }

    /**
     * Gets end_user_ip_address
     *
     * @return string|null
     */
    public function getEndUserIpAddress()
    {
        return $this->container['end_user_ip_address'];
    }

    /**
     * Sets end_user_ip_address
     *
     * @param string|null $end_user_ip_address IP address of the end user (customer) using IPv4 format
     *
     * @return self
     */
    public function setEndUserIpAddress($end_user_ip_address)
    {
        if (is_null($end_user_ip_address)) {
            throw new \InvalidArgumentException('non-nullable end_user_ip_address cannot be null');
        }
        if ((mb_strlen($end_user_ip_address) > 15)) {
            throw new \InvalidArgumentException('invalid length for $end_user_ip_address when calling ApplyOTTRequestAdditionalInfo., must be smaller than or equal to 15.');
        }

        $this->container['end_user_ip_address'] = $end_user_ip_address;

        return $this;
    }

    /**
     * Gets device_id
     *
     * @return string
     */
    public function getDeviceId()
    {
        return $this->container['device_id'];
    }

    /**
     * Sets device_id
     *
     * @param string $device_id Device identification on which the API services is currently being accessed by the end user (customer)
     *
     * @return self
     */
    public function setDeviceId($device_id)
    {
        if (is_null($device_id)) {
            throw new \InvalidArgumentException('non-nullable device_id cannot be null');
        }
        if ((mb_strlen($device_id) > 400)) {
            throw new \InvalidArgumentException('invalid length for $device_id when calling ApplyOTTRequestAdditionalInfo., must be smaller than or equal to 400.');
        }

        $this->container['device_id'] = $device_id;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return string|null
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param string|null $latitude Location on which the API services is currently being accessed by the end user (customer), refer to ISO 6709 standard representation of geographic point location by coordinates
     *
     * @return self
     */
    public function setLatitude($latitude)
    {
        if (is_null($latitude)) {
            throw new \InvalidArgumentException('non-nullable latitude cannot be null');
        }
        if ((mb_strlen($latitude) > 10)) {
            throw new \InvalidArgumentException('invalid length for $latitude when calling ApplyOTTRequestAdditionalInfo., must be smaller than or equal to 10.');
        }
        if ((!preg_match("/^[-+]?[0-9]{1,2}([.][0-9]{1,4})?$/", ObjectSerializer::toString($latitude)))) {
            throw new \InvalidArgumentException("invalid value for \$latitude when calling ApplyOTTRequestAdditionalInfo., must conform to the pattern /^[-+]?[0-9]{1,2}([.][0-9]{1,4})?$/.");
        }

        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return string|null
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param string|null $longitude Location on which the API services is currently being accessed by the end user (customer), refer to ISO 6709 Standard representation of geographic point location by coordinates
     *
     * @return self
     */
    public function setLongitude($longitude)
    {
        if (is_null($longitude)) {
            throw new \InvalidArgumentException('non-nullable longitude cannot be null');
        }
        if ((mb_strlen($longitude) > 10)) {
            throw new \InvalidArgumentException('invalid length for $longitude when calling ApplyOTTRequestAdditionalInfo., must be smaller than or equal to 10.');
        }
        if ((!preg_match("/^[-+]?[0-9]{1,2}([.][0-9]{1,4})?$/", ObjectSerializer::toString($longitude)))) {
            throw new \InvalidArgumentException("invalid value for \$longitude when calling ApplyOTTRequestAdditionalInfo., must conform to the pattern /^[-+]?[0-9]{1,2}([.][0-9]{1,4})?$/.");
        }

        $this->container['longitude'] = $longitude;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


