<?php
/**
 * QueryPaymentResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\IPG
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IPG Cashier Pay API
 *
 * API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\IPG\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * QueryPaymentResponse Class Doc Comment
 *
 * @category Class
 * @package  Dana\IPG
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class QueryPaymentResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'QueryPaymentResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'response_code' => 'string',
        'response_message' => 'string',
        'original_partner_reference_no' => 'string',
        'original_reference_no' => 'string',
        'original_external_id' => 'string',
        'service_code' => 'string',
        'latest_transaction_status' => 'string',
        'transaction_status_desc' => 'string',
        'original_response_code' => 'string',
        'original_response_message' => 'string',
        'session_id' => 'string',
        'request_id' => 'string',
        'trans_amount' => '\Dana\IPG\v1\Model\Money',
        'amount' => '\Dana\IPG\v1\Model\Money',
        'fee_amount' => '\Dana\IPG\v1\Model\Money',
        'paid_time' => 'string',
        'title' => 'string',
        'additional_info' => '\Dana\IPG\v1\Model\QueryPaymentResponseAdditionalInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'response_code' => null,
        'response_message' => null,
        'original_partner_reference_no' => null,
        'original_reference_no' => null,
        'original_external_id' => null,
        'service_code' => null,
        'latest_transaction_status' => null,
        'transaction_status_desc' => null,
        'original_response_code' => null,
        'original_response_message' => null,
        'session_id' => null,
        'request_id' => null,
        'trans_amount' => null,
        'amount' => null,
        'fee_amount' => null,
        'paid_time' => null,
        'title' => null,
        'additional_info' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'response_code' => false,
        'response_message' => false,
        'original_partner_reference_no' => false,
        'original_reference_no' => false,
        'original_external_id' => false,
        'service_code' => false,
        'latest_transaction_status' => false,
        'transaction_status_desc' => false,
        'original_response_code' => false,
        'original_response_message' => false,
        'session_id' => false,
        'request_id' => false,
        'trans_amount' => false,
        'amount' => false,
        'fee_amount' => false,
        'paid_time' => false,
        'title' => false,
        'additional_info' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'response_code' => 'responseCode',
        'response_message' => 'responseMessage',
        'original_partner_reference_no' => 'originalPartnerReferenceNo',
        'original_reference_no' => 'originalReferenceNo',
        'original_external_id' => 'originalExternalId',
        'service_code' => 'serviceCode',
        'latest_transaction_status' => 'latestTransactionStatus',
        'transaction_status_desc' => 'transactionStatusDesc',
        'original_response_code' => 'originalResponseCode',
        'original_response_message' => 'originalResponseMessage',
        'session_id' => 'sessionId',
        'request_id' => 'requestID',
        'trans_amount' => 'transAmount',
        'amount' => 'amount',
        'fee_amount' => 'feeAmount',
        'paid_time' => 'paidTime',
        'title' => 'title',
        'additional_info' => 'additionalInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'response_code' => 'setResponseCode',
        'response_message' => 'setResponseMessage',
        'original_partner_reference_no' => 'setOriginalPartnerReferenceNo',
        'original_reference_no' => 'setOriginalReferenceNo',
        'original_external_id' => 'setOriginalExternalId',
        'service_code' => 'setServiceCode',
        'latest_transaction_status' => 'setLatestTransactionStatus',
        'transaction_status_desc' => 'setTransactionStatusDesc',
        'original_response_code' => 'setOriginalResponseCode',
        'original_response_message' => 'setOriginalResponseMessage',
        'session_id' => 'setSessionId',
        'request_id' => 'setRequestId',
        'trans_amount' => 'setTransAmount',
        'amount' => 'setAmount',
        'fee_amount' => 'setFeeAmount',
        'paid_time' => 'setPaidTime',
        'title' => 'setTitle',
        'additional_info' => 'setAdditionalInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'response_code' => 'getResponseCode',
        'response_message' => 'getResponseMessage',
        'original_partner_reference_no' => 'getOriginalPartnerReferenceNo',
        'original_reference_no' => 'getOriginalReferenceNo',
        'original_external_id' => 'getOriginalExternalId',
        'service_code' => 'getServiceCode',
        'latest_transaction_status' => 'getLatestTransactionStatus',
        'transaction_status_desc' => 'getTransactionStatusDesc',
        'original_response_code' => 'getOriginalResponseCode',
        'original_response_message' => 'getOriginalResponseMessage',
        'session_id' => 'getSessionId',
        'request_id' => 'getRequestId',
        'trans_amount' => 'getTransAmount',
        'amount' => 'getAmount',
        'fee_amount' => 'getFeeAmount',
        'paid_time' => 'getPaidTime',
        'title' => 'getTitle',
        'additional_info' => 'getAdditionalInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('response_code', $data ?? [], null);
        $this->setIfExists('response_message', $data ?? [], null);
        $this->setIfExists('original_partner_reference_no', $data ?? [], null);
        $this->setIfExists('original_reference_no', $data ?? [], null);
        $this->setIfExists('original_external_id', $data ?? [], null);
        $this->setIfExists('service_code', $data ?? [], '54');
        $this->setIfExists('latest_transaction_status', $data ?? [], null);
        $this->setIfExists('transaction_status_desc', $data ?? [], null);
        $this->setIfExists('original_response_code', $data ?? [], null);
        $this->setIfExists('original_response_message', $data ?? [], null);
        $this->setIfExists('session_id', $data ?? [], null);
        $this->setIfExists('request_id', $data ?? [], null);
        $this->setIfExists('trans_amount', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('fee_amount', $data ?? [], null);
        $this->setIfExists('paid_time', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('additional_info', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['response_code'] === null) {
            $invalidProperties[] = "'response_code' can't be null";
        }
        if ((mb_strlen($this->container['response_code']) > 7)) {
            $invalidProperties[] = "invalid value for 'response_code', the character length must be smaller than or equal to 7.";
        }

        if ($this->container['response_message'] === null) {
            $invalidProperties[] = "'response_message' can't be null";
        }
        if ((mb_strlen($this->container['response_message']) > 150)) {
            $invalidProperties[] = "invalid value for 'response_message', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['original_partner_reference_no']) && (mb_strlen($this->container['original_partner_reference_no']) > 64)) {
            $invalidProperties[] = "invalid value for 'original_partner_reference_no', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['original_reference_no']) && (mb_strlen($this->container['original_reference_no']) > 64)) {
            $invalidProperties[] = "invalid value for 'original_reference_no', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['original_external_id']) && (mb_strlen($this->container['original_external_id']) > 32)) {
            $invalidProperties[] = "invalid value for 'original_external_id', the character length must be smaller than or equal to 32.";
        }

        if ($this->container['service_code'] === null) {
            $invalidProperties[] = "'service_code' can't be null";
        }
        if ((mb_strlen($this->container['service_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'service_code', the character length must be smaller than or equal to 2.";
        }

        if ($this->container['latest_transaction_status'] === null) {
            $invalidProperties[] = "'latest_transaction_status' can't be null";
        }
        if ((mb_strlen($this->container['latest_transaction_status']) > 2)) {
            $invalidProperties[] = "invalid value for 'latest_transaction_status', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['transaction_status_desc']) && (mb_strlen($this->container['transaction_status_desc']) > 50)) {
            $invalidProperties[] = "invalid value for 'transaction_status_desc', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['original_response_code']) && (mb_strlen($this->container['original_response_code']) > 7)) {
            $invalidProperties[] = "invalid value for 'original_response_code', the character length must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['original_response_message']) && (mb_strlen($this->container['original_response_message']) > 150)) {
            $invalidProperties[] = "invalid value for 'original_response_message', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['session_id']) && (mb_strlen($this->container['session_id']) > 25)) {
            $invalidProperties[] = "invalid value for 'session_id', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['request_id']) && (mb_strlen($this->container['request_id']) > 25)) {
            $invalidProperties[] = "invalid value for 'request_id', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['paid_time']) && (mb_strlen($this->container['paid_time']) > 25)) {
            $invalidProperties[] = "invalid value for 'paid_time', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['paid_time']) && !preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/", $this->container['paid_time'])) {
            $invalidProperties[] = "invalid value for 'paid_time', must be conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) > 256)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 256.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets response_code
     *
     * @return string
     */
    public function getResponseCode()
    {
        return $this->container['response_code'];
    }

    /**
     * Sets response_code
     *
     * @param string $response_code Refer to response code list:<br> * 2005500 - Successful<br> * 4005500 - Bad Request - Retry request with proper parameter<br> * 4005501 - Invalid Field Format - Retry request with proper parameter<br> * 4005502 - Invalid Mandatory Field - Retry request with proper parameter<br> * 4015500 - Unauthorized. [reason] - Retry request with proper parameter<br> * 4015501 - Invalid Token (B2B) - Retry request with proper parameter<br> * 4045501 - Transaction Not Found - Try to create a new order<br> * 4295500 - Too Many Requests - Retry request periodically<br> * 5005500 - General Error - Retry request periodically<br> * 5005501 - Internal Server Error - Retry request periodically<br>
     *
     * @return self
     */
    public function setResponseCode($response_code)
    {
        if (is_null($response_code)) {
            throw new \InvalidArgumentException('non-nullable response_code cannot be null');
        }
        if ((mb_strlen($response_code) > 7)) {
            throw new \InvalidArgumentException('invalid length for $response_code when calling QueryPaymentResponse., must be smaller than or equal to 7.');
        }

        $this->container['response_code'] = $response_code;

        return $this;
    }

    /**
     * Gets response_message
     *
     * @return string
     */
    public function getResponseMessage()
    {
        return $this->container['response_message'];
    }

    /**
     * Sets response_message
     *
     * @param string $response_message Refer to response code list
     *
     * @return self
     */
    public function setResponseMessage($response_message)
    {
        if (is_null($response_message)) {
            throw new \InvalidArgumentException('non-nullable response_message cannot be null');
        }
        if ((mb_strlen($response_message) > 150)) {
            throw new \InvalidArgumentException('invalid length for $response_message when calling QueryPaymentResponse., must be smaller than or equal to 150.');
        }

        $this->container['response_message'] = $response_message;

        return $this;
    }

    /**
     * Gets original_partner_reference_no
     *
     * @return string|null
     */
    public function getOriginalPartnerReferenceNo()
    {
        return $this->container['original_partner_reference_no'];
    }

    /**
     * Sets original_partner_reference_no
     *
     * @param string|null $original_partner_reference_no Original transaction identifier on partner system
     *
     * @return self
     */
    public function setOriginalPartnerReferenceNo($original_partner_reference_no)
    {
        if (is_null($original_partner_reference_no)) {
            throw new \InvalidArgumentException('non-nullable original_partner_reference_no cannot be null');
        }
        if ((mb_strlen($original_partner_reference_no) > 64)) {
            throw new \InvalidArgumentException('invalid length for $original_partner_reference_no when calling QueryPaymentResponse., must be smaller than or equal to 64.');
        }

        $this->container['original_partner_reference_no'] = $original_partner_reference_no;

        return $this;
    }

    /**
     * Gets original_reference_no
     *
     * @return string|null
     */
    public function getOriginalReferenceNo()
    {
        return $this->container['original_reference_no'];
    }

    /**
     * Sets original_reference_no
     *
     * @param string|null $original_reference_no Original transaction identifier on DANA system
     *
     * @return self
     */
    public function setOriginalReferenceNo($original_reference_no)
    {
        if (is_null($original_reference_no)) {
            throw new \InvalidArgumentException('non-nullable original_reference_no cannot be null');
        }
        if ((mb_strlen($original_reference_no) > 64)) {
            throw new \InvalidArgumentException('invalid length for $original_reference_no when calling QueryPaymentResponse., must be smaller than or equal to 64.');
        }

        $this->container['original_reference_no'] = $original_reference_no;

        return $this;
    }

    /**
     * Gets original_external_id
     *
     * @return string|null
     */
    public function getOriginalExternalId()
    {
        return $this->container['original_external_id'];
    }

    /**
     * Sets original_external_id
     *
     * @param string|null $original_external_id Original external identifier on header message
     *
     * @return self
     */
    public function setOriginalExternalId($original_external_id)
    {
        if (is_null($original_external_id)) {
            throw new \InvalidArgumentException('non-nullable original_external_id cannot be null');
        }
        if ((mb_strlen($original_external_id) > 32)) {
            throw new \InvalidArgumentException('invalid length for $original_external_id when calling QueryPaymentResponse., must be smaller than or equal to 32.');
        }

        $this->container['original_external_id'] = $original_external_id;

        return $this;
    }

    /**
     * Gets service_code
     *
     * @return string
     */
    public function getServiceCode()
    {
        return $this->container['service_code'];
    }

    /**
     * Sets service_code
     *
     * @param string $service_code Transaction type indicator:<br> - IPG Cashier Pay - SNAP: 54<br> - QRIS CPM (Acquirer) - SNAP: 60<br> - QRIS MPM (Acquirer) - SNAP: 47<br> - Payment Gateway: 54<br>
     *
     * @return self
     */
    public function setServiceCode($service_code)
    {
        if (is_null($service_code)) {
            throw new \InvalidArgumentException('non-nullable service_code cannot be null');
        }
        if ((mb_strlen($service_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $service_code when calling QueryPaymentResponse., must be smaller than or equal to 2.');
        }

        $this->container['service_code'] = $service_code;

        return $this;
    }

    /**
     * Gets latest_transaction_status
     *
     * @return string
     */
    public function getLatestTransactionStatus()
    {
        return $this->container['latest_transaction_status'];
    }

    /**
     * Sets latest_transaction_status
     *
     * @param string $latest_transaction_status Status code:<br> - 00 = Success. Order has been successfully in final state and paid<br> - 01 = Initiated. Waiting for payment. Mark Payment as Pending<br> - 02 = Paying. The order is in process, not in final state, payment is success. Mark Payment as Success<br> - 05 = Cancelled. Order has been cancelled. Mark Payment as Failed<br> - 07 = Not found. Order is not found. Mark Payment as Failed<br>
     *
     * @return self
     */
    public function setLatestTransactionStatus($latest_transaction_status)
    {
        if (is_null($latest_transaction_status)) {
            throw new \InvalidArgumentException('non-nullable latest_transaction_status cannot be null');
        }
        if ((mb_strlen($latest_transaction_status) > 2)) {
            throw new \InvalidArgumentException('invalid length for $latest_transaction_status when calling QueryPaymentResponse., must be smaller than or equal to 2.');
        }

        $this->container['latest_transaction_status'] = $latest_transaction_status;

        return $this;
    }

    /**
     * Gets transaction_status_desc
     *
     * @return string|null
     */
    public function getTransactionStatusDesc()
    {
        return $this->container['transaction_status_desc'];
    }

    /**
     * Sets transaction_status_desc
     *
     * @param string|null $transaction_status_desc Description of transaction status
     *
     * @return self
     */
    public function setTransactionStatusDesc($transaction_status_desc)
    {
        if (is_null($transaction_status_desc)) {
            throw new \InvalidArgumentException('non-nullable transaction_status_desc cannot be null');
        }
        if ((mb_strlen($transaction_status_desc) > 50)) {
            throw new \InvalidArgumentException('invalid length for $transaction_status_desc when calling QueryPaymentResponse., must be smaller than or equal to 50.');
        }

        $this->container['transaction_status_desc'] = $transaction_status_desc;

        return $this;
    }

    /**
     * Gets original_response_code
     *
     * @return string|null
     */
    public function getOriginalResponseCode()
    {
        return $this->container['original_response_code'];
    }

    /**
     * Sets original_response_code
     *
     * @param string|null $original_response_code Original response code
     *
     * @return self
     */
    public function setOriginalResponseCode($original_response_code)
    {
        if (is_null($original_response_code)) {
            throw new \InvalidArgumentException('non-nullable original_response_code cannot be null');
        }
        if ((mb_strlen($original_response_code) > 7)) {
            throw new \InvalidArgumentException('invalid length for $original_response_code when calling QueryPaymentResponse., must be smaller than or equal to 7.');
        }

        $this->container['original_response_code'] = $original_response_code;

        return $this;
    }

    /**
     * Gets original_response_message
     *
     * @return string|null
     */
    public function getOriginalResponseMessage()
    {
        return $this->container['original_response_message'];
    }

    /**
     * Sets original_response_message
     *
     * @param string|null $original_response_message Original response message
     *
     * @return self
     */
    public function setOriginalResponseMessage($original_response_message)
    {
        if (is_null($original_response_message)) {
            throw new \InvalidArgumentException('non-nullable original_response_message cannot be null');
        }
        if ((mb_strlen($original_response_message) > 150)) {
            throw new \InvalidArgumentException('invalid length for $original_response_message when calling QueryPaymentResponse., must be smaller than or equal to 150.');
        }

        $this->container['original_response_message'] = $original_response_message;

        return $this;
    }

    /**
     * Gets session_id
     *
     * @return string|null
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param string|null $session_id Session identifier
     *
     * @return self
     */
    public function setSessionId($session_id)
    {
        if (is_null($session_id)) {
            throw new \InvalidArgumentException('non-nullable session_id cannot be null');
        }
        if ((mb_strlen($session_id) > 25)) {
            throw new \InvalidArgumentException('invalid length for $session_id when calling QueryPaymentResponse., must be smaller than or equal to 25.');
        }

        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets request_id
     *
     * @return string|null
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string|null $request_id Transaction request identifier
     *
     * @return self
     */
    public function setRequestId($request_id)
    {
        if (is_null($request_id)) {
            throw new \InvalidArgumentException('non-nullable request_id cannot be null');
        }
        if ((mb_strlen($request_id) > 25)) {
            throw new \InvalidArgumentException('invalid length for $request_id when calling QueryPaymentResponse., must be smaller than or equal to 25.');
        }

        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets trans_amount
     *
     * @return \Dana\IPG\v1\Model\Money|null
     */
    public function getTransAmount()
    {
        return $this->container['trans_amount'];
    }

    /**
     * Sets trans_amount
     *
     * @param \Dana\IPG\v1\Model\Money|null $trans_amount trans_amount
     *
     * @return self
     */
    public function setTransAmount($trans_amount)
    {
        if (is_null($trans_amount)) {
            throw new \InvalidArgumentException('non-nullable trans_amount cannot be null');
        }
        $this->container['trans_amount'] = $trans_amount;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \Dana\IPG\v1\Model\Money|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \Dana\IPG\v1\Model\Money|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets fee_amount
     *
     * @return \Dana\IPG\v1\Model\Money|null
     */
    public function getFeeAmount()
    {
        return $this->container['fee_amount'];
    }

    /**
     * Sets fee_amount
     *
     * @param \Dana\IPG\v1\Model\Money|null $fee_amount fee_amount
     *
     * @return self
     */
    public function setFeeAmount($fee_amount)
    {
        if (is_null($fee_amount)) {
            throw new \InvalidArgumentException('non-nullable fee_amount cannot be null');
        }
        $this->container['fee_amount'] = $fee_amount;

        return $this;
    }

    /**
     * Gets paid_time
     *
     * @return string|null
     */
    public function getPaidTime()
    {
        return $this->container['paid_time'];
    }

    /**
     * Sets paid_time
     *
     * @param string|null $paid_time Payment timestamp in format YYYY-MM-DDTHH:mm:ss+07:00 (Jakarta time)
     *
     * @return self
     */
    public function setPaidTime($paid_time)
    {
        if (is_null($paid_time)) {
            throw new \InvalidArgumentException('non-nullable paid_time cannot be null');
        }
        if ((mb_strlen($paid_time) > 25)) {
            throw new \InvalidArgumentException('invalid length for $paid_time when calling QueryPaymentResponse., must be smaller than or equal to 25.');
        }
        if ((!preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/", ObjectSerializer::toString($paid_time)))) {
            throw new \InvalidArgumentException("invalid value for \$paid_time when calling QueryPaymentResponse., must conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/.");
        }

        $this->container['paid_time'] = $paid_time;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Brief description of transaction
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        if ((mb_strlen($title) > 256)) {
            throw new \InvalidArgumentException('invalid length for $title when calling QueryPaymentResponse., must be smaller than or equal to 256.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets additional_info
     *
     * @return \Dana\IPG\v1\Model\QueryPaymentResponseAdditionalInfo|null
     */
    public function getAdditionalInfo()
    {
        return $this->container['additional_info'];
    }

    /**
     * Sets additional_info
     *
     * @param \Dana\IPG\v1\Model\QueryPaymentResponseAdditionalInfo|null $additional_info additional_info
     *
     * @return self
     */
    public function setAdditionalInfo($additional_info)
    {
        if (is_null($additional_info)) {
            throw new \InvalidArgumentException('non-nullable additional_info cannot be null');
        }
        $this->container['additional_info'] = $additional_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


