<?php
/**
 * TransferToDanaInquiryStatusResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\Disbursement
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Disbursement API
 *
 * API for doing disbursement operations in DANA, including DANA account inquiry, transfer to DANA, and transfer to bank disbursement
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\Disbursement\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * TransferToDanaInquiryStatusResponse Class Doc Comment
 *
 * @category Class
 * @package  Dana\Disbursement
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransferToDanaInquiryStatusResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransferToDanaInquiryStatusResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'responseCode' => 'string',
        'responseMessage' => 'string',
        'originalPartnerReferenceNo' => 'string',
        'originalReferenceNo' => 'string',
        'originalExternalId' => 'string',
        'serviceCode' => 'string',
        'amount' => '\Dana\Disbursement\v1\Model\Money',
        'latestTransactionStatus' => 'string',
        'transactionStatusDesc' => 'string',
        'additionalInfo' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'responseCode' => null,
        'responseMessage' => null,
        'originalPartnerReferenceNo' => null,
        'originalReferenceNo' => null,
        'originalExternalId' => null,
        'serviceCode' => null,
        'amount' => null,
        'latestTransactionStatus' => null,
        'transactionStatusDesc' => null,
        'additionalInfo' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'responseCode' => false,
        'responseMessage' => false,
        'originalPartnerReferenceNo' => false,
        'originalReferenceNo' => false,
        'originalExternalId' => false,
        'serviceCode' => false,
        'amount' => false,
        'latestTransactionStatus' => false,
        'transactionStatusDesc' => false,
        'additionalInfo' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'responseCode' => 'responseCode',
        'responseMessage' => 'responseMessage',
        'originalPartnerReferenceNo' => 'originalPartnerReferenceNo',
        'originalReferenceNo' => 'originalReferenceNo',
        'originalExternalId' => 'originalExternalId',
        'serviceCode' => 'serviceCode',
        'amount' => 'amount',
        'latestTransactionStatus' => 'latestTransactionStatus',
        'transactionStatusDesc' => 'transactionStatusDesc',
        'additionalInfo' => 'additionalInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'responseCode' => 'setResponseCode',
        'responseMessage' => 'setResponseMessage',
        'originalPartnerReferenceNo' => 'setOriginalPartnerReferenceNo',
        'originalReferenceNo' => 'setOriginalReferenceNo',
        'originalExternalId' => 'setOriginalExternalId',
        'serviceCode' => 'setServiceCode',
        'amount' => 'setAmount',
        'latestTransactionStatus' => 'setLatestTransactionStatus',
        'transactionStatusDesc' => 'setTransactionStatusDesc',
        'additionalInfo' => 'setAdditionalInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'responseCode' => 'getResponseCode',
        'responseMessage' => 'getResponseMessage',
        'originalPartnerReferenceNo' => 'getOriginalPartnerReferenceNo',
        'originalReferenceNo' => 'getOriginalReferenceNo',
        'originalExternalId' => 'getOriginalExternalId',
        'serviceCode' => 'getServiceCode',
        'amount' => 'getAmount',
        'latestTransactionStatus' => 'getLatestTransactionStatus',
        'transactionStatusDesc' => 'getTransactionStatusDesc',
        'additionalInfo' => 'getAdditionalInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const LATEST_TRANSACTION_STATUS__00 = '00';
    public const LATEST_TRANSACTION_STATUS__01 = '01';
    public const LATEST_TRANSACTION_STATUS__02 = '02';
    public const LATEST_TRANSACTION_STATUS__03 = '03';
    public const LATEST_TRANSACTION_STATUS__04 = '04';
    public const LATEST_TRANSACTION_STATUS__05 = '05';
    public const LATEST_TRANSACTION_STATUS__06 = '06';
    public const LATEST_TRANSACTION_STATUS__07 = '07';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLatestTransactionStatusAllowableValues()
    {
        return [
            self::LATEST_TRANSACTION_STATUS__00,
            self::LATEST_TRANSACTION_STATUS__01,
            self::LATEST_TRANSACTION_STATUS__02,
            self::LATEST_TRANSACTION_STATUS__03,
            self::LATEST_TRANSACTION_STATUS__04,
            self::LATEST_TRANSACTION_STATUS__05,
            self::LATEST_TRANSACTION_STATUS__06,
            self::LATEST_TRANSACTION_STATUS__07,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('responseCode', $data ?? [], null);
        $this->setIfExists('responseMessage', $data ?? [], null);
        $this->setIfExists('originalPartnerReferenceNo', $data ?? [], null);
        $this->setIfExists('originalReferenceNo', $data ?? [], null);
        $this->setIfExists('originalExternalId', $data ?? [], null);
        $this->setIfExists('serviceCode', $data ?? [], '38');
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('latestTransactionStatus', $data ?? [], null);
        $this->setIfExists('transactionStatusDesc', $data ?? [], null);
        $this->setIfExists('additionalInfo', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['responseCode'] === null) {
            $invalidProperties[] = "'responseCode' can't be null";
        }
        if ((mb_strlen($this->container['responseCode']) > 7)) {
            $invalidProperties[] = "invalid value for 'responseCode', the character length must be smaller than or equal to 7.";
        }

        if ($this->container['responseMessage'] === null) {
            $invalidProperties[] = "'responseMessage' can't be null";
        }
        if ((mb_strlen($this->container['responseMessage']) > 150)) {
            $invalidProperties[] = "invalid value for 'responseMessage', the character length must be smaller than or equal to 150.";
        }

        if ($this->container['originalPartnerReferenceNo'] === null) {
            $invalidProperties[] = "'originalPartnerReferenceNo' can't be null";
        }
        if ((mb_strlen($this->container['originalPartnerReferenceNo']) > 64)) {
            $invalidProperties[] = "invalid value for 'originalPartnerReferenceNo', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['originalReferenceNo']) && (mb_strlen($this->container['originalReferenceNo']) > 64)) {
            $invalidProperties[] = "invalid value for 'originalReferenceNo', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['originalExternalId']) && (mb_strlen($this->container['originalExternalId']) > 36)) {
            $invalidProperties[] = "invalid value for 'originalExternalId', the character length must be smaller than or equal to 36.";
        }

        if ($this->container['serviceCode'] === null) {
            $invalidProperties[] = "'serviceCode' can't be null";
        }
        if ((mb_strlen($this->container['serviceCode']) > 2)) {
            $invalidProperties[] = "invalid value for 'serviceCode', the character length must be smaller than or equal to 2.";
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['latestTransactionStatus'] === null) {
            $invalidProperties[] = "'latestTransactionStatus' can't be null";
        }
        $allowedValues = $this->getLatestTransactionStatusAllowableValues();
        if (!is_null($this->container['latestTransactionStatus']) && !in_array($this->container['latestTransactionStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'latestTransactionStatus', must be one of '%s'",
                $this->container['latestTransactionStatus'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['latestTransactionStatus']) > 2)) {
            $invalidProperties[] = "invalid value for 'latestTransactionStatus', the character length must be smaller than or equal to 2.";
        }

        if ($this->container['transactionStatusDesc'] === null) {
            $invalidProperties[] = "'transactionStatusDesc' can't be null";
        }
        if ((mb_strlen($this->container['transactionStatusDesc']) > 50)) {
            $invalidProperties[] = "invalid value for 'transactionStatusDesc', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets responseCode
     *
     * @return string
     */
    public function getResponseCode()
    {
        return $this->container['responseCode'];
    }

    /**
     * Sets responseCode
     *
     * @param string $responseCode Refer to response code list
     *
     * @return self
     */
    public function setResponseCode($responseCode)
    {
        if (is_null($responseCode)) {
            throw new \InvalidArgumentException('non-nullable responseCode cannot be null');
        }
        if ((mb_strlen($responseCode) > 7)) {
            throw new \InvalidArgumentException('invalid length for $responseCode when calling TransferToDanaInquiryStatusResponse., must be smaller than or equal to 7.');
        }

        $this->container['responseCode'] = $responseCode;

        return $this;
    }

    /**
     * Gets responseMessage
     *
     * @return string
     */
    public function getResponseMessage()
    {
        return $this->container['responseMessage'];
    }

    /**
     * Sets responseMessage
     *
     * @param string $responseMessage Refer to response code list
     *
     * @return self
     */
    public function setResponseMessage($responseMessage)
    {
        if (is_null($responseMessage)) {
            throw new \InvalidArgumentException('non-nullable responseMessage cannot be null');
        }
        if ((mb_strlen($responseMessage) > 150)) {
            throw new \InvalidArgumentException('invalid length for $responseMessage when calling TransferToDanaInquiryStatusResponse., must be smaller than or equal to 150.');
        }

        $this->container['responseMessage'] = $responseMessage;

        return $this;
    }

    /**
     * Gets originalPartnerReferenceNo
     *
     * @return string
     */
    public function getOriginalPartnerReferenceNo()
    {
        return $this->container['originalPartnerReferenceNo'];
    }

    /**
     * Sets originalPartnerReferenceNo
     *
     * @param string $originalPartnerReferenceNo Original transaction identifier on partner system
     *
     * @return self
     */
    public function setOriginalPartnerReferenceNo($originalPartnerReferenceNo)
    {
        if (is_null($originalPartnerReferenceNo)) {
            throw new \InvalidArgumentException('non-nullable originalPartnerReferenceNo cannot be null');
        }
        if ((mb_strlen($originalPartnerReferenceNo) > 64)) {
            throw new \InvalidArgumentException('invalid length for $originalPartnerReferenceNo when calling TransferToDanaInquiryStatusResponse., must be smaller than or equal to 64.');
        }

        $this->container['originalPartnerReferenceNo'] = $originalPartnerReferenceNo;

        return $this;
    }

    /**
     * Gets originalReferenceNo
     *
     * @return string|null
     */
    public function getOriginalReferenceNo()
    {
        return $this->container['originalReferenceNo'];
    }

    /**
     * Sets originalReferenceNo
     *
     * @param string|null $originalReferenceNo Original transaction identifier on DANA system
     *
     * @return self
     */
    public function setOriginalReferenceNo($originalReferenceNo)
    {
        if (is_null($originalReferenceNo)) {
            throw new \InvalidArgumentException('non-nullable originalReferenceNo cannot be null');
        }
        if ((mb_strlen($originalReferenceNo) > 64)) {
            throw new \InvalidArgumentException('invalid length for $originalReferenceNo when calling TransferToDanaInquiryStatusResponse., must be smaller than or equal to 64.');
        }

        $this->container['originalReferenceNo'] = $originalReferenceNo;

        return $this;
    }

    /**
     * Gets originalExternalId
     *
     * @return string|null
     */
    public function getOriginalExternalId()
    {
        return $this->container['originalExternalId'];
    }

    /**
     * Sets originalExternalId
     *
     * @param string|null $originalExternalId Original external identifier on header message
     *
     * @return self
     */
    public function setOriginalExternalId($originalExternalId)
    {
        if (is_null($originalExternalId)) {
            throw new \InvalidArgumentException('non-nullable originalExternalId cannot be null');
        }
        if ((mb_strlen($originalExternalId) > 36)) {
            throw new \InvalidArgumentException('invalid length for $originalExternalId when calling TransferToDanaInquiryStatusResponse., must be smaller than or equal to 36.');
        }

        $this->container['originalExternalId'] = $originalExternalId;

        return $this;
    }

    /**
     * Gets serviceCode
     *
     * @return string
     */
    public function getServiceCode()
    {
        return $this->container['serviceCode'];
    }

    /**
     * Sets serviceCode
     *
     * @param string $serviceCode Transaction type indicator is based on the service code of the original transaction request, value always 38
     *
     * @return self
     */
    public function setServiceCode($serviceCode)
    {
        if (is_null($serviceCode)) {
            throw new \InvalidArgumentException('non-nullable serviceCode cannot be null');
        }
        if ((mb_strlen($serviceCode) > 2)) {
            throw new \InvalidArgumentException('invalid length for $serviceCode when calling TransferToDanaInquiryStatusResponse., must be smaller than or equal to 2.');
        }

        $this->container['serviceCode'] = $serviceCode;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \Dana\Disbursement\v1\Model\Money
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \Dana\Disbursement\v1\Model\Money $amount Amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets latestTransactionStatus
     *
     * @return string
     */
    public function getLatestTransactionStatus()
    {
        return $this->container['latestTransactionStatus'];
    }

    /**
     * Sets latestTransactionStatus
     *
     * @param string $latestTransactionStatus Status of latest transaction:<br> 00 - Success<br> 01 - Initiated<br> 02 - Paying<br> 03 - Pending<br> 04 - Refunded<br> 05 - Cancelled<br> 06 - Failed<br> 07 - Not found
     *
     * @return self
     */
    public function setLatestTransactionStatus($latestTransactionStatus)
    {
        if (is_null($latestTransactionStatus)) {
            throw new \InvalidArgumentException('non-nullable latestTransactionStatus cannot be null');
        }
        $allowedValues = $this->getLatestTransactionStatusAllowableValues();
        if (!in_array($latestTransactionStatus, $allowedValues, true) && !empty($latestTransactionStatus)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'latestTransactionStatus', must be one of '%s'",
                    $latestTransactionStatus,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($latestTransactionStatus) > 2)) {
            throw new \InvalidArgumentException('invalid length for $latestTransactionStatus when calling TransferToDanaInquiryStatusResponse., must be smaller than or equal to 2.');
        }

        $this->container['latestTransactionStatus'] = $latestTransactionStatus;

        return $this;
    }

    /**
     * Gets transactionStatusDesc
     *
     * @return string
     */
    public function getTransactionStatusDesc()
    {
        return $this->container['transactionStatusDesc'];
    }

    /**
     * Sets transactionStatusDesc
     *
     * @param string $transactionStatusDesc Description of transaction status
     *
     * @return self
     */
    public function setTransactionStatusDesc($transactionStatusDesc)
    {
        if (is_null($transactionStatusDesc)) {
            throw new \InvalidArgumentException('non-nullable transactionStatusDesc cannot be null');
        }
        if ((mb_strlen($transactionStatusDesc) > 50)) {
            throw new \InvalidArgumentException('invalid length for $transactionStatusDesc when calling TransferToDanaInquiryStatusResponse., must be smaller than or equal to 50.');
        }

        $this->container['transactionStatusDesc'] = $transactionStatusDesc;

        return $this;
    }

    /**
     * Gets additionalInfo
     *
     * @return object|null
     */
    public function getAdditionalInfo()
    {
        return $this->container['additionalInfo'];
    }

    /**
     * Sets additionalInfo
     *
     * @param object|null $additionalInfo Additional information
     *
     * @return self
     */
    public function setAdditionalInfo($additionalInfo)
    {
        if (is_null($additionalInfo)) {
            throw new \InvalidArgumentException('non-nullable additionalInfo cannot be null');
        }
        $this->container['additionalInfo'] = $additionalInfo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


