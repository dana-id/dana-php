<?php
/**
 * BankAccountInquiryResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\Disbursement
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Disbursement API
 *
 * API for doing disbursement operations in DANA, including DANA account inquiry, transfer to DANA, and transfer to bank disbursement
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\Disbursement\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * BankAccountInquiryResponse Class Doc Comment
 *
 * @category Class
 * @package  Dana\Disbursement
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BankAccountInquiryResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BankAccountInquiryResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'responseCode' => 'string',
        'responseMessage' => 'string',
        'referenceNo' => 'string',
        'partnerReferenceNo' => 'string',
        'accountType' => 'string',
        'beneficiaryAccountNumber' => 'string',
        'beneficiaryAccountName' => 'string',
        'beneficiaryBankCode' => 'string',
        'beneficiaryBankShortName' => 'string',
        'beneficiaryBankName' => 'string',
        'amount' => '\Dana\Disbursement\v1\Model\Money',
        'additionalInfo' => '\Dana\Disbursement\v1\Model\BankAccountInquiryResponseAdditionalInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'responseCode' => null,
        'responseMessage' => null,
        'referenceNo' => null,
        'partnerReferenceNo' => null,
        'accountType' => null,
        'beneficiaryAccountNumber' => null,
        'beneficiaryAccountName' => null,
        'beneficiaryBankCode' => null,
        'beneficiaryBankShortName' => null,
        'beneficiaryBankName' => null,
        'amount' => null,
        'additionalInfo' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'responseCode' => false,
        'responseMessage' => false,
        'referenceNo' => false,
        'partnerReferenceNo' => false,
        'accountType' => false,
        'beneficiaryAccountNumber' => false,
        'beneficiaryAccountName' => false,
        'beneficiaryBankCode' => false,
        'beneficiaryBankShortName' => false,
        'beneficiaryBankName' => false,
        'amount' => false,
        'additionalInfo' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'responseCode' => 'responseCode',
        'responseMessage' => 'responseMessage',
        'referenceNo' => 'referenceNo',
        'partnerReferenceNo' => 'partnerReferenceNo',
        'accountType' => 'accountType',
        'beneficiaryAccountNumber' => 'beneficiaryAccountNumber',
        'beneficiaryAccountName' => 'beneficiaryAccountName',
        'beneficiaryBankCode' => 'beneficiaryBankCode',
        'beneficiaryBankShortName' => 'beneficiaryBankShortName',
        'beneficiaryBankName' => 'beneficiaryBankName',
        'amount' => 'amount',
        'additionalInfo' => 'additionalInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'responseCode' => 'setResponseCode',
        'responseMessage' => 'setResponseMessage',
        'referenceNo' => 'setReferenceNo',
        'partnerReferenceNo' => 'setPartnerReferenceNo',
        'accountType' => 'setAccountType',
        'beneficiaryAccountNumber' => 'setBeneficiaryAccountNumber',
        'beneficiaryAccountName' => 'setBeneficiaryAccountName',
        'beneficiaryBankCode' => 'setBeneficiaryBankCode',
        'beneficiaryBankShortName' => 'setBeneficiaryBankShortName',
        'beneficiaryBankName' => 'setBeneficiaryBankName',
        'amount' => 'setAmount',
        'additionalInfo' => 'setAdditionalInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'responseCode' => 'getResponseCode',
        'responseMessage' => 'getResponseMessage',
        'referenceNo' => 'getReferenceNo',
        'partnerReferenceNo' => 'getPartnerReferenceNo',
        'accountType' => 'getAccountType',
        'beneficiaryAccountNumber' => 'getBeneficiaryAccountNumber',
        'beneficiaryAccountName' => 'getBeneficiaryAccountName',
        'beneficiaryBankCode' => 'getBeneficiaryBankCode',
        'beneficiaryBankShortName' => 'getBeneficiaryBankShortName',
        'beneficiaryBankName' => 'getBeneficiaryBankName',
        'amount' => 'getAmount',
        'additionalInfo' => 'getAdditionalInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('responseCode', $data ?? [], null);
        $this->setIfExists('responseMessage', $data ?? [], null);
        $this->setIfExists('referenceNo', $data ?? [], null);
        $this->setIfExists('partnerReferenceNo', $data ?? [], null);
        $this->setIfExists('accountType', $data ?? [], null);
        $this->setIfExists('beneficiaryAccountNumber', $data ?? [], null);
        $this->setIfExists('beneficiaryAccountName', $data ?? [], null);
        $this->setIfExists('beneficiaryBankCode', $data ?? [], null);
        $this->setIfExists('beneficiaryBankShortName', $data ?? [], null);
        $this->setIfExists('beneficiaryBankName', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('additionalInfo', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['responseCode'] === null) {
            $invalidProperties[] = "'responseCode' can't be null";
        }
        if ((mb_strlen($this->container['responseCode']) > 7)) {
            $invalidProperties[] = "invalid value for 'responseCode', the character length must be smaller than or equal to 7.";
        }

        if ($this->container['responseMessage'] === null) {
            $invalidProperties[] = "'responseMessage' can't be null";
        }
        if ((mb_strlen($this->container['responseMessage']) > 150)) {
            $invalidProperties[] = "invalid value for 'responseMessage', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['referenceNo']) && (mb_strlen($this->container['referenceNo']) > 64)) {
            $invalidProperties[] = "invalid value for 'referenceNo', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['partnerReferenceNo']) && (mb_strlen($this->container['partnerReferenceNo']) > 64)) {
            $invalidProperties[] = "invalid value for 'partnerReferenceNo', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['accountType']) && (mb_strlen($this->container['accountType']) > 25)) {
            $invalidProperties[] = "invalid value for 'accountType', the character length must be smaller than or equal to 25.";
        }

        if ($this->container['beneficiaryAccountNumber'] === null) {
            $invalidProperties[] = "'beneficiaryAccountNumber' can't be null";
        }
        if ((mb_strlen($this->container['beneficiaryAccountNumber']) > 32)) {
            $invalidProperties[] = "invalid value for 'beneficiaryAccountNumber', the character length must be smaller than or equal to 32.";
        }

        if ($this->container['beneficiaryAccountName'] === null) {
            $invalidProperties[] = "'beneficiaryAccountName' can't be null";
        }
        if ((mb_strlen($this->container['beneficiaryAccountName']) > 64)) {
            $invalidProperties[] = "invalid value for 'beneficiaryAccountName', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['beneficiaryBankCode']) && (mb_strlen($this->container['beneficiaryBankCode']) > 8)) {
            $invalidProperties[] = "invalid value for 'beneficiaryBankCode', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['beneficiaryBankShortName']) && (mb_strlen($this->container['beneficiaryBankShortName']) > 25)) {
            $invalidProperties[] = "invalid value for 'beneficiaryBankShortName', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['beneficiaryBankName']) && (mb_strlen($this->container['beneficiaryBankName']) > 25)) {
            $invalidProperties[] = "invalid value for 'beneficiaryBankName', the character length must be smaller than or equal to 25.";
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets responseCode
     *
     * @return string
     */
    public function getResponseCode()
    {
        return $this->container['responseCode'];
    }

    /**
     * Sets responseCode
     *
     * @param string $responseCode Refer to response code list
     *
     * @return self
     */
    public function setResponseCode($responseCode)
    {
        if (is_null($responseCode)) {
            throw new \InvalidArgumentException('non-nullable responseCode cannot be null');
        }
        if ((mb_strlen($responseCode) > 7)) {
            throw new \InvalidArgumentException('invalid length for $responseCode when calling BankAccountInquiryResponse., must be smaller than or equal to 7.');
        }

        $this->container['responseCode'] = $responseCode;

        return $this;
    }

    /**
     * Gets responseMessage
     *
     * @return string
     */
    public function getResponseMessage()
    {
        return $this->container['responseMessage'];
    }

    /**
     * Sets responseMessage
     *
     * @param string $responseMessage Refer to response code list
     *
     * @return self
     */
    public function setResponseMessage($responseMessage)
    {
        if (is_null($responseMessage)) {
            throw new \InvalidArgumentException('non-nullable responseMessage cannot be null');
        }
        if ((mb_strlen($responseMessage) > 150)) {
            throw new \InvalidArgumentException('invalid length for $responseMessage when calling BankAccountInquiryResponse., must be smaller than or equal to 150.');
        }

        $this->container['responseMessage'] = $responseMessage;

        return $this;
    }

    /**
     * Gets referenceNo
     *
     * @return string|null
     */
    public function getReferenceNo()
    {
        return $this->container['referenceNo'];
    }

    /**
     * Sets referenceNo
     *
     * @param string|null $referenceNo Transaction identifier on DANA system
     *
     * @return self
     */
    public function setReferenceNo($referenceNo)
    {
        if (is_null($referenceNo)) {
            throw new \InvalidArgumentException('non-nullable referenceNo cannot be null');
        }
        if ((mb_strlen($referenceNo) > 64)) {
            throw new \InvalidArgumentException('invalid length for $referenceNo when calling BankAccountInquiryResponse., must be smaller than or equal to 64.');
        }

        $this->container['referenceNo'] = $referenceNo;

        return $this;
    }

    /**
     * Gets partnerReferenceNo
     *
     * @return string|null
     */
    public function getPartnerReferenceNo()
    {
        return $this->container['partnerReferenceNo'];
    }

    /**
     * Sets partnerReferenceNo
     *
     * @param string|null $partnerReferenceNo Unique transaction identifier on partner system which assigned to each transaction<br> Notes:<br> If the partner receives a timeout or an unexpected response from DANA and partner expects to perform retry request to DANA, please use the partnerReferenceNo that is the same as the one used in the transaction request process before
     *
     * @return self
     */
    public function setPartnerReferenceNo($partnerReferenceNo)
    {
        if (is_null($partnerReferenceNo)) {
            throw new \InvalidArgumentException('non-nullable partnerReferenceNo cannot be null');
        }
        if ((mb_strlen($partnerReferenceNo) > 64)) {
            throw new \InvalidArgumentException('invalid length for $partnerReferenceNo when calling BankAccountInquiryResponse., must be smaller than or equal to 64.');
        }

        $this->container['partnerReferenceNo'] = $partnerReferenceNo;

        return $this;
    }

    /**
     * Gets accountType
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['accountType'];
    }

    /**
     * Sets accountType
     *
     * @param string|null $accountType Customer account type
     *
     * @return self
     */
    public function setAccountType($accountType)
    {
        if (is_null($accountType)) {
            throw new \InvalidArgumentException('non-nullable accountType cannot be null');
        }
        if ((mb_strlen($accountType) > 25)) {
            throw new \InvalidArgumentException('invalid length for $accountType when calling BankAccountInquiryResponse., must be smaller than or equal to 25.');
        }

        $this->container['accountType'] = $accountType;

        return $this;
    }

    /**
     * Gets beneficiaryAccountNumber
     *
     * @return string
     */
    public function getBeneficiaryAccountNumber()
    {
        return $this->container['beneficiaryAccountNumber'];
    }

    /**
     * Sets beneficiaryAccountNumber
     *
     * @param string $beneficiaryAccountNumber Beneficiary account number
     *
     * @return self
     */
    public function setBeneficiaryAccountNumber($beneficiaryAccountNumber)
    {
        if (is_null($beneficiaryAccountNumber)) {
            throw new \InvalidArgumentException('non-nullable beneficiaryAccountNumber cannot be null');
        }
        if ((mb_strlen($beneficiaryAccountNumber) > 32)) {
            throw new \InvalidArgumentException('invalid length for $beneficiaryAccountNumber when calling BankAccountInquiryResponse., must be smaller than or equal to 32.');
        }

        $this->container['beneficiaryAccountNumber'] = $beneficiaryAccountNumber;

        return $this;
    }

    /**
     * Gets beneficiaryAccountName
     *
     * @return string
     */
    public function getBeneficiaryAccountName()
    {
        return $this->container['beneficiaryAccountName'];
    }

    /**
     * Sets beneficiaryAccountName
     *
     * @param string $beneficiaryAccountName Beneficiary account name
     *
     * @return self
     */
    public function setBeneficiaryAccountName($beneficiaryAccountName)
    {
        if (is_null($beneficiaryAccountName)) {
            throw new \InvalidArgumentException('non-nullable beneficiaryAccountName cannot be null');
        }
        if ((mb_strlen($beneficiaryAccountName) > 64)) {
            throw new \InvalidArgumentException('invalid length for $beneficiaryAccountName when calling BankAccountInquiryResponse., must be smaller than or equal to 64.');
        }

        $this->container['beneficiaryAccountName'] = $beneficiaryAccountName;

        return $this;
    }

    /**
     * Gets beneficiaryBankCode
     *
     * @return string|null
     */
    public function getBeneficiaryBankCode()
    {
        return $this->container['beneficiaryBankCode'];
    }

    /**
     * Sets beneficiaryBankCode
     *
     * @param string|null $beneficiaryBankCode Beneficiary Bank code
     *
     * @return self
     */
    public function setBeneficiaryBankCode($beneficiaryBankCode)
    {
        if (is_null($beneficiaryBankCode)) {
            throw new \InvalidArgumentException('non-nullable beneficiaryBankCode cannot be null');
        }
        if ((mb_strlen($beneficiaryBankCode) > 8)) {
            throw new \InvalidArgumentException('invalid length for $beneficiaryBankCode when calling BankAccountInquiryResponse., must be smaller than or equal to 8.');
        }

        $this->container['beneficiaryBankCode'] = $beneficiaryBankCode;

        return $this;
    }

    /**
     * Gets beneficiaryBankShortName
     *
     * @return string|null
     */
    public function getBeneficiaryBankShortName()
    {
        return $this->container['beneficiaryBankShortName'];
    }

    /**
     * Sets beneficiaryBankShortName
     *
     * @param string|null $beneficiaryBankShortName Beneficiary Bank short name
     *
     * @return self
     */
    public function setBeneficiaryBankShortName($beneficiaryBankShortName)
    {
        if (is_null($beneficiaryBankShortName)) {
            throw new \InvalidArgumentException('non-nullable beneficiaryBankShortName cannot be null');
        }
        if ((mb_strlen($beneficiaryBankShortName) > 25)) {
            throw new \InvalidArgumentException('invalid length for $beneficiaryBankShortName when calling BankAccountInquiryResponse., must be smaller than or equal to 25.');
        }

        $this->container['beneficiaryBankShortName'] = $beneficiaryBankShortName;

        return $this;
    }

    /**
     * Gets beneficiaryBankName
     *
     * @return string|null
     */
    public function getBeneficiaryBankName()
    {
        return $this->container['beneficiaryBankName'];
    }

    /**
     * Sets beneficiaryBankName
     *
     * @param string|null $beneficiaryBankName Beneficiary Bank name
     *
     * @return self
     */
    public function setBeneficiaryBankName($beneficiaryBankName)
    {
        if (is_null($beneficiaryBankName)) {
            throw new \InvalidArgumentException('non-nullable beneficiaryBankName cannot be null');
        }
        if ((mb_strlen($beneficiaryBankName) > 25)) {
            throw new \InvalidArgumentException('invalid length for $beneficiaryBankName when calling BankAccountInquiryResponse., must be smaller than or equal to 25.');
        }

        $this->container['beneficiaryBankName'] = $beneficiaryBankName;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \Dana\Disbursement\v1\Model\Money
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \Dana\Disbursement\v1\Model\Money $amount Amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets additionalInfo
     *
     * @return \Dana\Disbursement\v1\Model\BankAccountInquiryResponseAdditionalInfo|null
     */
    public function getAdditionalInfo()
    {
        return $this->container['additionalInfo'];
    }

    /**
     * Sets additionalInfo
     *
     * @param \Dana\Disbursement\v1\Model\BankAccountInquiryResponseAdditionalInfo|null $additionalInfo additionalInfo
     *
     * @return self
     */
    public function setAdditionalInfo($additionalInfo)
    {
        if (is_null($additionalInfo)) {
            throw new \InvalidArgumentException('non-nullable additionalInfo cannot be null');
        }
        $this->container['additionalInfo'] = $additionalInfo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


