<?php
/**
 * TransferToBankRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\Disbursement
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Disbursement API
 *
 * API for doing disbursement operations in DANA, including DANA account inquiry, transfer to DANA, and transfer to bank disbursement
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\Disbursement\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * TransferToBankRequest Class Doc Comment
 *
 * @category Class
 * @package  Dana\Disbursement
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransferToBankRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransferToBankRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'partner_reference_no' => 'string',
        'customer_number' => 'string',
        'account_type' => 'string',
        'beneficiary_account_number' => 'string',
        'beneficiary_bank_code' => 'string',
        'amount' => '\Dana\Disbursement\v1\Model\Money',
        'additional_info' => '\Dana\Disbursement\v1\Model\TransferToBankRequestAdditionalInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'partner_reference_no' => null,
        'customer_number' => null,
        'account_type' => null,
        'beneficiary_account_number' => null,
        'beneficiary_bank_code' => null,
        'amount' => null,
        'additional_info' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'partner_reference_no' => false,
        'customer_number' => false,
        'account_type' => false,
        'beneficiary_account_number' => false,
        'beneficiary_bank_code' => false,
        'amount' => false,
        'additional_info' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'partner_reference_no' => 'partnerReferenceNo',
        'customer_number' => 'customerNumber',
        'account_type' => 'accountType',
        'beneficiary_account_number' => 'beneficiaryAccountNumber',
        'beneficiary_bank_code' => 'beneficiaryBankCode',
        'amount' => 'amount',
        'additional_info' => 'additionalInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'partner_reference_no' => 'setPartnerReferenceNo',
        'customer_number' => 'setCustomerNumber',
        'account_type' => 'setAccountType',
        'beneficiary_account_number' => 'setBeneficiaryAccountNumber',
        'beneficiary_bank_code' => 'setBeneficiaryBankCode',
        'amount' => 'setAmount',
        'additional_info' => 'setAdditionalInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'partner_reference_no' => 'getPartnerReferenceNo',
        'customer_number' => 'getCustomerNumber',
        'account_type' => 'getAccountType',
        'beneficiary_account_number' => 'getBeneficiaryAccountNumber',
        'beneficiary_bank_code' => 'getBeneficiaryBankCode',
        'amount' => 'getAmount',
        'additional_info' => 'getAdditionalInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('partner_reference_no', $data ?? [], null);
        $this->setIfExists('customer_number', $data ?? [], null);
        $this->setIfExists('account_type', $data ?? [], null);
        $this->setIfExists('beneficiary_account_number', $data ?? [], null);
        $this->setIfExists('beneficiary_bank_code', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('additional_info', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['partner_reference_no']) && (mb_strlen($this->container['partner_reference_no']) > 64)) {
            $invalidProperties[] = "invalid value for 'partner_reference_no', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['customer_number'] === null) {
            $invalidProperties[] = "'customer_number' can't be null";
        }
        if ((mb_strlen($this->container['customer_number']) > 32)) {
            $invalidProperties[] = "invalid value for 'customer_number', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['account_type']) && (mb_strlen($this->container['account_type']) > 25)) {
            $invalidProperties[] = "invalid value for 'account_type', the character length must be smaller than or equal to 25.";
        }

        if ($this->container['beneficiary_account_number'] === null) {
            $invalidProperties[] = "'beneficiary_account_number' can't be null";
        }
        if ((mb_strlen($this->container['beneficiary_account_number']) > 32)) {
            $invalidProperties[] = "invalid value for 'beneficiary_account_number', the character length must be smaller than or equal to 32.";
        }

        if ($this->container['beneficiary_bank_code'] === null) {
            $invalidProperties[] = "'beneficiary_bank_code' can't be null";
        }
        if ((mb_strlen($this->container['beneficiary_bank_code']) > 8)) {
            $invalidProperties[] = "invalid value for 'beneficiary_bank_code', the character length must be smaller than or equal to 8.";
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['additional_info'] === null) {
            $invalidProperties[] = "'additional_info' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets partner_reference_no
     *
     * @return string|null
     */
    public function getPartnerReferenceNo()
    {
        return $this->container['partner_reference_no'];
    }

    /**
     * Sets partner_reference_no
     *
     * @param string|null $partner_reference_no Unique transaction identifier on partner system which assigned to each transaction<br> Notes:<br> If the partner receives a timeout or an unexpected response from DANA and partner expects to perform retry request to DANA, please use the partnerReferenceNo that is the same as the one used in the transaction request process before
     *
     * @return self
     */
    public function setPartnerReferenceNo($partner_reference_no)
    {
        if (is_null($partner_reference_no)) {
            throw new \InvalidArgumentException('non-nullable partner_reference_no cannot be null');
        }
        if ((mb_strlen($partner_reference_no) > 64)) {
            throw new \InvalidArgumentException('invalid length for $partner_reference_no when calling TransferToBankRequest., must be smaller than or equal to 64.');
        }

        $this->container['partner_reference_no'] = $partner_reference_no;

        return $this;
    }

    /**
     * Gets customer_number
     *
     * @return string
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param string $customer_number Customer account number, in format 628xxx
     *
     * @return self
     */
    public function setCustomerNumber($customer_number)
    {
        if (is_null($customer_number)) {
            throw new \InvalidArgumentException('non-nullable customer_number cannot be null');
        }
        if ((mb_strlen($customer_number) > 32)) {
            throw new \InvalidArgumentException('invalid length for $customer_number when calling TransferToBankRequest., must be smaller than or equal to 32.');
        }

        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string|null $account_type Customer account type
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        if (is_null($account_type)) {
            throw new \InvalidArgumentException('non-nullable account_type cannot be null');
        }
        if ((mb_strlen($account_type) > 25)) {
            throw new \InvalidArgumentException('invalid length for $account_type when calling TransferToBankRequest., must be smaller than or equal to 25.');
        }

        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets beneficiary_account_number
     *
     * @return string
     */
    public function getBeneficiaryAccountNumber()
    {
        return $this->container['beneficiary_account_number'];
    }

    /**
     * Sets beneficiary_account_number
     *
     * @param string $beneficiary_account_number Beneficiary account number
     *
     * @return self
     */
    public function setBeneficiaryAccountNumber($beneficiary_account_number)
    {
        if (is_null($beneficiary_account_number)) {
            throw new \InvalidArgumentException('non-nullable beneficiary_account_number cannot be null');
        }
        if ((mb_strlen($beneficiary_account_number) > 32)) {
            throw new \InvalidArgumentException('invalid length for $beneficiary_account_number when calling TransferToBankRequest., must be smaller than or equal to 32.');
        }

        $this->container['beneficiary_account_number'] = $beneficiary_account_number;

        return $this;
    }

    /**
     * Gets beneficiary_bank_code
     *
     * @return string
     */
    public function getBeneficiaryBankCode()
    {
        return $this->container['beneficiary_bank_code'];
    }

    /**
     * Sets beneficiary_bank_code
     *
     * @param string $beneficiary_bank_code Beneficiary Bank code
     *
     * @return self
     */
    public function setBeneficiaryBankCode($beneficiary_bank_code)
    {
        if (is_null($beneficiary_bank_code)) {
            throw new \InvalidArgumentException('non-nullable beneficiary_bank_code cannot be null');
        }
        if ((mb_strlen($beneficiary_bank_code) > 8)) {
            throw new \InvalidArgumentException('invalid length for $beneficiary_bank_code when calling TransferToBankRequest., must be smaller than or equal to 8.');
        }

        $this->container['beneficiary_bank_code'] = $beneficiary_bank_code;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \Dana\Disbursement\v1\Model\Money
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \Dana\Disbursement\v1\Model\Money $amount Amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets additional_info
     *
     * @return \Dana\Disbursement\v1\Model\TransferToBankRequestAdditionalInfo
     */
    public function getAdditionalInfo()
    {
        return $this->container['additional_info'];
    }

    /**
     * Sets additional_info
     *
     * @param \Dana\Disbursement\v1\Model\TransferToBankRequestAdditionalInfo $additional_info additional_info
     *
     * @return self
     */
    public function setAdditionalInfo($additional_info)
    {
        if (is_null($additional_info)) {
            throw new \InvalidArgumentException('non-nullable additional_info cannot be null');
        }
        $this->container['additional_info'] = $additional_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


