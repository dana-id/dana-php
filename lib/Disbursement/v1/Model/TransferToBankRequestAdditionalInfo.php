<?php
/**
 * TransferToBankRequestAdditionalInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\Disbursement
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Disbursement API
 *
 * API for doing disbursement operations in DANA, including DANA account inquiry, transfer to DANA, and transfer to bank disbursement
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\Disbursement\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * TransferToBankRequestAdditionalInfo Class Doc Comment
 *
 * @category Class
 * @description Additional information
 * @package  Dana\Disbursement
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransferToBankRequestAdditionalInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransferToBankRequest_additionalInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fund_type' => 'string',
        'external_division_id' => 'string',
        'charge_target' => 'string',
        'need_notify' => 'bool',
        'beneficiary_account_name' => 'string',
        'access_token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'fund_type' => null,
        'external_division_id' => null,
        'charge_target' => null,
        'need_notify' => null,
        'beneficiary_account_name' => null,
        'access_token' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'fund_type' => false,
        'external_division_id' => false,
        'charge_target' => false,
        'need_notify' => false,
        'beneficiary_account_name' => false,
        'access_token' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fund_type' => 'fundType',
        'external_division_id' => 'externalDivisionId',
        'charge_target' => 'chargeTarget',
        'need_notify' => 'needNotify',
        'beneficiary_account_name' => 'beneficiaryAccountName',
        'access_token' => 'accessToken'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fund_type' => 'setFundType',
        'external_division_id' => 'setExternalDivisionId',
        'charge_target' => 'setChargeTarget',
        'need_notify' => 'setNeedNotify',
        'beneficiary_account_name' => 'setBeneficiaryAccountName',
        'access_token' => 'setAccessToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fund_type' => 'getFundType',
        'external_division_id' => 'getExternalDivisionId',
        'charge_target' => 'getChargeTarget',
        'need_notify' => 'getNeedNotify',
        'beneficiary_account_name' => 'getBeneficiaryAccountName',
        'access_token' => 'getAccessToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CHARGE_TARGET_DIVISION = 'DIVISION';
    public const CHARGE_TARGET_MERCHANT = 'MERCHANT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChargeTargetAllowableValues()
    {
        return [
            self::CHARGE_TARGET_DIVISION,
            self::CHARGE_TARGET_MERCHANT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('fund_type', $data ?? [], null);
        $this->setIfExists('external_division_id', $data ?? [], null);
        $this->setIfExists('charge_target', $data ?? [], null);
        $this->setIfExists('need_notify', $data ?? [], null);
        $this->setIfExists('beneficiary_account_name', $data ?? [], null);
        $this->setIfExists('access_token', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['fund_type'] === null) {
            $invalidProperties[] = "'fund_type' can't be null";
        }
        if ((mb_strlen($this->container['fund_type']) > 64)) {
            $invalidProperties[] = "invalid value for 'fund_type', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['external_division_id']) && (mb_strlen($this->container['external_division_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'external_division_id', the character length must be smaller than or equal to 64.";
        }

        $allowedValues = $this->getChargeTargetAllowableValues();
        if (!is_null($this->container['charge_target']) && !in_array($this->container['charge_target'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'charge_target', must be one of '%s'",
                $this->container['charge_target'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['charge_target']) && (mb_strlen($this->container['charge_target']) > 64)) {
            $invalidProperties[] = "invalid value for 'charge_target', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['beneficiary_account_name']) && (mb_strlen($this->container['beneficiary_account_name']) > 64)) {
            $invalidProperties[] = "invalid value for 'beneficiary_account_name', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['access_token']) && (mb_strlen($this->container['access_token']) > 512)) {
            $invalidProperties[] = "invalid value for 'access_token', the character length must be smaller than or equal to 512.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fund_type
     *
     * @return string
     */
    public function getFundType()
    {
        return $this->container['fund_type'];
    }

    /**
     * Sets fund_type
     *
     * @param string $fund_type Additional information of withdraw fund type, i.e.<br> MERCHANT_WITHDRAW_FOR_CORPORATE
     *
     * @return self
     */
    public function setFundType($fund_type)
    {
        if (is_null($fund_type)) {
            throw new \InvalidArgumentException('non-nullable fund_type cannot be null');
        }
        if ((mb_strlen($fund_type) > 64)) {
            throw new \InvalidArgumentException('invalid length for $fund_type when calling TransferToBankRequestAdditionalInfo., must be smaller than or equal to 64.');
        }

        $this->container['fund_type'] = $fund_type;

        return $this;
    }

    /**
     * Gets external_division_id
     *
     * @return string|null
     */
    public function getExternalDivisionId()
    {
        return $this->container['external_division_id'];
    }

    /**
     * Sets external_division_id
     *
     * @param string|null $external_division_id Additional information of external division identifier. (fundType: MERCHANT_WITHDRAW_FOR_CORPORATE)<br> Notes: The required of this parameter is Optional, but if \"additionalInfo.chargeTarget\" has value DIVISION then the required of this parameter will be changed to Mandatory
     *
     * @return self
     */
    public function setExternalDivisionId($external_division_id)
    {
        if (is_null($external_division_id)) {
            throw new \InvalidArgumentException('non-nullable external_division_id cannot be null');
        }
        if ((mb_strlen($external_division_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $external_division_id when calling TransferToBankRequestAdditionalInfo., must be smaller than or equal to 64.');
        }

        $this->container['external_division_id'] = $external_division_id;

        return $this;
    }

    /**
     * Gets charge_target
     *
     * @return string|null
     */
    public function getChargeTarget()
    {
        return $this->container['charge_target'];
    }

    /**
     * Sets charge_target
     *
     * @param string|null $charge_target Additional information of charge target. The values are:<br> • null<br> • DIVISION<br> • MERCHANT<br> Notes: If the value is DIVISION, externalDivisionId will be Mandatory
     *
     * @return self
     */
    public function setChargeTarget($charge_target)
    {
        if (is_null($charge_target)) {
            throw new \InvalidArgumentException('non-nullable charge_target cannot be null');
        }
        $allowedValues = $this->getChargeTargetAllowableValues();
        if (!in_array($charge_target, $allowedValues, true) && !empty($charge_target)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'charge_target', must be one of '%s'",
                    $charge_target,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($charge_target) > 64)) {
            throw new \InvalidArgumentException('invalid length for $charge_target when calling TransferToBankRequestAdditionalInfo., must be smaller than or equal to 64.');
        }

        $this->container['charge_target'] = $charge_target;

        return $this;
    }

    /**
     * Gets need_notify
     *
     * @return bool|null
     */
    public function getNeedNotify()
    {
        return $this->container['need_notify'];
    }

    /**
     * Sets need_notify
     *
     * @param bool|null $need_notify Additional information of flag result notification on transaction completed (result sync/async)
     *
     * @return self
     */
    public function setNeedNotify($need_notify)
    {
        if (is_null($need_notify)) {
            throw new \InvalidArgumentException('non-nullable need_notify cannot be null');
        }
        $this->container['need_notify'] = $need_notify;

        return $this;
    }

    /**
     * Gets beneficiary_account_name
     *
     * @return string|null
     */
    public function getBeneficiaryAccountName()
    {
        return $this->container['beneficiary_account_name'];
    }

    /**
     * Sets beneficiary_account_name
     *
     * @param string|null $beneficiary_account_name Additional information of beneficiary account name for validation purpose
     *
     * @return self
     */
    public function setBeneficiaryAccountName($beneficiary_account_name)
    {
        if (is_null($beneficiary_account_name)) {
            throw new \InvalidArgumentException('non-nullable beneficiary_account_name cannot be null');
        }
        if ((mb_strlen($beneficiary_account_name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $beneficiary_account_name when calling TransferToBankRequestAdditionalInfo., must be smaller than or equal to 64.');
        }

        $this->container['beneficiary_account_name'] = $beneficiary_account_name;

        return $this;
    }

    /**
     * Gets access_token
     *
     * @return string|null
     */
    public function getAccessToken()
    {
        return $this->container['access_token'];
    }

    /**
     * Sets access_token
     *
     * @param string|null $access_token Contains customer token, which has been obtained from binding process, refer to Account Binding & Unbinding documentation<br> If request is coming from user interaction, this field is mandatory. If not, just filled customerNumber
     *
     * @return self
     */
    public function setAccessToken($access_token)
    {
        if (is_null($access_token)) {
            throw new \InvalidArgumentException('non-nullable access_token cannot be null');
        }
        if ((mb_strlen($access_token) > 512)) {
            throw new \InvalidArgumentException('invalid length for $access_token when calling TransferToBankRequestAdditionalInfo., must be smaller than or equal to 512.');
        }

        $this->container['access_token'] = $access_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


