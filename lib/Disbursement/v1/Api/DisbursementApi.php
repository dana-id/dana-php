<?php
/**
 * DisbursementApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\Disbursement
 * @author   DANA Indonesia
 * @link     https://dashboard.dana.id/
 */

/**
 * Disbursement API
 *
 * API for doing disbursement operations in DANA, including DANA account inquiry, transfer to DANA, and transfer to bank disbursement
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\Disbursement\v1\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Dana\ApiException;
use Dana\Configuration;
use Dana\HeaderSelector;
use Dana\ObjectSerializer;
use Dana\Utils\SnapHeader;

/**
 * DisbursementApi Class Doc Comment
 *
 * @category Class
 * @package  Dana\Disbursement
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DisbursementApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'bankAccountInquiry' => [
            'application/json',
        ],
        'danaAccountInquiry' => [
            'application/json',
        ],
        'transferToBank' => [
            'application/json',
        ],
        'transferToBankInquiryStatus' => [
            'application/json',
        ],
        'transferToDana' => [
            'application/json',
        ],
        'transferToDanaInquiryStatus' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation bankAccountInquiry
     *
     * Transfer to Bank Account Inquiry
     *
     * @param  \Dana\Disbursement\v1\Model\BankAccountInquiryRequest $bankAccountInquiryRequest bankAccountInquiryRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bankAccountInquiry'] to see the possible values for this operation
     *
     * @throws \Dana\Disbursement\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dana\Disbursement\v1\Model\BankAccountInquiryResponse
     */
    public function bankAccountInquiry($bankAccountInquiryRequest, string $contentType = self::contentTypes['bankAccountInquiry'][0])
    {
        list($response) = $this->bankAccountInquiryWithHttpInfo($bankAccountInquiryRequest, $contentType);
        return $response;
    }

    /**
     * Operation bankAccountInquiryWithHttpInfo
     *
     * Transfer to Bank Account Inquiry
     *
     * @param  \Dana\Disbursement\v1\Model\BankAccountInquiryRequest $bankAccountInquiryRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bankAccountInquiry'] to see the possible values for this operation
     *
     * @throws \Dana\Disbursement\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dana\Disbursement\v1\Model\BankAccountInquiryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bankAccountInquiryWithHttpInfo($bankAccountInquiryRequest, string $contentType = self::contentTypes['bankAccountInquiry'][0])
    {
        $request = $this->bankAccountInquiryRequest($bankAccountInquiryRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Dana\Disbursement\v1\Model\BankAccountInquiryResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dana\Disbursement\v1\Model\BankAccountInquiryResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dana\Disbursement\v1\Model\BankAccountInquiryResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Dana\Disbursement\v1\Model\BankAccountInquiryResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dana\Disbursement\v1\Model\BankAccountInquiryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bankAccountInquiryAsync
     *
     * Transfer to Bank Account Inquiry
     *
     * @param  \Dana\Disbursement\v1\Model\BankAccountInquiryRequest $bankAccountInquiryRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bankAccountInquiry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountInquiryAsync($bankAccountInquiryRequest, string $contentType = self::contentTypes['bankAccountInquiry'][0])
    {
        return $this->bankAccountInquiryAsyncWithHttpInfo($bankAccountInquiryRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bankAccountInquiryAsyncWithHttpInfo
     *
     * Transfer to Bank Account Inquiry
     *
     * @param  \Dana\Disbursement\v1\Model\BankAccountInquiryRequest $bankAccountInquiryRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bankAccountInquiry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountInquiryAsyncWithHttpInfo($bankAccountInquiryRequest, string $contentType = self::contentTypes['bankAccountInquiry'][0])
    {
        $returnType = '\Dana\Disbursement\v1\Model\BankAccountInquiryResponse';
        $request = $this->bankAccountInquiryRequest($bankAccountInquiryRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bankAccountInquiry'
     *
     * @param  \Dana\Disbursement\v1\Model\BankAccountInquiryRequest $bankAccountInquiryRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bankAccountInquiry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bankAccountInquiryRequest($bankAccountInquiryRequest, string $contentType = self::contentTypes['bankAccountInquiry'][0])
    {

        // verify the required parameter 'bankAccountInquiryRequest' is set
        if ($bankAccountInquiryRequest === null || (is_array($bankAccountInquiryRequest) && count($bankAccountInquiryRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bankAccountInquiryRequest when calling bankAccountInquiry'
            );
        }


        $resourcePath = '/v1.0/emoney/bank-account-inquiry.htm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($bankAccountInquiryRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($bankAccountInquiryRequest));
            } else {
                $httpBody = $bankAccountInquiryRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // Generate signature and add security headers for DANA API if private key is configured
        $privateKey = $this->config->getApiKeyWithPrefix('PRIVATE_KEY');
        $privateKeyPath = $this->config->getApiKeyWithPrefix('PRIVATE_KEY_PATH');
        $clientKey = $this->config->getApiKeyWithPrefix('X_PARTNER_ID');
        if (isset($bankAccountInquiryRequest)) {
            $resourcePathForSignature = '/v1.0/emoney/bank-account-inquiry.htm';
            if ($bankAccountInquiryRequest !== null) {
                $resourcePathForSignature = str_replace(
                    '{' . 'BankAccountInquiryRequest' . '}',
                    ObjectSerializer::toPathValue($bankAccountInquiryRequest),
                    $resourcePathForSignature
                );
            }

            // Generate security headers using SnapHeader utility
            $bodyJson = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($bankAccountInquiryRequest));
            $snapHeaders = SnapHeader::generateHeaders('POST', $resourcePathForSignature, $bodyJson, $clientKey, $privateKey, $privateKeyPath);
            
            // Add security headers to the request
            foreach ($snapHeaders as $key => $value) {
                $headers[$key] = $value;
            }
        }

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation danaAccountInquiry
     *
     * DANA Account Inquiry
     *
     * @param  \Dana\Disbursement\v1\Model\DanaAccountInquiryRequest $danaAccountInquiryRequest danaAccountInquiryRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['danaAccountInquiry'] to see the possible values for this operation
     *
     * @throws \Dana\Disbursement\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dana\Disbursement\v1\Model\DanaAccountInquiryResponse
     */
    public function danaAccountInquiry($danaAccountInquiryRequest, string $contentType = self::contentTypes['danaAccountInquiry'][0])
    {
        list($response) = $this->danaAccountInquiryWithHttpInfo($danaAccountInquiryRequest, $contentType);
        return $response;
    }

    /**
     * Operation danaAccountInquiryWithHttpInfo
     *
     * DANA Account Inquiry
     *
     * @param  \Dana\Disbursement\v1\Model\DanaAccountInquiryRequest $danaAccountInquiryRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['danaAccountInquiry'] to see the possible values for this operation
     *
     * @throws \Dana\Disbursement\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dana\Disbursement\v1\Model\DanaAccountInquiryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function danaAccountInquiryWithHttpInfo($danaAccountInquiryRequest, string $contentType = self::contentTypes['danaAccountInquiry'][0])
    {
        $request = $this->danaAccountInquiryRequest($danaAccountInquiryRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Dana\Disbursement\v1\Model\DanaAccountInquiryResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dana\Disbursement\v1\Model\DanaAccountInquiryResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dana\Disbursement\v1\Model\DanaAccountInquiryResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Dana\Disbursement\v1\Model\DanaAccountInquiryResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dana\Disbursement\v1\Model\DanaAccountInquiryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation danaAccountInquiryAsync
     *
     * DANA Account Inquiry
     *
     * @param  \Dana\Disbursement\v1\Model\DanaAccountInquiryRequest $danaAccountInquiryRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['danaAccountInquiry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function danaAccountInquiryAsync($danaAccountInquiryRequest, string $contentType = self::contentTypes['danaAccountInquiry'][0])
    {
        return $this->danaAccountInquiryAsyncWithHttpInfo($danaAccountInquiryRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation danaAccountInquiryAsyncWithHttpInfo
     *
     * DANA Account Inquiry
     *
     * @param  \Dana\Disbursement\v1\Model\DanaAccountInquiryRequest $danaAccountInquiryRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['danaAccountInquiry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function danaAccountInquiryAsyncWithHttpInfo($danaAccountInquiryRequest, string $contentType = self::contentTypes['danaAccountInquiry'][0])
    {
        $returnType = '\Dana\Disbursement\v1\Model\DanaAccountInquiryResponse';
        $request = $this->danaAccountInquiryRequest($danaAccountInquiryRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'danaAccountInquiry'
     *
     * @param  \Dana\Disbursement\v1\Model\DanaAccountInquiryRequest $danaAccountInquiryRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['danaAccountInquiry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function danaAccountInquiryRequest($danaAccountInquiryRequest, string $contentType = self::contentTypes['danaAccountInquiry'][0])
    {

        // verify the required parameter 'danaAccountInquiryRequest' is set
        if ($danaAccountInquiryRequest === null || (is_array($danaAccountInquiryRequest) && count($danaAccountInquiryRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $danaAccountInquiryRequest when calling danaAccountInquiry'
            );
        }


        $resourcePath = '/v1.0/emoney/account-inquiry.htm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($danaAccountInquiryRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($danaAccountInquiryRequest));
            } else {
                $httpBody = $danaAccountInquiryRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // Generate signature and add security headers for DANA API if private key is configured
        $privateKey = $this->config->getApiKeyWithPrefix('PRIVATE_KEY');
        $privateKeyPath = $this->config->getApiKeyWithPrefix('PRIVATE_KEY_PATH');
        $clientKey = $this->config->getApiKeyWithPrefix('X_PARTNER_ID');
        if (isset($danaAccountInquiryRequest)) {
            $resourcePathForSignature = '/v1.0/emoney/account-inquiry.htm';
            if ($danaAccountInquiryRequest !== null) {
                $resourcePathForSignature = str_replace(
                    '{' . 'DanaAccountInquiryRequest' . '}',
                    ObjectSerializer::toPathValue($danaAccountInquiryRequest),
                    $resourcePathForSignature
                );
            }

            // Generate security headers using SnapHeader utility
            $bodyJson = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($danaAccountInquiryRequest));
            $snapHeaders = SnapHeader::generateHeaders('POST', $resourcePathForSignature, $bodyJson, $clientKey, $privateKey, $privateKeyPath);
            
            // Add security headers to the request
            foreach ($snapHeaders as $key => $value) {
                $headers[$key] = $value;
            }
        }

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transferToBank
     *
     * Transfer to Bank
     *
     * @param  \Dana\Disbursement\v1\Model\TransferToBankRequest $transferToBankRequest transferToBankRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferToBank'] to see the possible values for this operation
     *
     * @throws \Dana\Disbursement\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dana\Disbursement\v1\Model\TransferToBankResponse|\Dana\Disbursement\v1\Model\TransferToBankResponse
     */
    public function transferToBank($transferToBankRequest, string $contentType = self::contentTypes['transferToBank'][0])
    {
        list($response) = $this->transferToBankWithHttpInfo($transferToBankRequest, $contentType);
        return $response;
    }

    /**
     * Operation transferToBankWithHttpInfo
     *
     * Transfer to Bank
     *
     * @param  \Dana\Disbursement\v1\Model\TransferToBankRequest $transferToBankRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferToBank'] to see the possible values for this operation
     *
     * @throws \Dana\Disbursement\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dana\Disbursement\v1\Model\TransferToBankResponse|\Dana\Disbursement\v1\Model\TransferToBankResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function transferToBankWithHttpInfo($transferToBankRequest, string $contentType = self::contentTypes['transferToBank'][0])
    {
        $request = $this->transferToBankRequest($transferToBankRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Dana\Disbursement\v1\Model\TransferToBankResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dana\Disbursement\v1\Model\TransferToBankResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dana\Disbursement\v1\Model\TransferToBankResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\Dana\Disbursement\v1\Model\TransferToBankResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dana\Disbursement\v1\Model\TransferToBankResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dana\Disbursement\v1\Model\TransferToBankResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Dana\Disbursement\v1\Model\TransferToBankResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dana\Disbursement\v1\Model\TransferToBankResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dana\Disbursement\v1\Model\TransferToBankResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transferToBankAsync
     *
     * Transfer to Bank
     *
     * @param  \Dana\Disbursement\v1\Model\TransferToBankRequest $transferToBankRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferToBank'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transferToBankAsync($transferToBankRequest, string $contentType = self::contentTypes['transferToBank'][0])
    {
        return $this->transferToBankAsyncWithHttpInfo($transferToBankRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transferToBankAsyncWithHttpInfo
     *
     * Transfer to Bank
     *
     * @param  \Dana\Disbursement\v1\Model\TransferToBankRequest $transferToBankRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferToBank'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transferToBankAsyncWithHttpInfo($transferToBankRequest, string $contentType = self::contentTypes['transferToBank'][0])
    {
        $returnType = '\Dana\Disbursement\v1\Model\TransferToBankResponse';
        $request = $this->transferToBankRequest($transferToBankRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transferToBank'
     *
     * @param  \Dana\Disbursement\v1\Model\TransferToBankRequest $transferToBankRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferToBank'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transferToBankRequest($transferToBankRequest, string $contentType = self::contentTypes['transferToBank'][0])
    {

        // verify the required parameter 'transferToBankRequest' is set
        if ($transferToBankRequest === null || (is_array($transferToBankRequest) && count($transferToBankRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transferToBankRequest when calling transferToBank'
            );
        }


        $resourcePath = '/v1.0/emoney/transfer-bank.htm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($transferToBankRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($transferToBankRequest));
            } else {
                $httpBody = $transferToBankRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // Generate signature and add security headers for DANA API if private key is configured
        $privateKey = $this->config->getApiKeyWithPrefix('PRIVATE_KEY');
        $privateKeyPath = $this->config->getApiKeyWithPrefix('PRIVATE_KEY_PATH');
        $clientKey = $this->config->getApiKeyWithPrefix('X_PARTNER_ID');
        if (isset($transferToBankRequest)) {
            $resourcePathForSignature = '/v1.0/emoney/transfer-bank.htm';
            if ($transferToBankRequest !== null) {
                $resourcePathForSignature = str_replace(
                    '{' . 'TransferToBankRequest' . '}',
                    ObjectSerializer::toPathValue($transferToBankRequest),
                    $resourcePathForSignature
                );
            }

            // Generate security headers using SnapHeader utility
            $bodyJson = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($transferToBankRequest));
            $snapHeaders = SnapHeader::generateHeaders('POST', $resourcePathForSignature, $bodyJson, $clientKey, $privateKey, $privateKeyPath);
            
            // Add security headers to the request
            foreach ($snapHeaders as $key => $value) {
                $headers[$key] = $value;
            }
        }

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transferToBankInquiryStatus
     *
     * Transfer to Bank Inquiry Status
     *
     * @param  \Dana\Disbursement\v1\Model\TransferToBankInquiryStatusRequest $transferToBankInquiryStatusRequest transferToBankInquiryStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferToBankInquiryStatus'] to see the possible values for this operation
     *
     * @throws \Dana\Disbursement\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dana\Disbursement\v1\Model\TransferToBankInquiryStatusResponse
     */
    public function transferToBankInquiryStatus($transferToBankInquiryStatusRequest, string $contentType = self::contentTypes['transferToBankInquiryStatus'][0])
    {
        list($response) = $this->transferToBankInquiryStatusWithHttpInfo($transferToBankInquiryStatusRequest, $contentType);
        return $response;
    }

    /**
     * Operation transferToBankInquiryStatusWithHttpInfo
     *
     * Transfer to Bank Inquiry Status
     *
     * @param  \Dana\Disbursement\v1\Model\TransferToBankInquiryStatusRequest $transferToBankInquiryStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferToBankInquiryStatus'] to see the possible values for this operation
     *
     * @throws \Dana\Disbursement\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dana\Disbursement\v1\Model\TransferToBankInquiryStatusResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function transferToBankInquiryStatusWithHttpInfo($transferToBankInquiryStatusRequest, string $contentType = self::contentTypes['transferToBankInquiryStatus'][0])
    {
        $request = $this->transferToBankInquiryStatusRequest($transferToBankInquiryStatusRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Dana\Disbursement\v1\Model\TransferToBankInquiryStatusResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dana\Disbursement\v1\Model\TransferToBankInquiryStatusResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dana\Disbursement\v1\Model\TransferToBankInquiryStatusResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Dana\Disbursement\v1\Model\TransferToBankInquiryStatusResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dana\Disbursement\v1\Model\TransferToBankInquiryStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transferToBankInquiryStatusAsync
     *
     * Transfer to Bank Inquiry Status
     *
     * @param  \Dana\Disbursement\v1\Model\TransferToBankInquiryStatusRequest $transferToBankInquiryStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferToBankInquiryStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transferToBankInquiryStatusAsync($transferToBankInquiryStatusRequest, string $contentType = self::contentTypes['transferToBankInquiryStatus'][0])
    {
        return $this->transferToBankInquiryStatusAsyncWithHttpInfo($transferToBankInquiryStatusRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transferToBankInquiryStatusAsyncWithHttpInfo
     *
     * Transfer to Bank Inquiry Status
     *
     * @param  \Dana\Disbursement\v1\Model\TransferToBankInquiryStatusRequest $transferToBankInquiryStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferToBankInquiryStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transferToBankInquiryStatusAsyncWithHttpInfo($transferToBankInquiryStatusRequest, string $contentType = self::contentTypes['transferToBankInquiryStatus'][0])
    {
        $returnType = '\Dana\Disbursement\v1\Model\TransferToBankInquiryStatusResponse';
        $request = $this->transferToBankInquiryStatusRequest($transferToBankInquiryStatusRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transferToBankInquiryStatus'
     *
     * @param  \Dana\Disbursement\v1\Model\TransferToBankInquiryStatusRequest $transferToBankInquiryStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferToBankInquiryStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transferToBankInquiryStatusRequest($transferToBankInquiryStatusRequest, string $contentType = self::contentTypes['transferToBankInquiryStatus'][0])
    {

        // verify the required parameter 'transferToBankInquiryStatusRequest' is set
        if ($transferToBankInquiryStatusRequest === null || (is_array($transferToBankInquiryStatusRequest) && count($transferToBankInquiryStatusRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transferToBankInquiryStatusRequest when calling transferToBankInquiryStatus'
            );
        }


        $resourcePath = '/v1.0/emoney/transfer-bank-status.htm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($transferToBankInquiryStatusRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($transferToBankInquiryStatusRequest));
            } else {
                $httpBody = $transferToBankInquiryStatusRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // Generate signature and add security headers for DANA API if private key is configured
        $privateKey = $this->config->getApiKeyWithPrefix('PRIVATE_KEY');
        $privateKeyPath = $this->config->getApiKeyWithPrefix('PRIVATE_KEY_PATH');
        $clientKey = $this->config->getApiKeyWithPrefix('X_PARTNER_ID');
        if (isset($transferToBankInquiryStatusRequest)) {
            $resourcePathForSignature = '/v1.0/emoney/transfer-bank-status.htm';
            if ($transferToBankInquiryStatusRequest !== null) {
                $resourcePathForSignature = str_replace(
                    '{' . 'TransferToBankInquiryStatusRequest' . '}',
                    ObjectSerializer::toPathValue($transferToBankInquiryStatusRequest),
                    $resourcePathForSignature
                );
            }

            // Generate security headers using SnapHeader utility
            $bodyJson = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($transferToBankInquiryStatusRequest));
            $snapHeaders = SnapHeader::generateHeaders('POST', $resourcePathForSignature, $bodyJson, $clientKey, $privateKey, $privateKeyPath);
            
            // Add security headers to the request
            foreach ($snapHeaders as $key => $value) {
                $headers[$key] = $value;
            }
        }

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transferToDana
     *
     * Transfer to DANA
     *
     * @param  \Dana\Disbursement\v1\Model\TransferToDanaRequest $transferToDanaRequest transferToDanaRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferToDana'] to see the possible values for this operation
     *
     * @throws \Dana\Disbursement\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dana\Disbursement\v1\Model\TransferToDanaResponse
     */
    public function transferToDana($transferToDanaRequest, string $contentType = self::contentTypes['transferToDana'][0])
    {
        list($response) = $this->transferToDanaWithHttpInfo($transferToDanaRequest, $contentType);
        return $response;
    }

    /**
     * Operation transferToDanaWithHttpInfo
     *
     * Transfer to DANA
     *
     * @param  \Dana\Disbursement\v1\Model\TransferToDanaRequest $transferToDanaRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferToDana'] to see the possible values for this operation
     *
     * @throws \Dana\Disbursement\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dana\Disbursement\v1\Model\TransferToDanaResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function transferToDanaWithHttpInfo($transferToDanaRequest, string $contentType = self::contentTypes['transferToDana'][0])
    {
        $request = $this->transferToDanaRequest($transferToDanaRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Dana\Disbursement\v1\Model\TransferToDanaResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dana\Disbursement\v1\Model\TransferToDanaResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dana\Disbursement\v1\Model\TransferToDanaResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Dana\Disbursement\v1\Model\TransferToDanaResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dana\Disbursement\v1\Model\TransferToDanaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transferToDanaAsync
     *
     * Transfer to DANA
     *
     * @param  \Dana\Disbursement\v1\Model\TransferToDanaRequest $transferToDanaRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferToDana'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transferToDanaAsync($transferToDanaRequest, string $contentType = self::contentTypes['transferToDana'][0])
    {
        return $this->transferToDanaAsyncWithHttpInfo($transferToDanaRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transferToDanaAsyncWithHttpInfo
     *
     * Transfer to DANA
     *
     * @param  \Dana\Disbursement\v1\Model\TransferToDanaRequest $transferToDanaRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferToDana'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transferToDanaAsyncWithHttpInfo($transferToDanaRequest, string $contentType = self::contentTypes['transferToDana'][0])
    {
        $returnType = '\Dana\Disbursement\v1\Model\TransferToDanaResponse';
        $request = $this->transferToDanaRequest($transferToDanaRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transferToDana'
     *
     * @param  \Dana\Disbursement\v1\Model\TransferToDanaRequest $transferToDanaRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferToDana'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transferToDanaRequest($transferToDanaRequest, string $contentType = self::contentTypes['transferToDana'][0])
    {

        // verify the required parameter 'transferToDanaRequest' is set
        if ($transferToDanaRequest === null || (is_array($transferToDanaRequest) && count($transferToDanaRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transferToDanaRequest when calling transferToDana'
            );
        }


        $resourcePath = '/v1.0/emoney/topup.htm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($transferToDanaRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($transferToDanaRequest));
            } else {
                $httpBody = $transferToDanaRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // Generate signature and add security headers for DANA API if private key is configured
        $privateKey = $this->config->getApiKeyWithPrefix('PRIVATE_KEY');
        $privateKeyPath = $this->config->getApiKeyWithPrefix('PRIVATE_KEY_PATH');
        $clientKey = $this->config->getApiKeyWithPrefix('X_PARTNER_ID');
        if (isset($transferToDanaRequest)) {
            $resourcePathForSignature = '/v1.0/emoney/topup.htm';
            if ($transferToDanaRequest !== null) {
                $resourcePathForSignature = str_replace(
                    '{' . 'TransferToDanaRequest' . '}',
                    ObjectSerializer::toPathValue($transferToDanaRequest),
                    $resourcePathForSignature
                );
            }

            // Generate security headers using SnapHeader utility
            $bodyJson = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($transferToDanaRequest));
            $snapHeaders = SnapHeader::generateHeaders('POST', $resourcePathForSignature, $bodyJson, $clientKey, $privateKey, $privateKeyPath);
            
            // Add security headers to the request
            foreach ($snapHeaders as $key => $value) {
                $headers[$key] = $value;
            }
        }

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transferToDanaInquiryStatus
     *
     * Transfer to DANA Inquiry Status
     *
     * @param  \Dana\Disbursement\v1\Model\TransferToDanaInquiryStatusRequest $transferToDanaInquiryStatusRequest transferToDanaInquiryStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferToDanaInquiryStatus'] to see the possible values for this operation
     *
     * @throws \Dana\Disbursement\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dana\Disbursement\v1\Model\TransferToDanaInquiryStatusResponse
     */
    public function transferToDanaInquiryStatus($transferToDanaInquiryStatusRequest, string $contentType = self::contentTypes['transferToDanaInquiryStatus'][0])
    {
        list($response) = $this->transferToDanaInquiryStatusWithHttpInfo($transferToDanaInquiryStatusRequest, $contentType);
        return $response;
    }

    /**
     * Operation transferToDanaInquiryStatusWithHttpInfo
     *
     * Transfer to DANA Inquiry Status
     *
     * @param  \Dana\Disbursement\v1\Model\TransferToDanaInquiryStatusRequest $transferToDanaInquiryStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferToDanaInquiryStatus'] to see the possible values for this operation
     *
     * @throws \Dana\Disbursement\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dana\Disbursement\v1\Model\TransferToDanaInquiryStatusResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function transferToDanaInquiryStatusWithHttpInfo($transferToDanaInquiryStatusRequest, string $contentType = self::contentTypes['transferToDanaInquiryStatus'][0])
    {
        $request = $this->transferToDanaInquiryStatusRequest($transferToDanaInquiryStatusRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Dana\Disbursement\v1\Model\TransferToDanaInquiryStatusResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dana\Disbursement\v1\Model\TransferToDanaInquiryStatusResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dana\Disbursement\v1\Model\TransferToDanaInquiryStatusResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Dana\Disbursement\v1\Model\TransferToDanaInquiryStatusResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dana\Disbursement\v1\Model\TransferToDanaInquiryStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transferToDanaInquiryStatusAsync
     *
     * Transfer to DANA Inquiry Status
     *
     * @param  \Dana\Disbursement\v1\Model\TransferToDanaInquiryStatusRequest $transferToDanaInquiryStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferToDanaInquiryStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transferToDanaInquiryStatusAsync($transferToDanaInquiryStatusRequest, string $contentType = self::contentTypes['transferToDanaInquiryStatus'][0])
    {
        return $this->transferToDanaInquiryStatusAsyncWithHttpInfo($transferToDanaInquiryStatusRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transferToDanaInquiryStatusAsyncWithHttpInfo
     *
     * Transfer to DANA Inquiry Status
     *
     * @param  \Dana\Disbursement\v1\Model\TransferToDanaInquiryStatusRequest $transferToDanaInquiryStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferToDanaInquiryStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transferToDanaInquiryStatusAsyncWithHttpInfo($transferToDanaInquiryStatusRequest, string $contentType = self::contentTypes['transferToDanaInquiryStatus'][0])
    {
        $returnType = '\Dana\Disbursement\v1\Model\TransferToDanaInquiryStatusResponse';
        $request = $this->transferToDanaInquiryStatusRequest($transferToDanaInquiryStatusRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transferToDanaInquiryStatus'
     *
     * @param  \Dana\Disbursement\v1\Model\TransferToDanaInquiryStatusRequest $transferToDanaInquiryStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferToDanaInquiryStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transferToDanaInquiryStatusRequest($transferToDanaInquiryStatusRequest, string $contentType = self::contentTypes['transferToDanaInquiryStatus'][0])
    {

        // verify the required parameter 'transferToDanaInquiryStatusRequest' is set
        if ($transferToDanaInquiryStatusRequest === null || (is_array($transferToDanaInquiryStatusRequest) && count($transferToDanaInquiryStatusRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transferToDanaInquiryStatusRequest when calling transferToDanaInquiryStatus'
            );
        }


        $resourcePath = '/v1.0/emoney/topup-status.htm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($transferToDanaInquiryStatusRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($transferToDanaInquiryStatusRequest));
            } else {
                $httpBody = $transferToDanaInquiryStatusRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // Generate signature and add security headers for DANA API if private key is configured
        $privateKey = $this->config->getApiKeyWithPrefix('PRIVATE_KEY');
        $privateKeyPath = $this->config->getApiKeyWithPrefix('PRIVATE_KEY_PATH');
        $clientKey = $this->config->getApiKeyWithPrefix('X_PARTNER_ID');
        if (isset($transferToDanaInquiryStatusRequest)) {
            $resourcePathForSignature = '/v1.0/emoney/topup-status.htm';
            if ($transferToDanaInquiryStatusRequest !== null) {
                $resourcePathForSignature = str_replace(
                    '{' . 'TransferToDanaInquiryStatusRequest' . '}',
                    ObjectSerializer::toPathValue($transferToDanaInquiryStatusRequest),
                    $resourcePathForSignature
                );
            }

            // Generate security headers using SnapHeader utility
            $bodyJson = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($transferToDanaInquiryStatusRequest));
            $snapHeaders = SnapHeader::generateHeaders('POST', $resourcePathForSignature, $bodyJson, $clientKey, $privateKey, $privateKeyPath);
            
            // Add security headers to the request
            foreach ($snapHeaders as $key => $value) {
                $headers[$key] = $value;
            }
        }

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
