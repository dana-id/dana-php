<?php
/**
 * QueryPaymentResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\PaymentGateway
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway API
 *
 * API for doing operations in DANA Payment Gateway (Gapura)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\PaymentGateway\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * QueryPaymentResponse Class Doc Comment
 *
 * @category Class
 * @package  Dana\PaymentGateway
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class QueryPaymentResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'QueryPaymentResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'responseCode' => 'string',
        'responseMessage' => 'string',
        'originalPartnerReferenceNo' => 'string',
        'originalReferenceNo' => 'string',
        'originalExternalId' => 'string',
        'serviceCode' => 'string',
        'latestTransactionStatus' => 'string',
        'transactionStatusDesc' => 'string',
        'originalResponseCode' => 'string',
        'originalResponseMessage' => 'string',
        'sessionId' => 'string',
        'requestID' => 'string',
        'transAmount' => '\Dana\PaymentGateway\v1\Model\Money',
        'amount' => '\Dana\PaymentGateway\v1\Model\Money',
        'feeAmount' => '\Dana\PaymentGateway\v1\Model\Money',
        'paidTime' => 'string',
        'title' => 'string',
        'additionalInfo' => '\Dana\PaymentGateway\v1\Model\QueryPaymentResponseAdditionalInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'responseCode' => null,
        'responseMessage' => null,
        'originalPartnerReferenceNo' => null,
        'originalReferenceNo' => null,
        'originalExternalId' => null,
        'serviceCode' => null,
        'latestTransactionStatus' => null,
        'transactionStatusDesc' => null,
        'originalResponseCode' => null,
        'originalResponseMessage' => null,
        'sessionId' => null,
        'requestID' => null,
        'transAmount' => null,
        'amount' => null,
        'feeAmount' => null,
        'paidTime' => null,
        'title' => null,
        'additionalInfo' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'responseCode' => false,
        'responseMessage' => false,
        'originalPartnerReferenceNo' => false,
        'originalReferenceNo' => false,
        'originalExternalId' => false,
        'serviceCode' => false,
        'latestTransactionStatus' => false,
        'transactionStatusDesc' => false,
        'originalResponseCode' => false,
        'originalResponseMessage' => false,
        'sessionId' => false,
        'requestID' => false,
        'transAmount' => false,
        'amount' => false,
        'feeAmount' => false,
        'paidTime' => false,
        'title' => false,
        'additionalInfo' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'responseCode' => 'responseCode',
        'responseMessage' => 'responseMessage',
        'originalPartnerReferenceNo' => 'originalPartnerReferenceNo',
        'originalReferenceNo' => 'originalReferenceNo',
        'originalExternalId' => 'originalExternalId',
        'serviceCode' => 'serviceCode',
        'latestTransactionStatus' => 'latestTransactionStatus',
        'transactionStatusDesc' => 'transactionStatusDesc',
        'originalResponseCode' => 'originalResponseCode',
        'originalResponseMessage' => 'originalResponseMessage',
        'sessionId' => 'sessionId',
        'requestID' => 'requestID',
        'transAmount' => 'transAmount',
        'amount' => 'amount',
        'feeAmount' => 'feeAmount',
        'paidTime' => 'paidTime',
        'title' => 'title',
        'additionalInfo' => 'additionalInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'responseCode' => 'setResponseCode',
        'responseMessage' => 'setResponseMessage',
        'originalPartnerReferenceNo' => 'setOriginalPartnerReferenceNo',
        'originalReferenceNo' => 'setOriginalReferenceNo',
        'originalExternalId' => 'setOriginalExternalId',
        'serviceCode' => 'setServiceCode',
        'latestTransactionStatus' => 'setLatestTransactionStatus',
        'transactionStatusDesc' => 'setTransactionStatusDesc',
        'originalResponseCode' => 'setOriginalResponseCode',
        'originalResponseMessage' => 'setOriginalResponseMessage',
        'sessionId' => 'setSessionId',
        'requestID' => 'setRequestID',
        'transAmount' => 'setTransAmount',
        'amount' => 'setAmount',
        'feeAmount' => 'setFeeAmount',
        'paidTime' => 'setPaidTime',
        'title' => 'setTitle',
        'additionalInfo' => 'setAdditionalInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'responseCode' => 'getResponseCode',
        'responseMessage' => 'getResponseMessage',
        'originalPartnerReferenceNo' => 'getOriginalPartnerReferenceNo',
        'originalReferenceNo' => 'getOriginalReferenceNo',
        'originalExternalId' => 'getOriginalExternalId',
        'serviceCode' => 'getServiceCode',
        'latestTransactionStatus' => 'getLatestTransactionStatus',
        'transactionStatusDesc' => 'getTransactionStatusDesc',
        'originalResponseCode' => 'getOriginalResponseCode',
        'originalResponseMessage' => 'getOriginalResponseMessage',
        'sessionId' => 'getSessionId',
        'requestID' => 'getRequestID',
        'transAmount' => 'getTransAmount',
        'amount' => 'getAmount',
        'feeAmount' => 'getFeeAmount',
        'paidTime' => 'getPaidTime',
        'title' => 'getTitle',
        'additionalInfo' => 'getAdditionalInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('responseCode', $data ?? [], null);
        $this->setIfExists('responseMessage', $data ?? [], null);
        $this->setIfExists('originalPartnerReferenceNo', $data ?? [], null);
        $this->setIfExists('originalReferenceNo', $data ?? [], null);
        $this->setIfExists('originalExternalId', $data ?? [], null);
        $this->setIfExists('serviceCode', $data ?? [], '54');
        $this->setIfExists('latestTransactionStatus', $data ?? [], null);
        $this->setIfExists('transactionStatusDesc', $data ?? [], null);
        $this->setIfExists('originalResponseCode', $data ?? [], null);
        $this->setIfExists('originalResponseMessage', $data ?? [], null);
        $this->setIfExists('sessionId', $data ?? [], null);
        $this->setIfExists('requestID', $data ?? [], null);
        $this->setIfExists('transAmount', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('feeAmount', $data ?? [], null);
        $this->setIfExists('paidTime', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('additionalInfo', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['responseCode'] === null) {
            $invalidProperties[] = "'responseCode' can't be null";
        }
        if ((mb_strlen($this->container['responseCode']) > 7)) {
            $invalidProperties[] = "invalid value for 'responseCode', the character length must be smaller than or equal to 7.";
        }

        if ($this->container['responseMessage'] === null) {
            $invalidProperties[] = "'responseMessage' can't be null";
        }
        if ((mb_strlen($this->container['responseMessage']) > 150)) {
            $invalidProperties[] = "invalid value for 'responseMessage', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['originalPartnerReferenceNo']) && (mb_strlen($this->container['originalPartnerReferenceNo']) > 64)) {
            $invalidProperties[] = "invalid value for 'originalPartnerReferenceNo', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['originalReferenceNo']) && (mb_strlen($this->container['originalReferenceNo']) > 64)) {
            $invalidProperties[] = "invalid value for 'originalReferenceNo', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['originalExternalId']) && (mb_strlen($this->container['originalExternalId']) > 32)) {
            $invalidProperties[] = "invalid value for 'originalExternalId', the character length must be smaller than or equal to 32.";
        }

        if ($this->container['serviceCode'] === null) {
            $invalidProperties[] = "'serviceCode' can't be null";
        }
        if ((mb_strlen($this->container['serviceCode']) > 2)) {
            $invalidProperties[] = "invalid value for 'serviceCode', the character length must be smaller than or equal to 2.";
        }

        if ($this->container['latestTransactionStatus'] === null) {
            $invalidProperties[] = "'latestTransactionStatus' can't be null";
        }
        if ((mb_strlen($this->container['latestTransactionStatus']) > 2)) {
            $invalidProperties[] = "invalid value for 'latestTransactionStatus', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['transactionStatusDesc']) && (mb_strlen($this->container['transactionStatusDesc']) > 50)) {
            $invalidProperties[] = "invalid value for 'transactionStatusDesc', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['originalResponseCode']) && (mb_strlen($this->container['originalResponseCode']) > 7)) {
            $invalidProperties[] = "invalid value for 'originalResponseCode', the character length must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['originalResponseMessage']) && (mb_strlen($this->container['originalResponseMessage']) > 150)) {
            $invalidProperties[] = "invalid value for 'originalResponseMessage', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['sessionId']) && (mb_strlen($this->container['sessionId']) > 25)) {
            $invalidProperties[] = "invalid value for 'sessionId', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['requestID']) && (mb_strlen($this->container['requestID']) > 25)) {
            $invalidProperties[] = "invalid value for 'requestID', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['paidTime']) && (mb_strlen($this->container['paidTime']) > 25)) {
            $invalidProperties[] = "invalid value for 'paidTime', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['paidTime']) && !preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/", $this->container['paidTime'])) {
            $invalidProperties[] = "invalid value for 'paidTime', must be conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) > 256)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 256.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets responseCode
     *
     * @return string
     */
    public function getResponseCode()
    {
        return $this->container['responseCode'];
    }

    /**
     * Sets responseCode
     *
     * @param string $responseCode Response code. Refer to https://dashboard.dana.id/api-docs/read/126#HTML-API-QueryPayment-ResponseCodeandMessage
     *
     * @return self
     */
    public function setResponseCode($responseCode)
    {
        if (is_null($responseCode)) {
            throw new \InvalidArgumentException('non-nullable responseCode cannot be null');
        }
        if ((mb_strlen($responseCode) > 7)) {
            throw new \InvalidArgumentException('invalid length for $responseCode when calling QueryPaymentResponse., must be smaller than or equal to 7.');
        }

        $this->container['responseCode'] = $responseCode;

        return $this;
    }

    /**
     * Gets responseMessage
     *
     * @return string
     */
    public function getResponseMessage()
    {
        return $this->container['responseMessage'];
    }

    /**
     * Sets responseMessage
     *
     * @param string $responseMessage Response message. Refer to https://dashboard.dana.id/api-docs/read/126#HTML-API-QueryPayment-ResponseCodeandMessage
     *
     * @return self
     */
    public function setResponseMessage($responseMessage)
    {
        if (is_null($responseMessage)) {
            throw new \InvalidArgumentException('non-nullable responseMessage cannot be null');
        }
        if ((mb_strlen($responseMessage) > 150)) {
            throw new \InvalidArgumentException('invalid length for $responseMessage when calling QueryPaymentResponse., must be smaller than or equal to 150.');
        }

        $this->container['responseMessage'] = $responseMessage;

        return $this;
    }

    /**
     * Gets originalPartnerReferenceNo
     *
     * @return string|null
     */
    public function getOriginalPartnerReferenceNo()
    {
        return $this->container['originalPartnerReferenceNo'];
    }

    /**
     * Sets originalPartnerReferenceNo
     *
     * @param string|null $originalPartnerReferenceNo Original transaction identifier on partner system. Present if transaction found
     *
     * @return self
     */
    public function setOriginalPartnerReferenceNo($originalPartnerReferenceNo)
    {
        if (is_null($originalPartnerReferenceNo)) {
            throw new \InvalidArgumentException('non-nullable originalPartnerReferenceNo cannot be null');
        }
        if ((mb_strlen($originalPartnerReferenceNo) > 64)) {
            throw new \InvalidArgumentException('invalid length for $originalPartnerReferenceNo when calling QueryPaymentResponse., must be smaller than or equal to 64.');
        }

        $this->container['originalPartnerReferenceNo'] = $originalPartnerReferenceNo;

        return $this;
    }

    /**
     * Gets originalReferenceNo
     *
     * @return string|null
     */
    public function getOriginalReferenceNo()
    {
        return $this->container['originalReferenceNo'];
    }

    /**
     * Sets originalReferenceNo
     *
     * @param string|null $originalReferenceNo Original transaction identifier on DANA system. Present if transaction found
     *
     * @return self
     */
    public function setOriginalReferenceNo($originalReferenceNo)
    {
        if (is_null($originalReferenceNo)) {
            throw new \InvalidArgumentException('non-nullable originalReferenceNo cannot be null');
        }
        if ((mb_strlen($originalReferenceNo) > 64)) {
            throw new \InvalidArgumentException('invalid length for $originalReferenceNo when calling QueryPaymentResponse., must be smaller than or equal to 64.');
        }

        $this->container['originalReferenceNo'] = $originalReferenceNo;

        return $this;
    }

    /**
     * Gets originalExternalId
     *
     * @return string|null
     */
    public function getOriginalExternalId()
    {
        return $this->container['originalExternalId'];
    }

    /**
     * Sets originalExternalId
     *
     * @param string|null $originalExternalId Original external identifier on header message
     *
     * @return self
     */
    public function setOriginalExternalId($originalExternalId)
    {
        if (is_null($originalExternalId)) {
            throw new \InvalidArgumentException('non-nullable originalExternalId cannot be null');
        }
        if ((mb_strlen($originalExternalId) > 32)) {
            throw new \InvalidArgumentException('invalid length for $originalExternalId when calling QueryPaymentResponse., must be smaller than or equal to 32.');
        }

        $this->container['originalExternalId'] = $originalExternalId;

        return $this;
    }

    /**
     * Gets serviceCode
     *
     * @return string
     */
    public function getServiceCode()
    {
        return $this->container['serviceCode'];
    }

    /**
     * Sets serviceCode
     *
     * @param string $serviceCode Transaction type indicator is based on the service code of the original transaction request:<br> - IPG Cashier Pay - SNAP: 54<br> - QRIS CPM (Acquirer) - SNAP: 60<br> - QRIS MPM (Acquirer) - SNAP: 47<br> - Payment Gateway: 54<br>
     *
     * @return self
     */
    public function setServiceCode($serviceCode)
    {
        if (is_null($serviceCode)) {
            throw new \InvalidArgumentException('non-nullable serviceCode cannot be null');
        }
        if ((mb_strlen($serviceCode) > 2)) {
            throw new \InvalidArgumentException('invalid length for $serviceCode when calling QueryPaymentResponse., must be smaller than or equal to 2.');
        }

        $this->container['serviceCode'] = $serviceCode;

        return $this;
    }

    /**
     * Gets latestTransactionStatus
     *
     * @return string
     */
    public function getLatestTransactionStatus()
    {
        return $this->container['latestTransactionStatus'];
    }

    /**
     * Sets latestTransactionStatus
     *
     * @param string $latestTransactionStatus Category code for the status of the transaction. The values include:<br> - 00 = Success, the order has been successfully in final state and paid<br> - 01 = Initiated, the order has been created, but has not been paid<br> - 02 = Paying, the order is in process, not in final state, payment is success<br> - 05 = Cancelled, the order has been closed<br> - 07 = Not found, the order is not found<br>
     *
     * @return self
     */
    public function setLatestTransactionStatus($latestTransactionStatus)
    {
        if (is_null($latestTransactionStatus)) {
            throw new \InvalidArgumentException('non-nullable latestTransactionStatus cannot be null');
        }
        if ((mb_strlen($latestTransactionStatus) > 2)) {
            throw new \InvalidArgumentException('invalid length for $latestTransactionStatus when calling QueryPaymentResponse., must be smaller than or equal to 2.');
        }

        $this->container['latestTransactionStatus'] = $latestTransactionStatus;

        return $this;
    }

    /**
     * Gets transactionStatusDesc
     *
     * @return string|null
     */
    public function getTransactionStatusDesc()
    {
        return $this->container['transactionStatusDesc'];
    }

    /**
     * Sets transactionStatusDesc
     *
     * @param string|null $transactionStatusDesc Description of transaction status
     *
     * @return self
     */
    public function setTransactionStatusDesc($transactionStatusDesc)
    {
        if (is_null($transactionStatusDesc)) {
            throw new \InvalidArgumentException('non-nullable transactionStatusDesc cannot be null');
        }
        if ((mb_strlen($transactionStatusDesc) > 50)) {
            throw new \InvalidArgumentException('invalid length for $transactionStatusDesc when calling QueryPaymentResponse., must be smaller than or equal to 50.');
        }

        $this->container['transactionStatusDesc'] = $transactionStatusDesc;

        return $this;
    }

    /**
     * Gets originalResponseCode
     *
     * @return string|null
     */
    public function getOriginalResponseCode()
    {
        return $this->container['originalResponseCode'];
    }

    /**
     * Sets originalResponseCode
     *
     * @param string|null $originalResponseCode Original response code
     *
     * @return self
     */
    public function setOriginalResponseCode($originalResponseCode)
    {
        if (is_null($originalResponseCode)) {
            throw new \InvalidArgumentException('non-nullable originalResponseCode cannot be null');
        }
        if ((mb_strlen($originalResponseCode) > 7)) {
            throw new \InvalidArgumentException('invalid length for $originalResponseCode when calling QueryPaymentResponse., must be smaller than or equal to 7.');
        }

        $this->container['originalResponseCode'] = $originalResponseCode;

        return $this;
    }

    /**
     * Gets originalResponseMessage
     *
     * @return string|null
     */
    public function getOriginalResponseMessage()
    {
        return $this->container['originalResponseMessage'];
    }

    /**
     * Sets originalResponseMessage
     *
     * @param string|null $originalResponseMessage Original response message
     *
     * @return self
     */
    public function setOriginalResponseMessage($originalResponseMessage)
    {
        if (is_null($originalResponseMessage)) {
            throw new \InvalidArgumentException('non-nullable originalResponseMessage cannot be null');
        }
        if ((mb_strlen($originalResponseMessage) > 150)) {
            throw new \InvalidArgumentException('invalid length for $originalResponseMessage when calling QueryPaymentResponse., must be smaller than or equal to 150.');
        }

        $this->container['originalResponseMessage'] = $originalResponseMessage;

        return $this;
    }

    /**
     * Gets sessionId
     *
     * @return string|null
     */
    public function getSessionId()
    {
        return $this->container['sessionId'];
    }

    /**
     * Sets sessionId
     *
     * @param string|null $sessionId Session identifier
     *
     * @return self
     */
    public function setSessionId($sessionId)
    {
        if (is_null($sessionId)) {
            throw new \InvalidArgumentException('non-nullable sessionId cannot be null');
        }
        if ((mb_strlen($sessionId) > 25)) {
            throw new \InvalidArgumentException('invalid length for $sessionId when calling QueryPaymentResponse., must be smaller than or equal to 25.');
        }

        $this->container['sessionId'] = $sessionId;

        return $this;
    }

    /**
     * Gets requestID
     *
     * @return string|null
     */
    public function getRequestID()
    {
        return $this->container['requestID'];
    }

    /**
     * Sets requestID
     *
     * @param string|null $requestID Transaction request identifier
     *
     * @return self
     */
    public function setRequestID($requestID)
    {
        if (is_null($requestID)) {
            throw new \InvalidArgumentException('non-nullable requestID cannot be null');
        }
        if ((mb_strlen($requestID) > 25)) {
            throw new \InvalidArgumentException('invalid length for $requestID when calling QueryPaymentResponse., must be smaller than or equal to 25.');
        }

        $this->container['requestID'] = $requestID;

        return $this;
    }

    /**
     * Gets transAmount
     *
     * @return \Dana\PaymentGateway\v1\Model\Money|null
     */
    public function getTransAmount()
    {
        return $this->container['transAmount'];
    }

    /**
     * Sets transAmount
     *
     * @param \Dana\PaymentGateway\v1\Model\Money|null $transAmount Trans amount. Present if transaction found. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br>
     *
     * @return self
     */
    public function setTransAmount($transAmount)
    {
        if (is_null($transAmount)) {
            throw new \InvalidArgumentException('non-nullable transAmount cannot be null');
        }
        $this->container['transAmount'] = $transAmount;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \Dana\PaymentGateway\v1\Model\Money|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \Dana\PaymentGateway\v1\Model\Money|null $amount Amount. Present if transaction found. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br>
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets feeAmount
     *
     * @return \Dana\PaymentGateway\v1\Model\Money|null
     */
    public function getFeeAmount()
    {
        return $this->container['feeAmount'];
    }

    /**
     * Sets feeAmount
     *
     * @param \Dana\PaymentGateway\v1\Model\Money|null $feeAmount Fee amount. Present if transaction found. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br>
     *
     * @return self
     */
    public function setFeeAmount($feeAmount)
    {
        if (is_null($feeAmount)) {
            throw new \InvalidArgumentException('non-nullable feeAmount cannot be null');
        }
        $this->container['feeAmount'] = $feeAmount;

        return $this;
    }

    /**
     * Gets paidTime
     *
     * @return string|null
     */
    public function getPaidTime()
    {
        return $this->container['paidTime'];
    }

    /**
     * Sets paidTime
     *
     * @param string|null $paidTime Transaction paid time, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time). Present if transaction is paid
     *
     * @return self
     */
    public function setPaidTime($paidTime)
    {
        if (is_null($paidTime)) {
            throw new \InvalidArgumentException('non-nullable paidTime cannot be null');
        }
        if ((mb_strlen($paidTime) > 25)) {
            throw new \InvalidArgumentException('invalid length for $paidTime when calling QueryPaymentResponse., must be smaller than or equal to 25.');
        }
        if ((!preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/", ObjectSerializer::toString($paidTime)))) {
            throw new \InvalidArgumentException("invalid value for \$paidTime when calling QueryPaymentResponse., must conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/.");
        }

        $this->container['paidTime'] = $paidTime;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Brief description. Present if transaction found
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        if ((mb_strlen($title) > 256)) {
            throw new \InvalidArgumentException('invalid length for $title when calling QueryPaymentResponse., must be smaller than or equal to 256.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets additionalInfo
     *
     * @return \Dana\PaymentGateway\v1\Model\QueryPaymentResponseAdditionalInfo|null
     */
    public function getAdditionalInfo()
    {
        return $this->container['additionalInfo'];
    }

    /**
     * Sets additionalInfo
     *
     * @param \Dana\PaymentGateway\v1\Model\QueryPaymentResponseAdditionalInfo|null $additionalInfo Additional information
     *
     * @return self
     */
    public function setAdditionalInfo($additionalInfo)
    {
        if (is_null($additionalInfo)) {
            throw new \InvalidArgumentException('non-nullable additionalInfo cannot be null');
        }
        $this->container['additionalInfo'] = $additionalInfo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


