<?php
/**
 * CancelOrderResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\PaymentGateway
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway API
 *
 * API for doing operations in DANA Payment Gateway (Gapura)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\PaymentGateway\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * CancelOrderResponse Class Doc Comment
 *
 * @category Class
 * @package  Dana\PaymentGateway
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CancelOrderResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CancelOrderResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'response_code' => 'string',
        'response_message' => 'string',
        'original_reference_no' => 'string',
        'original_partner_reference_no' => 'string',
        'original_external_id' => 'string',
        'cancel_time' => 'string',
        'transaction_date' => 'string',
        'additional_info' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'response_code' => null,
        'response_message' => null,
        'original_reference_no' => null,
        'original_partner_reference_no' => null,
        'original_external_id' => null,
        'cancel_time' => null,
        'transaction_date' => null,
        'additional_info' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'response_code' => false,
        'response_message' => false,
        'original_reference_no' => false,
        'original_partner_reference_no' => false,
        'original_external_id' => false,
        'cancel_time' => false,
        'transaction_date' => false,
        'additional_info' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'response_code' => 'responseCode',
        'response_message' => 'responseMessage',
        'original_reference_no' => 'originalReferenceNo',
        'original_partner_reference_no' => 'originalPartnerReferenceNo',
        'original_external_id' => 'originalExternalId',
        'cancel_time' => 'cancelTime',
        'transaction_date' => 'transactionDate',
        'additional_info' => 'additionalInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'response_code' => 'setResponseCode',
        'response_message' => 'setResponseMessage',
        'original_reference_no' => 'setOriginalReferenceNo',
        'original_partner_reference_no' => 'setOriginalPartnerReferenceNo',
        'original_external_id' => 'setOriginalExternalId',
        'cancel_time' => 'setCancelTime',
        'transaction_date' => 'setTransactionDate',
        'additional_info' => 'setAdditionalInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'response_code' => 'getResponseCode',
        'response_message' => 'getResponseMessage',
        'original_reference_no' => 'getOriginalReferenceNo',
        'original_partner_reference_no' => 'getOriginalPartnerReferenceNo',
        'original_external_id' => 'getOriginalExternalId',
        'cancel_time' => 'getCancelTime',
        'transaction_date' => 'getTransactionDate',
        'additional_info' => 'getAdditionalInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('response_code', $data ?? [], null);
        $this->setIfExists('response_message', $data ?? [], null);
        $this->setIfExists('original_reference_no', $data ?? [], null);
        $this->setIfExists('original_partner_reference_no', $data ?? [], null);
        $this->setIfExists('original_external_id', $data ?? [], null);
        $this->setIfExists('cancel_time', $data ?? [], null);
        $this->setIfExists('transaction_date', $data ?? [], null);
        $this->setIfExists('additional_info', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['response_code'] === null) {
            $invalidProperties[] = "'response_code' can't be null";
        }
        if ((mb_strlen($this->container['response_code']) > 7)) {
            $invalidProperties[] = "invalid value for 'response_code', the character length must be smaller than or equal to 7.";
        }

        if ($this->container['response_message'] === null) {
            $invalidProperties[] = "'response_message' can't be null";
        }
        if ((mb_strlen($this->container['response_message']) > 150)) {
            $invalidProperties[] = "invalid value for 'response_message', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['original_reference_no']) && (mb_strlen($this->container['original_reference_no']) > 64)) {
            $invalidProperties[] = "invalid value for 'original_reference_no', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['original_partner_reference_no'] === null) {
            $invalidProperties[] = "'original_partner_reference_no' can't be null";
        }
        if ((mb_strlen($this->container['original_partner_reference_no']) > 64)) {
            $invalidProperties[] = "invalid value for 'original_partner_reference_no', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['original_external_id']) && (mb_strlen($this->container['original_external_id']) > 36)) {
            $invalidProperties[] = "invalid value for 'original_external_id', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['cancel_time']) && (mb_strlen($this->container['cancel_time']) > 25)) {
            $invalidProperties[] = "invalid value for 'cancel_time', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['cancel_time']) && !preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/", $this->container['cancel_time'])) {
            $invalidProperties[] = "invalid value for 'cancel_time', must be conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/.";
        }

        if (!is_null($this->container['transaction_date']) && (mb_strlen($this->container['transaction_date']) > 25)) {
            $invalidProperties[] = "invalid value for 'transaction_date', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['transaction_date']) && !preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/", $this->container['transaction_date'])) {
            $invalidProperties[] = "invalid value for 'transaction_date', must be conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets response_code
     *
     * @return string
     */
    public function getResponseCode()
    {
        return $this->container['response_code'];
    }

    /**
     * Sets response_code
     *
     * @param string $response_code Response code. Refer to https://dashboard.dana.id/api-docs/read/117#HTML-API-CancelOrder-ResponseCodeandMessage
     *
     * @return self
     */
    public function setResponseCode($response_code)
    {
        if (is_null($response_code)) {
            throw new \InvalidArgumentException('non-nullable response_code cannot be null');
        }
        if ((mb_strlen($response_code) > 7)) {
            throw new \InvalidArgumentException('invalid length for $response_code when calling CancelOrderResponse., must be smaller than or equal to 7.');
        }

        $this->container['response_code'] = $response_code;

        return $this;
    }

    /**
     * Gets response_message
     *
     * @return string
     */
    public function getResponseMessage()
    {
        return $this->container['response_message'];
    }

    /**
     * Sets response_message
     *
     * @param string $response_message Response message. Refer to https://dashboard.dana.id/api-docs/read/117#HTML-API-CancelOrder-ResponseCodeandMessage
     *
     * @return self
     */
    public function setResponseMessage($response_message)
    {
        if (is_null($response_message)) {
            throw new \InvalidArgumentException('non-nullable response_message cannot be null');
        }
        if ((mb_strlen($response_message) > 150)) {
            throw new \InvalidArgumentException('invalid length for $response_message when calling CancelOrderResponse., must be smaller than or equal to 150.');
        }

        $this->container['response_message'] = $response_message;

        return $this;
    }

    /**
     * Gets original_reference_no
     *
     * @return string|null
     */
    public function getOriginalReferenceNo()
    {
        return $this->container['original_reference_no'];
    }

    /**
     * Sets original_reference_no
     *
     * @param string|null $original_reference_no Original transaction identifier on DANA system. Present if successfully processed
     *
     * @return self
     */
    public function setOriginalReferenceNo($original_reference_no)
    {
        if (is_null($original_reference_no)) {
            throw new \InvalidArgumentException('non-nullable original_reference_no cannot be null');
        }
        if ((mb_strlen($original_reference_no) > 64)) {
            throw new \InvalidArgumentException('invalid length for $original_reference_no when calling CancelOrderResponse., must be smaller than or equal to 64.');
        }

        $this->container['original_reference_no'] = $original_reference_no;

        return $this;
    }

    /**
     * Gets original_partner_reference_no
     *
     * @return string
     */
    public function getOriginalPartnerReferenceNo()
    {
        return $this->container['original_partner_reference_no'];
    }

    /**
     * Sets original_partner_reference_no
     *
     * @param string $original_partner_reference_no Original transaction identifier on partner system
     *
     * @return self
     */
    public function setOriginalPartnerReferenceNo($original_partner_reference_no)
    {
        if (is_null($original_partner_reference_no)) {
            throw new \InvalidArgumentException('non-nullable original_partner_reference_no cannot be null');
        }
        if ((mb_strlen($original_partner_reference_no) > 64)) {
            throw new \InvalidArgumentException('invalid length for $original_partner_reference_no when calling CancelOrderResponse., must be smaller than or equal to 64.');
        }

        $this->container['original_partner_reference_no'] = $original_partner_reference_no;

        return $this;
    }

    /**
     * Gets original_external_id
     *
     * @return string|null
     */
    public function getOriginalExternalId()
    {
        return $this->container['original_external_id'];
    }

    /**
     * Sets original_external_id
     *
     * @param string|null $original_external_id Original external identifier on header message
     *
     * @return self
     */
    public function setOriginalExternalId($original_external_id)
    {
        if (is_null($original_external_id)) {
            throw new \InvalidArgumentException('non-nullable original_external_id cannot be null');
        }
        if ((mb_strlen($original_external_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $original_external_id when calling CancelOrderResponse., must be smaller than or equal to 36.');
        }

        $this->container['original_external_id'] = $original_external_id;

        return $this;
    }

    /**
     * Gets cancel_time
     *
     * @return string|null
     */
    public function getCancelTime()
    {
        return $this->container['cancel_time'];
    }

    /**
     * Sets cancel_time
     *
     * @param string|null $cancel_time Cancellation date time, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time). Present if successfully processed
     *
     * @return self
     */
    public function setCancelTime($cancel_time)
    {
        if (is_null($cancel_time)) {
            throw new \InvalidArgumentException('non-nullable cancel_time cannot be null');
        }
        if ((mb_strlen($cancel_time) > 25)) {
            throw new \InvalidArgumentException('invalid length for $cancel_time when calling CancelOrderResponse., must be smaller than or equal to 25.');
        }
        if ((!preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/", ObjectSerializer::toString($cancel_time)))) {
            throw new \InvalidArgumentException("invalid value for \$cancel_time when calling CancelOrderResponse., must conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/.");
        }

        $this->container['cancel_time'] = $cancel_time;

        return $this;
    }

    /**
     * Gets transaction_date
     *
     * @return string|null
     */
    public function getTransactionDate()
    {
        return $this->container['transaction_date'];
    }

    /**
     * Sets transaction_date
     *
     * @param string|null $transaction_date Transaction date, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
     *
     * @return self
     */
    public function setTransactionDate($transaction_date)
    {
        if (is_null($transaction_date)) {
            throw new \InvalidArgumentException('non-nullable transaction_date cannot be null');
        }
        if ((mb_strlen($transaction_date) > 25)) {
            throw new \InvalidArgumentException('invalid length for $transaction_date when calling CancelOrderResponse., must be smaller than or equal to 25.');
        }
        if ((!preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/", ObjectSerializer::toString($transaction_date)))) {
            throw new \InvalidArgumentException("invalid value for \$transaction_date when calling CancelOrderResponse., must conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/.");
        }

        $this->container['transaction_date'] = $transaction_date;

        return $this;
    }

    /**
     * Gets additional_info
     *
     * @return object|null
     */
    public function getAdditionalInfo()
    {
        return $this->container['additional_info'];
    }

    /**
     * Sets additional_info
     *
     * @param object|null $additional_info Additional information
     *
     * @return self
     */
    public function setAdditionalInfo($additional_info)
    {
        if (is_null($additional_info)) {
            throw new \InvalidArgumentException('non-nullable additional_info cannot be null');
        }
        $this->container['additional_info'] = $additional_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


