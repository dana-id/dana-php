<?php
/**
 * TimeDetail
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\PaymentGateway
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway API
 *
 * API for doing operations in DANA Payment Gateway (Gapura)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\PaymentGateway\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * TimeDetail Class Doc Comment
 *
 * @category Class
 * @package  Dana\PaymentGateway
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TimeDetail implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TimeDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'createdTime' => 'string',
        'expiryTime' => 'string',
        'paidTimes' => 'string[]',
        'confirmedTimes' => 'string[]',
        'cancelledTime' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'createdTime' => null,
        'expiryTime' => null,
        'paidTimes' => null,
        'confirmedTimes' => null,
        'cancelledTime' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'createdTime' => false,
        'expiryTime' => false,
        'paidTimes' => false,
        'confirmedTimes' => false,
        'cancelledTime' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'createdTime' => 'createdTime',
        'expiryTime' => 'expiryTime',
        'paidTimes' => 'paidTimes',
        'confirmedTimes' => 'confirmedTimes',
        'cancelledTime' => 'cancelledTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'createdTime' => 'setCreatedTime',
        'expiryTime' => 'setExpiryTime',
        'paidTimes' => 'setPaidTimes',
        'confirmedTimes' => 'setConfirmedTimes',
        'cancelledTime' => 'setCancelledTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'createdTime' => 'getCreatedTime',
        'expiryTime' => 'getExpiryTime',
        'paidTimes' => 'getPaidTimes',
        'confirmedTimes' => 'getConfirmedTimes',
        'cancelledTime' => 'getCancelledTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('createdTime', $data ?? [], null);
        $this->setIfExists('expiryTime', $data ?? [], null);
        $this->setIfExists('paidTimes', $data ?? [], null);
        $this->setIfExists('confirmedTimes', $data ?? [], null);
        $this->setIfExists('cancelledTime', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['createdTime'] === null) {
            $invalidProperties[] = "'createdTime' can't be null";
        }
        if ((mb_strlen($this->container['createdTime']) > 25)) {
            $invalidProperties[] = "invalid value for 'createdTime', the character length must be smaller than or equal to 25.";
        }

        if (!preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/", $this->container['createdTime'])) {
            $invalidProperties[] = "invalid value for 'createdTime', must be conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/.";
        }

        if ($this->container['expiryTime'] === null) {
            $invalidProperties[] = "'expiryTime' can't be null";
        }
        if ((mb_strlen($this->container['expiryTime']) > 25)) {
            $invalidProperties[] = "invalid value for 'expiryTime', the character length must be smaller than or equal to 25.";
        }

        if (!preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/", $this->container['expiryTime'])) {
            $invalidProperties[] = "invalid value for 'expiryTime', must be conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/.";
        }

        if (!is_null($this->container['cancelledTime']) && (mb_strlen($this->container['cancelledTime']) > 25)) {
            $invalidProperties[] = "invalid value for 'cancelledTime', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['cancelledTime']) && !preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/", $this->container['cancelledTime'])) {
            $invalidProperties[] = "invalid value for 'cancelledTime', must be conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets createdTime
     *
     * @return string
     */
    public function getCreatedTime()
    {
        return $this->container['createdTime'];
    }

    /**
     * Sets createdTime
     *
     * @param string $createdTime Time of created order, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
     *
     * @return self
     */
    public function setCreatedTime($createdTime)
    {
        if (is_null($createdTime)) {
            throw new \InvalidArgumentException('non-nullable createdTime cannot be null');
        }
        if ((mb_strlen($createdTime) > 25)) {
            throw new \InvalidArgumentException('invalid length for $createdTime when calling TimeDetail., must be smaller than or equal to 25.');
        }
        if ((!preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/", ObjectSerializer::toString($createdTime)))) {
            throw new \InvalidArgumentException("invalid value for \$createdTime when calling TimeDetail., must conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/.");
        }

        $this->container['createdTime'] = $createdTime;

        return $this;
    }

    /**
     * Gets expiryTime
     *
     * @return string
     */
    public function getExpiryTime()
    {
        return $this->container['expiryTime'];
    }

    /**
     * Sets expiryTime
     *
     * @param string $expiryTime Time of expiry order, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
     *
     * @return self
     */
    public function setExpiryTime($expiryTime)
    {
        if (is_null($expiryTime)) {
            throw new \InvalidArgumentException('non-nullable expiryTime cannot be null');
        }
        if ((mb_strlen($expiryTime) > 25)) {
            throw new \InvalidArgumentException('invalid length for $expiryTime when calling TimeDetail., must be smaller than or equal to 25.');
        }
        if ((!preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/", ObjectSerializer::toString($expiryTime)))) {
            throw new \InvalidArgumentException("invalid value for \$expiryTime when calling TimeDetail., must conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/.");
        }

        $this->container['expiryTime'] = $expiryTime;

        return $this;
    }

    /**
     * Gets paidTimes
     *
     * @return string[]|null
     */
    public function getPaidTimes()
    {
        return $this->container['paidTimes'];
    }

    /**
     * Sets paidTimes
     *
     * @param string[]|null $paidTimes Time of paid order, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
     *
     * @return self
     */
    public function setPaidTimes($paidTimes)
    {
        if (is_null($paidTimes)) {
            throw new \InvalidArgumentException('non-nullable paidTimes cannot be null');
        }
        $this->container['paidTimes'] = $paidTimes;

        return $this;
    }

    /**
     * Gets confirmedTimes
     *
     * @return string[]|null
     */
    public function getConfirmedTimes()
    {
        return $this->container['confirmedTimes'];
    }

    /**
     * Sets confirmedTimes
     *
     * @param string[]|null $confirmedTimes Time of confirmed order, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
     *
     * @return self
     */
    public function setConfirmedTimes($confirmedTimes)
    {
        if (is_null($confirmedTimes)) {
            throw new \InvalidArgumentException('non-nullable confirmedTimes cannot be null');
        }
        $this->container['confirmedTimes'] = $confirmedTimes;

        return $this;
    }

    /**
     * Gets cancelledTime
     *
     * @return string|null
     */
    public function getCancelledTime()
    {
        return $this->container['cancelledTime'];
    }

    /**
     * Sets cancelledTime
     *
     * @param string|null $cancelledTime Time of cancelled order, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
     *
     * @return self
     */
    public function setCancelledTime($cancelledTime)
    {
        if (is_null($cancelledTime)) {
            throw new \InvalidArgumentException('non-nullable cancelledTime cannot be null');
        }
        if ((mb_strlen($cancelledTime) > 25)) {
            throw new \InvalidArgumentException('invalid length for $cancelledTime when calling TimeDetail., must be smaller than or equal to 25.');
        }
        if ((!preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/", ObjectSerializer::toString($cancelledTime)))) {
            throw new \InvalidArgumentException("invalid value for \$cancelledTime when calling TimeDetail., must conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/.");
        }

        $this->container['cancelledTime'] = $cancelledTime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


