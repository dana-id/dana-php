<?php
/**
 * OrderRedirectObject
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\PaymentGateway
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway API
 *
 * API for doing operations in DANA Payment Gateway (Gapura)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\PaymentGateway\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * OrderRedirectObject Class Doc Comment
 *
 * @category Class
 * @package  Dana\PaymentGateway
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderRedirectObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderRedirectObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order_title' => 'string',
        'merchant_trans_type' => 'string',
        'buyer' => '\Dana\PaymentGateway\v1\Model\Buyer',
        'goods' => '\Dana\PaymentGateway\v1\Model\Goods[]',
        'shipping_info' => '\Dana\PaymentGateway\v1\Model\ShippingInfo[]',
        'extend_info' => 'string',
        'created_time' => 'string',
        'order_memo' => 'string',
        'scenario' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'order_title' => null,
        'merchant_trans_type' => null,
        'buyer' => null,
        'goods' => null,
        'shipping_info' => null,
        'extend_info' => null,
        'created_time' => null,
        'order_memo' => null,
        'scenario' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'order_title' => false,
        'merchant_trans_type' => false,
        'buyer' => false,
        'goods' => false,
        'shipping_info' => false,
        'extend_info' => false,
        'created_time' => false,
        'order_memo' => false,
        'scenario' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_title' => 'orderTitle',
        'merchant_trans_type' => 'merchantTransType',
        'buyer' => 'buyer',
        'goods' => 'goods',
        'shipping_info' => 'shippingInfo',
        'extend_info' => 'extendInfo',
        'created_time' => 'createdTime',
        'order_memo' => 'orderMemo',
        'scenario' => 'scenario'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_title' => 'setOrderTitle',
        'merchant_trans_type' => 'setMerchantTransType',
        'buyer' => 'setBuyer',
        'goods' => 'setGoods',
        'shipping_info' => 'setShippingInfo',
        'extend_info' => 'setExtendInfo',
        'created_time' => 'setCreatedTime',
        'order_memo' => 'setOrderMemo',
        'scenario' => 'setScenario'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_title' => 'getOrderTitle',
        'merchant_trans_type' => 'getMerchantTransType',
        'buyer' => 'getBuyer',
        'goods' => 'getGoods',
        'shipping_info' => 'getShippingInfo',
        'extend_info' => 'getExtendInfo',
        'created_time' => 'getCreatedTime',
        'order_memo' => 'getOrderMemo',
        'scenario' => 'getScenario'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SCENARIO_REDIRECT = 'REDIRECT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScenarioAllowableValues()
    {
        return [
            self::SCENARIO_REDIRECT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('order_title', $data ?? [], null);
        $this->setIfExists('merchant_trans_type', $data ?? [], null);
        $this->setIfExists('buyer', $data ?? [], null);
        $this->setIfExists('goods', $data ?? [], null);
        $this->setIfExists('shipping_info', $data ?? [], null);
        $this->setIfExists('extend_info', $data ?? [], null);
        $this->setIfExists('created_time', $data ?? [], null);
        $this->setIfExists('order_memo', $data ?? [], null);
        $this->setIfExists('scenario', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['order_title'] === null) {
            $invalidProperties[] = "'order_title' can't be null";
        }
        if ((mb_strlen($this->container['order_title']) > 64)) {
            $invalidProperties[] = "invalid value for 'order_title', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['merchant_trans_type']) && (mb_strlen($this->container['merchant_trans_type']) > 64)) {
            $invalidProperties[] = "invalid value for 'merchant_trans_type', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['extend_info']) && (mb_strlen($this->container['extend_info']) > 4096)) {
            $invalidProperties[] = "invalid value for 'extend_info', the character length must be smaller than or equal to 4096.";
        }

        $allowedValues = $this->getScenarioAllowableValues();
        if (!is_null($this->container['scenario']) && !in_array($this->container['scenario'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'scenario', must be one of '%s'",
                $this->container['scenario'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['scenario']) && (mb_strlen($this->container['scenario']) > 64)) {
            $invalidProperties[] = "invalid value for 'scenario', the character length must be smaller than or equal to 64.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_title
     *
     * @return string
     */
    public function getOrderTitle()
    {
        return $this->container['order_title'];
    }

    /**
     * Sets order_title
     *
     * @param string $order_title Additional information of order title
     *
     * @return self
     */
    public function setOrderTitle($order_title)
    {
        if (is_null($order_title)) {
            throw new \InvalidArgumentException('non-nullable order_title cannot be null');
        }
        if ((mb_strlen($order_title) > 64)) {
            throw new \InvalidArgumentException('invalid length for $order_title when calling OrderRedirectObject., must be smaller than or equal to 64.');
        }

        $this->container['order_title'] = $order_title;

        return $this;
    }

    /**
     * Gets merchant_trans_type
     *
     * @return string|null
     */
    public function getMerchantTransType()
    {
        return $this->container['merchant_trans_type'];
    }

    /**
     * Sets merchant_trans_type
     *
     * @param string|null $merchant_trans_type Additional information of merchant transaction type
     *
     * @return self
     */
    public function setMerchantTransType($merchant_trans_type)
    {
        if (is_null($merchant_trans_type)) {
            throw new \InvalidArgumentException('non-nullable merchant_trans_type cannot be null');
        }
        if ((mb_strlen($merchant_trans_type) > 64)) {
            throw new \InvalidArgumentException('invalid length for $merchant_trans_type when calling OrderRedirectObject., must be smaller than or equal to 64.');
        }

        $this->container['merchant_trans_type'] = $merchant_trans_type;

        return $this;
    }

    /**
     * Gets buyer
     *
     * @return \Dana\PaymentGateway\v1\Model\Buyer|null
     */
    public function getBuyer()
    {
        return $this->container['buyer'];
    }

    /**
     * Sets buyer
     *
     * @param \Dana\PaymentGateway\v1\Model\Buyer|null $buyer Additional information of buyer
     *
     * @return self
     */
    public function setBuyer($buyer)
    {
        if (is_null($buyer)) {
            throw new \InvalidArgumentException('non-nullable buyer cannot be null');
        }
        $this->container['buyer'] = $buyer;

        return $this;
    }

    /**
     * Gets goods
     *
     * @return \Dana\PaymentGateway\v1\Model\Goods[]|null
     */
    public function getGoods()
    {
        return $this->container['goods'];
    }

    /**
     * Sets goods
     *
     * @param \Dana\PaymentGateway\v1\Model\Goods[]|null $goods Additional information of goods
     *
     * @return self
     */
    public function setGoods($goods)
    {
        if (is_null($goods)) {
            throw new \InvalidArgumentException('non-nullable goods cannot be null');
        }
        $this->container['goods'] = $goods;

        return $this;
    }

    /**
     * Gets shipping_info
     *
     * @return \Dana\PaymentGateway\v1\Model\ShippingInfo[]|null
     */
    public function getShippingInfo()
    {
        return $this->container['shipping_info'];
    }

    /**
     * Sets shipping_info
     *
     * @param \Dana\PaymentGateway\v1\Model\ShippingInfo[]|null $shipping_info Additional information of shipping info
     *
     * @return self
     */
    public function setShippingInfo($shipping_info)
    {
        if (is_null($shipping_info)) {
            throw new \InvalidArgumentException('non-nullable shipping_info cannot be null');
        }
        $this->container['shipping_info'] = $shipping_info;

        return $this;
    }

    /**
     * Gets extend_info
     *
     * @return string|null
     */
    public function getExtendInfo()
    {
        return $this->container['extend_info'];
    }

    /**
     * Sets extend_info
     *
     * @param string|null $extend_info Additional information of extend
     *
     * @return self
     */
    public function setExtendInfo($extend_info)
    {
        if (is_null($extend_info)) {
            throw new \InvalidArgumentException('non-nullable extend_info cannot be null');
        }
        if ((mb_strlen($extend_info) > 4096)) {
            throw new \InvalidArgumentException('invalid length for $extend_info when calling OrderRedirectObject., must be smaller than or equal to 4096.');
        }

        $this->container['extend_info'] = $extend_info;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return string|null
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param string|null $created_time Additional information of created time
     *
     * @return self
     */
    public function setCreatedTime($created_time)
    {
        if (is_null($created_time)) {
            throw new \InvalidArgumentException('non-nullable created_time cannot be null');
        }
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets order_memo
     *
     * @return string|null
     */
    public function getOrderMemo()
    {
        return $this->container['order_memo'];
    }

    /**
     * Sets order_memo
     *
     * @param string|null $order_memo Additional information of order
     *
     * @return self
     */
    public function setOrderMemo($order_memo)
    {
        if (is_null($order_memo)) {
            throw new \InvalidArgumentException('non-nullable order_memo cannot be null');
        }
        $this->container['order_memo'] = $order_memo;

        return $this;
    }

    /**
     * Gets scenario
     *
     * @return string|null
     */
    public function getScenario()
    {
        return $this->container['scenario'];
    }

    /**
     * Sets scenario
     *
     * @param string|null $scenario For Payment Gateway Drop-in scenario, need to fill it as REDIRECT
     *
     * @return self
     */
    public function setScenario($scenario)
    {
        if (is_null($scenario)) {
            throw new \InvalidArgumentException('non-nullable scenario cannot be null');
        }
        $allowedValues = $this->getScenarioAllowableValues();
        if (!in_array($scenario, $allowedValues, true) && (!empty($scenario) || $scenario !== '')) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'scenario', must be one of '%s'",
                    $scenario,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($scenario) > 64)) {
            throw new \InvalidArgumentException('invalid length for $scenario when calling OrderRedirectObject., must be smaller than or equal to 64.');
        }

        $this->container['scenario'] = $scenario;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


