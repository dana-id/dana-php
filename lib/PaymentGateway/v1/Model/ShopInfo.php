<?php
/**
 * ShopInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\PaymentGateway
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway API
 *
 * API for doing operations in DANA Payment Gateway (Gapura)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\PaymentGateway\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * ShopInfo Class Doc Comment
 *
 * @category Class
 * @package  Dana\PaymentGateway
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShopInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShopInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'shop_id' => 'string',
        'external_shop_id' => 'string',
        'operator_id' => 'string',
        'shop_address' => 'string',
        'division_id' => 'string',
        'external_division_id' => 'string',
        'division_type' => 'string',
        'shop_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'shop_id' => null,
        'external_shop_id' => null,
        'operator_id' => null,
        'shop_address' => null,
        'division_id' => null,
        'external_division_id' => null,
        'division_type' => null,
        'shop_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'shop_id' => false,
        'external_shop_id' => false,
        'operator_id' => false,
        'shop_address' => false,
        'division_id' => false,
        'external_division_id' => false,
        'division_type' => false,
        'shop_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shop_id' => 'shopId',
        'external_shop_id' => 'externalShopId',
        'operator_id' => 'operatorId',
        'shop_address' => 'shopAddress',
        'division_id' => 'divisionId',
        'external_division_id' => 'externalDivisionId',
        'division_type' => 'divisionType',
        'shop_name' => 'shopName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shop_id' => 'setShopId',
        'external_shop_id' => 'setExternalShopId',
        'operator_id' => 'setOperatorId',
        'shop_address' => 'setShopAddress',
        'division_id' => 'setDivisionId',
        'external_division_id' => 'setExternalDivisionId',
        'division_type' => 'setDivisionType',
        'shop_name' => 'setShopName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shop_id' => 'getShopId',
        'external_shop_id' => 'getExternalShopId',
        'operator_id' => 'getOperatorId',
        'shop_address' => 'getShopAddress',
        'division_id' => 'getDivisionId',
        'external_division_id' => 'getExternalDivisionId',
        'division_type' => 'getDivisionType',
        'shop_name' => 'getShopName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('shop_id', $data ?? [], null);
        $this->setIfExists('external_shop_id', $data ?? [], null);
        $this->setIfExists('operator_id', $data ?? [], null);
        $this->setIfExists('shop_address', $data ?? [], null);
        $this->setIfExists('division_id', $data ?? [], null);
        $this->setIfExists('external_division_id', $data ?? [], null);
        $this->setIfExists('division_type', $data ?? [], null);
        $this->setIfExists('shop_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['shop_id']) && (mb_strlen($this->container['shop_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'shop_id', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['external_shop_id']) && (mb_strlen($this->container['external_shop_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'external_shop_id', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['operator_id']) && (mb_strlen($this->container['operator_id']) > 32)) {
            $invalidProperties[] = "invalid value for 'operator_id', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['shop_address']) && (mb_strlen($this->container['shop_address']) > 256)) {
            $invalidProperties[] = "invalid value for 'shop_address', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['division_id']) && (mb_strlen($this->container['division_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'division_id', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['external_division_id']) && (mb_strlen($this->container['external_division_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'external_division_id', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['division_type']) && (mb_strlen($this->container['division_type']) > 32)) {
            $invalidProperties[] = "invalid value for 'division_type', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['shop_name']) && (mb_strlen($this->container['shop_name']) > 128)) {
            $invalidProperties[] = "invalid value for 'shop_name', the character length must be smaller than or equal to 128.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shop_id
     *
     * @return string|null
     */
    public function getShopId()
    {
        return $this->container['shop_id'];
    }

    /**
     * Sets shop_id
     *
     * @param string|null $shop_id Information of shop identifier. Required if externalShopId is blank
     *
     * @return self
     */
    public function setShopId($shop_id)
    {
        if (is_null($shop_id)) {
            throw new \InvalidArgumentException('non-nullable shop_id cannot be null');
        }
        if ((mb_strlen($shop_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $shop_id when calling ShopInfo., must be smaller than or equal to 64.');
        }

        $this->container['shop_id'] = $shop_id;

        return $this;
    }

    /**
     * Gets external_shop_id
     *
     * @return string|null
     */
    public function getExternalShopId()
    {
        return $this->container['external_shop_id'];
    }

    /**
     * Sets external_shop_id
     *
     * @param string|null $external_shop_id Information of external shop identifier. Required if shopId is blank
     *
     * @return self
     */
    public function setExternalShopId($external_shop_id)
    {
        if (is_null($external_shop_id)) {
            throw new \InvalidArgumentException('non-nullable external_shop_id cannot be null');
        }
        if ((mb_strlen($external_shop_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $external_shop_id when calling ShopInfo., must be smaller than or equal to 64.');
        }

        $this->container['external_shop_id'] = $external_shop_id;

        return $this;
    }

    /**
     * Gets operator_id
     *
     * @return string|null
     */
    public function getOperatorId()
    {
        return $this->container['operator_id'];
    }

    /**
     * Sets operator_id
     *
     * @param string|null $operator_id Information of operator identifier
     *
     * @return self
     */
    public function setOperatorId($operator_id)
    {
        if (is_null($operator_id)) {
            throw new \InvalidArgumentException('non-nullable operator_id cannot be null');
        }
        if ((mb_strlen($operator_id) > 32)) {
            throw new \InvalidArgumentException('invalid length for $operator_id when calling ShopInfo., must be smaller than or equal to 32.');
        }

        $this->container['operator_id'] = $operator_id;

        return $this;
    }

    /**
     * Gets shop_address
     *
     * @return string|null
     */
    public function getShopAddress()
    {
        return $this->container['shop_address'];
    }

    /**
     * Sets shop_address
     *
     * @param string|null $shop_address Information of shop address
     *
     * @return self
     */
    public function setShopAddress($shop_address)
    {
        if (is_null($shop_address)) {
            throw new \InvalidArgumentException('non-nullable shop_address cannot be null');
        }
        if ((mb_strlen($shop_address) > 256)) {
            throw new \InvalidArgumentException('invalid length for $shop_address when calling ShopInfo., must be smaller than or equal to 256.');
        }

        $this->container['shop_address'] = $shop_address;

        return $this;
    }

    /**
     * Gets division_id
     *
     * @return string|null
     */
    public function getDivisionId()
    {
        return $this->container['division_id'];
    }

    /**
     * Sets division_id
     *
     * @param string|null $division_id Information of division identifier
     *
     * @return self
     */
    public function setDivisionId($division_id)
    {
        if (is_null($division_id)) {
            throw new \InvalidArgumentException('non-nullable division_id cannot be null');
        }
        if ((mb_strlen($division_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $division_id when calling ShopInfo., must be smaller than or equal to 64.');
        }

        $this->container['division_id'] = $division_id;

        return $this;
    }

    /**
     * Gets external_division_id
     *
     * @return string|null
     */
    public function getExternalDivisionId()
    {
        return $this->container['external_division_id'];
    }

    /**
     * Sets external_division_id
     *
     * @param string|null $external_division_id Information of external division identifier
     *
     * @return self
     */
    public function setExternalDivisionId($external_division_id)
    {
        if (is_null($external_division_id)) {
            throw new \InvalidArgumentException('non-nullable external_division_id cannot be null');
        }
        if ((mb_strlen($external_division_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $external_division_id when calling ShopInfo., must be smaller than or equal to 64.');
        }

        $this->container['external_division_id'] = $external_division_id;

        return $this;
    }

    /**
     * Gets division_type
     *
     * @return string|null
     */
    public function getDivisionType()
    {
        return $this->container['division_type'];
    }

    /**
     * Sets division_type
     *
     * @param string|null $division_type Information of division type
     *
     * @return self
     */
    public function setDivisionType($division_type)
    {
        if (is_null($division_type)) {
            throw new \InvalidArgumentException('non-nullable division_type cannot be null');
        }
        if ((mb_strlen($division_type) > 32)) {
            throw new \InvalidArgumentException('invalid length for $division_type when calling ShopInfo., must be smaller than or equal to 32.');
        }

        $this->container['division_type'] = $division_type;

        return $this;
    }

    /**
     * Gets shop_name
     *
     * @return string|null
     */
    public function getShopName()
    {
        return $this->container['shop_name'];
    }

    /**
     * Sets shop_name
     *
     * @param string|null $shop_name Information of shop name
     *
     * @return self
     */
    public function setShopName($shop_name)
    {
        if (is_null($shop_name)) {
            throw new \InvalidArgumentException('non-nullable shop_name cannot be null');
        }
        if ((mb_strlen($shop_name) > 128)) {
            throw new \InvalidArgumentException('invalid length for $shop_name when calling ShopInfo., must be smaller than or equal to 128.');
        }

        $this->container['shop_name'] = $shop_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


