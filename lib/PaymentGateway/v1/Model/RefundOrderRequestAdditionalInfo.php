<?php
/**
 * RefundOrderRequestAdditionalInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\PaymentGateway
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway API
 *
 * API for doing operations in DANA Payment Gateway (Gapura)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\PaymentGateway\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * RefundOrderRequestAdditionalInfo Class Doc Comment
 *
 * @category Class
 * @package  Dana\PaymentGateway
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RefundOrderRequestAdditionalInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RefundOrderRequestAdditionalInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'payoutAccountNo' => 'string',
        'refundAppliedTime' => 'string',
        'actorType' => 'string',
        'returnChargeToPayer' => 'string',
        'destination' => 'string',
        'envInfo' => '\Dana\PaymentGateway\v1\Model\EnvInfo',
        'auditInfo' => '\Dana\PaymentGateway\v1\Model\AuditInfo',
        'actorContext' => '\Dana\PaymentGateway\v1\Model\ActorContext',
        'refundOptionBill' => '\Dana\PaymentGateway\v1\Model\RefundOptionBill[]',
        'extendInfo' => 'string',
        'asyncRefund' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'payoutAccountNo' => null,
        'refundAppliedTime' => null,
        'actorType' => null,
        'returnChargeToPayer' => null,
        'destination' => null,
        'envInfo' => null,
        'auditInfo' => null,
        'actorContext' => null,
        'refundOptionBill' => null,
        'extendInfo' => null,
        'asyncRefund' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'payoutAccountNo' => false,
        'refundAppliedTime' => false,
        'actorType' => false,
        'returnChargeToPayer' => false,
        'destination' => false,
        'envInfo' => false,
        'auditInfo' => false,
        'actorContext' => false,
        'refundOptionBill' => false,
        'extendInfo' => false,
        'asyncRefund' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payoutAccountNo' => 'payoutAccountNo',
        'refundAppliedTime' => 'refundAppliedTime',
        'actorType' => 'actorType',
        'returnChargeToPayer' => 'returnChargeToPayer',
        'destination' => 'destination',
        'envInfo' => 'envInfo',
        'auditInfo' => 'auditInfo',
        'actorContext' => 'actorContext',
        'refundOptionBill' => 'refundOptionBill',
        'extendInfo' => 'extendInfo',
        'asyncRefund' => 'asyncRefund'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payoutAccountNo' => 'setPayoutAccountNo',
        'refundAppliedTime' => 'setRefundAppliedTime',
        'actorType' => 'setActorType',
        'returnChargeToPayer' => 'setReturnChargeToPayer',
        'destination' => 'setDestination',
        'envInfo' => 'setEnvInfo',
        'auditInfo' => 'setAuditInfo',
        'actorContext' => 'setActorContext',
        'refundOptionBill' => 'setRefundOptionBill',
        'extendInfo' => 'setExtendInfo',
        'asyncRefund' => 'setAsyncRefund'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payoutAccountNo' => 'getPayoutAccountNo',
        'refundAppliedTime' => 'getRefundAppliedTime',
        'actorType' => 'getActorType',
        'returnChargeToPayer' => 'getReturnChargeToPayer',
        'destination' => 'getDestination',
        'envInfo' => 'getEnvInfo',
        'auditInfo' => 'getAuditInfo',
        'actorContext' => 'getActorContext',
        'refundOptionBill' => 'getRefundOptionBill',
        'extendInfo' => 'getExtendInfo',
        'asyncRefund' => 'getAsyncRefund'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ACTOR_TYPE_USER = 'USER';
    public const ACTOR_TYPE_MERCHANT = 'MERCHANT';
    public const ACTOR_TYPE_MERCHANT_OPERATOR = 'MERCHANT_OPERATOR';
    public const ACTOR_TYPE_BACK_OFFICE = 'BACK_OFFICE';
    public const ACTOR_TYPE_SYSTEM = 'SYSTEM';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActorTypeAllowableValues()
    {
        return [
            self::ACTOR_TYPE_USER,
            self::ACTOR_TYPE_MERCHANT,
            self::ACTOR_TYPE_MERCHANT_OPERATOR,
            self::ACTOR_TYPE_BACK_OFFICE,
            self::ACTOR_TYPE_SYSTEM,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('payoutAccountNo', $data ?? [], null);
        $this->setIfExists('refundAppliedTime', $data ?? [], null);
        $this->setIfExists('actorType', $data ?? [], null);
        $this->setIfExists('returnChargeToPayer', $data ?? [], null);
        $this->setIfExists('destination', $data ?? [], null);
        $this->setIfExists('envInfo', $data ?? [], null);
        $this->setIfExists('auditInfo', $data ?? [], null);
        $this->setIfExists('actorContext', $data ?? [], null);
        $this->setIfExists('refundOptionBill', $data ?? [], null);
        $this->setIfExists('extendInfo', $data ?? [], null);
        $this->setIfExists('asyncRefund', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['payoutAccountNo']) && (mb_strlen($this->container['payoutAccountNo']) > 64)) {
            $invalidProperties[] = "invalid value for 'payoutAccountNo', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['refundAppliedTime']) && (mb_strlen($this->container['refundAppliedTime']) > 25)) {
            $invalidProperties[] = "invalid value for 'refundAppliedTime', the character length must be smaller than or equal to 25.";
        }

        $allowedValues = $this->getActorTypeAllowableValues();
        if (!is_null($this->container['actorType']) && !in_array($this->container['actorType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'actorType', must be one of '%s'",
                $this->container['actorType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['actorType']) && (mb_strlen($this->container['actorType']) > 64)) {
            $invalidProperties[] = "invalid value for 'actorType', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['returnChargeToPayer']) && (mb_strlen($this->container['returnChargeToPayer']) > 64)) {
            $invalidProperties[] = "invalid value for 'returnChargeToPayer', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['destination']) && (mb_strlen($this->container['destination']) > 64)) {
            $invalidProperties[] = "invalid value for 'destination', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['extendInfo']) && (mb_strlen($this->container['extendInfo']) > 4096)) {
            $invalidProperties[] = "invalid value for 'extendInfo', the character length must be smaller than or equal to 4096.";
        }

        if (!is_null($this->container['asyncRefund']) && (mb_strlen($this->container['asyncRefund']) > 5)) {
            $invalidProperties[] = "invalid value for 'asyncRefund', the character length must be smaller than or equal to 5.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payoutAccountNo
     *
     * @return string|null
     */
    public function getPayoutAccountNo()
    {
        return $this->container['payoutAccountNo'];
    }

    /**
     * Sets payoutAccountNo
     *
     * @param string|null $payoutAccountNo Additional information of payout account number. This param need to be filled if want to refund to specific payout account not that specified by DANA
     *
     * @return self
     */
    public function setPayoutAccountNo($payoutAccountNo)
    {
        if (is_null($payoutAccountNo)) {
            throw new \InvalidArgumentException('non-nullable payoutAccountNo cannot be null');
        }
        if ((mb_strlen($payoutAccountNo) > 64)) {
            throw new \InvalidArgumentException('invalid length for $payoutAccountNo when calling RefundOrderRequestAdditionalInfo., must be smaller than or equal to 64.');
        }

        $this->container['payoutAccountNo'] = $payoutAccountNo;

        return $this;
    }

    /**
     * Gets refundAppliedTime
     *
     * @return string|null
     */
    public function getRefundAppliedTime()
    {
        return $this->container['refundAppliedTime'];
    }

    /**
     * Sets refundAppliedTime
     *
     * @param string|null $refundAppliedTime Additional information of refund applied time, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
     *
     * @return self
     */
    public function setRefundAppliedTime($refundAppliedTime)
    {
        if (is_null($refundAppliedTime)) {
            throw new \InvalidArgumentException('non-nullable refundAppliedTime cannot be null');
        }
        if ((mb_strlen($refundAppliedTime) > 25)) {
            throw new \InvalidArgumentException('invalid length for $refundAppliedTime when calling RefundOrderRequestAdditionalInfo., must be smaller than or equal to 25.');
        }

        $this->container['refundAppliedTime'] = $refundAppliedTime;

        return $this;
    }

    /**
     * Gets actorType
     *
     * @return string|null
     */
    public function getActorType()
    {
        return $this->container['actorType'];
    }

    /**
     * Sets actorType
     *
     * @param string|null $actorType Additional information of actor type. The enums:<br> * USER - User<br> * MERCHANT - Merchant<br> * MERCHANT_OPERATOR - Merchant operator<br> * BACK_OFFICE - Back office<br> * SYSTEM - System<br>
     *
     * @return self
     */
    public function setActorType($actorType)
    {
        if (is_null($actorType)) {
            throw new \InvalidArgumentException('non-nullable actorType cannot be null');
        }
        $allowedValues = $this->getActorTypeAllowableValues();
        if (!in_array($actorType, $allowedValues, true) && (!empty($actorType) || $actorType !== '')) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'actorType', must be one of '%s'",
                    $actorType,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($actorType) > 64)) {
            throw new \InvalidArgumentException('invalid length for $actorType when calling RefundOrderRequestAdditionalInfo., must be smaller than or equal to 64.');
        }

        $this->container['actorType'] = $actorType;

        return $this;
    }

    /**
     * Gets returnChargeToPayer
     *
     * @return string|null
     */
    public function getReturnChargeToPayer()
    {
        return $this->container['returnChargeToPayer'];
    }

    /**
     * Sets returnChargeToPayer
     *
     * @param string|null $returnChargeToPayer Additional information of return charge to payer
     *
     * @return self
     */
    public function setReturnChargeToPayer($returnChargeToPayer)
    {
        if (is_null($returnChargeToPayer)) {
            throw new \InvalidArgumentException('non-nullable returnChargeToPayer cannot be null');
        }
        if ((mb_strlen($returnChargeToPayer) > 64)) {
            throw new \InvalidArgumentException('invalid length for $returnChargeToPayer when calling RefundOrderRequestAdditionalInfo., must be smaller than or equal to 64.');
        }

        $this->container['returnChargeToPayer'] = $returnChargeToPayer;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return string|null
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param string|null $destination Additional information of destination
     *
     * @return self
     */
    public function setDestination($destination)
    {
        if (is_null($destination)) {
            throw new \InvalidArgumentException('non-nullable destination cannot be null');
        }
        if ((mb_strlen($destination) > 64)) {
            throw new \InvalidArgumentException('invalid length for $destination when calling RefundOrderRequestAdditionalInfo., must be smaller than or equal to 64.');
        }

        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets envInfo
     *
     * @return \Dana\PaymentGateway\v1\Model\EnvInfo|null
     */
    public function getEnvInfo()
    {
        return $this->container['envInfo'];
    }

    /**
     * Sets envInfo
     *
     * @param \Dana\PaymentGateway\v1\Model\EnvInfo|null $envInfo Additional information of environment
     *
     * @return self
     */
    public function setEnvInfo($envInfo)
    {
        if (is_null($envInfo)) {
            throw new \InvalidArgumentException('non-nullable envInfo cannot be null');
        }
        $this->container['envInfo'] = $envInfo;

        return $this;
    }

    /**
     * Gets auditInfo
     *
     * @return \Dana\PaymentGateway\v1\Model\AuditInfo|null
     */
    public function getAuditInfo()
    {
        return $this->container['auditInfo'];
    }

    /**
     * Sets auditInfo
     *
     * @param \Dana\PaymentGateway\v1\Model\AuditInfo|null $auditInfo Additional information of audit
     *
     * @return self
     */
    public function setAuditInfo($auditInfo)
    {
        if (is_null($auditInfo)) {
            throw new \InvalidArgumentException('non-nullable auditInfo cannot be null');
        }
        $this->container['auditInfo'] = $auditInfo;

        return $this;
    }

    /**
     * Gets actorContext
     *
     * @return \Dana\PaymentGateway\v1\Model\ActorContext|null
     */
    public function getActorContext()
    {
        return $this->container['actorContext'];
    }

    /**
     * Sets actorContext
     *
     * @param \Dana\PaymentGateway\v1\Model\ActorContext|null $actorContext Additional information of actor context
     *
     * @return self
     */
    public function setActorContext($actorContext)
    {
        if (is_null($actorContext)) {
            throw new \InvalidArgumentException('non-nullable actorContext cannot be null');
        }
        $this->container['actorContext'] = $actorContext;

        return $this;
    }

    /**
     * Gets refundOptionBill
     *
     * @return \Dana\PaymentGateway\v1\Model\RefundOptionBill[]|null
     */
    public function getRefundOptionBill()
    {
        return $this->container['refundOptionBill'];
    }

    /**
     * Sets refundOptionBill
     *
     * @param \Dana\PaymentGateway\v1\Model\RefundOptionBill[]|null $refundOptionBill Additional information of refund option bill
     *
     * @return self
     */
    public function setRefundOptionBill($refundOptionBill)
    {
        if (is_null($refundOptionBill)) {
            throw new \InvalidArgumentException('non-nullable refundOptionBill cannot be null');
        }
        $this->container['refundOptionBill'] = $refundOptionBill;

        return $this;
    }

    /**
     * Gets extendInfo
     *
     * @return string|null
     */
    public function getExtendInfo()
    {
        return $this->container['extendInfo'];
    }

    /**
     * Sets extendInfo
     *
     * @param string|null $extendInfo Additional information of extend
     *
     * @return self
     */
    public function setExtendInfo($extendInfo)
    {
        if (is_null($extendInfo)) {
            throw new \InvalidArgumentException('non-nullable extendInfo cannot be null');
        }
        if ((mb_strlen($extendInfo) > 4096)) {
            throw new \InvalidArgumentException('invalid length for $extendInfo when calling RefundOrderRequestAdditionalInfo., must be smaller than or equal to 4096.');
        }

        $this->container['extendInfo'] = $extendInfo;

        return $this;
    }

    /**
     * Gets asyncRefund
     *
     * @return string|null
     */
    public function getAsyncRefund()
    {
        return $this->container['asyncRefund'];
    }

    /**
     * Sets asyncRefund
     *
     * @param string|null $asyncRefund Additional information of async refund to determine the process of refund whether sync or async. The values is true/false
     *
     * @return self
     */
    public function setAsyncRefund($asyncRefund)
    {
        if (is_null($asyncRefund)) {
            throw new \InvalidArgumentException('non-nullable asyncRefund cannot be null');
        }
        if ((mb_strlen($asyncRefund) > 5)) {
            throw new \InvalidArgumentException('invalid length for $asyncRefund when calling RefundOrderRequestAdditionalInfo., must be smaller than or equal to 5.');
        }

        $this->container['asyncRefund'] = $asyncRefund;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


