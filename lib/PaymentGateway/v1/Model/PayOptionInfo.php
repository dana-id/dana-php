<?php
/**
 * PayOptionInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\PaymentGateway
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway API
 *
 * API for doing operations in DANA Payment Gateway (Gapura)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\PaymentGateway\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * PayOptionInfo Class Doc Comment
 *
 * @category Class
 * @package  Dana\PaymentGateway
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayOptionInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PayOptionInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'payMethod' => 'string',
        'payOption' => 'string',
        'payAmount' => '\Dana\PaymentGateway\v1\Model\Money',
        'transAmount' => '\Dana\PaymentGateway\v1\Model\Money',
        'chargeAmount' => '\Dana\PaymentGateway\v1\Model\Money',
        'payOptionBillExtendInfo' => 'string',
        'extendInfo' => 'string',
        'paymentCode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'payMethod' => null,
        'payOption' => null,
        'payAmount' => null,
        'transAmount' => null,
        'chargeAmount' => null,
        'payOptionBillExtendInfo' => null,
        'extendInfo' => null,
        'paymentCode' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'payMethod' => false,
        'payOption' => false,
        'payAmount' => false,
        'transAmount' => false,
        'chargeAmount' => false,
        'payOptionBillExtendInfo' => false,
        'extendInfo' => false,
        'paymentCode' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payMethod' => 'payMethod',
        'payOption' => 'payOption',
        'payAmount' => 'payAmount',
        'transAmount' => 'transAmount',
        'chargeAmount' => 'chargeAmount',
        'payOptionBillExtendInfo' => 'payOptionBillExtendInfo',
        'extendInfo' => 'extendInfo',
        'paymentCode' => 'paymentCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payMethod' => 'setPayMethod',
        'payOption' => 'setPayOption',
        'payAmount' => 'setPayAmount',
        'transAmount' => 'setTransAmount',
        'chargeAmount' => 'setChargeAmount',
        'payOptionBillExtendInfo' => 'setPayOptionBillExtendInfo',
        'extendInfo' => 'setExtendInfo',
        'paymentCode' => 'setPaymentCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payMethod' => 'getPayMethod',
        'payOption' => 'getPayOption',
        'payAmount' => 'getPayAmount',
        'transAmount' => 'getTransAmount',
        'chargeAmount' => 'getChargeAmount',
        'payOptionBillExtendInfo' => 'getPayOptionBillExtendInfo',
        'extendInfo' => 'getExtendInfo',
        'paymentCode' => 'getPaymentCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PAY_METHOD_BALANCE = 'BALANCE';
    public const PAY_METHOD_COUPON = 'COUPON';
    public const PAY_METHOD_NET_BANKING = 'NET_BANKING';
    public const PAY_METHOD_CREDIT_CARD = 'CREDIT_CARD';
    public const PAY_METHOD_DEBIT_CARD = 'DEBIT_CARD';
    public const PAY_METHOD_VIRTUAL_ACCOUNT = 'VIRTUAL_ACCOUNT';
    public const PAY_METHOD_OTC = 'OTC';
    public const PAY_METHOD_DIRECT_DEBIT_CREDIT_CARD = 'DIRECT_DEBIT_CREDIT_CARD';
    public const PAY_METHOD_DIRECT_DEBIT_DEBIT_CARD = 'DIRECT_DEBIT_DEBIT_CARD';
    public const PAY_METHOD_ONLINE_CREDIT = 'ONLINE_CREDIT';
    public const PAY_METHOD_LOAN_CREDIT = 'LOAN_CREDIT';
    public const PAY_METHOD_NETWORK_PAY = 'NETWORK_PAY';
    public const PAY_OPTION_NETWORK_PAY_PG_SPAY = 'NETWORK_PAY_PG_SPAY';
    public const PAY_OPTION_NETWORK_PAY_PG_OVO = 'NETWORK_PAY_PG_OVO';
    public const PAY_OPTION_NETWORK_PAY_PG_GOPAY = 'NETWORK_PAY_PG_GOPAY';
    public const PAY_OPTION_NETWORK_PAY_PG_LINKAJA = 'NETWORK_PAY_PG_LINKAJA';
    public const PAY_OPTION_NETWORK_PAY_PG_CARD = 'NETWORK_PAY_PG_CARD';
    public const PAY_OPTION_VIRTUAL_ACCOUNT_BCA = 'VIRTUAL_ACCOUNT_BCA';
    public const PAY_OPTION_VIRTUAL_ACCOUNT_BNI = 'VIRTUAL_ACCOUNT_BNI';
    public const PAY_OPTION_VIRTUAL_ACCOUNT_MANDIRI = 'VIRTUAL_ACCOUNT_MANDIRI';
    public const PAY_OPTION_VIRTUAL_ACCOUNT_BRI = 'VIRTUAL_ACCOUNT_BRI';
    public const PAY_OPTION_VIRTUAL_ACCOUNT_BTPN = 'VIRTUAL_ACCOUNT_BTPN';
    public const PAY_OPTION_VIRTUAL_ACCOUNT_CIMB = 'VIRTUAL_ACCOUNT_CIMB';
    public const PAY_OPTION_VIRTUAL_ACCOUNT_PERMATA = 'VIRTUAL_ACCOUNT_PERMATA';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPayMethodAllowableValues()
    {
        return [
            self::PAY_METHOD_BALANCE,
            self::PAY_METHOD_COUPON,
            self::PAY_METHOD_NET_BANKING,
            self::PAY_METHOD_CREDIT_CARD,
            self::PAY_METHOD_DEBIT_CARD,
            self::PAY_METHOD_VIRTUAL_ACCOUNT,
            self::PAY_METHOD_OTC,
            self::PAY_METHOD_DIRECT_DEBIT_CREDIT_CARD,
            self::PAY_METHOD_DIRECT_DEBIT_DEBIT_CARD,
            self::PAY_METHOD_ONLINE_CREDIT,
            self::PAY_METHOD_LOAN_CREDIT,
            self::PAY_METHOD_NETWORK_PAY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPayOptionAllowableValues()
    {
        return [
            self::PAY_OPTION_NETWORK_PAY_PG_SPAY,
            self::PAY_OPTION_NETWORK_PAY_PG_OVO,
            self::PAY_OPTION_NETWORK_PAY_PG_GOPAY,
            self::PAY_OPTION_NETWORK_PAY_PG_LINKAJA,
            self::PAY_OPTION_NETWORK_PAY_PG_CARD,
            self::PAY_OPTION_VIRTUAL_ACCOUNT_BCA,
            self::PAY_OPTION_VIRTUAL_ACCOUNT_BNI,
            self::PAY_OPTION_VIRTUAL_ACCOUNT_MANDIRI,
            self::PAY_OPTION_VIRTUAL_ACCOUNT_BRI,
            self::PAY_OPTION_VIRTUAL_ACCOUNT_BTPN,
            self::PAY_OPTION_VIRTUAL_ACCOUNT_CIMB,
            self::PAY_OPTION_VIRTUAL_ACCOUNT_PERMATA,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('payMethod', $data ?? [], null);
        $this->setIfExists('payOption', $data ?? [], null);
        $this->setIfExists('payAmount', $data ?? [], null);
        $this->setIfExists('transAmount', $data ?? [], null);
        $this->setIfExists('chargeAmount', $data ?? [], null);
        $this->setIfExists('payOptionBillExtendInfo', $data ?? [], null);
        $this->setIfExists('extendInfo', $data ?? [], null);
        $this->setIfExists('paymentCode', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['payMethod'] === null) {
            $invalidProperties[] = "'payMethod' can't be null";
        }
        $allowedValues = $this->getPayMethodAllowableValues();
        if (!is_null($this->container['payMethod']) && !in_array($this->container['payMethod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payMethod', must be one of '%s'",
                $this->container['payMethod'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['payMethod']) > 64)) {
            $invalidProperties[] = "invalid value for 'payMethod', the character length must be smaller than or equal to 64.";
        }

        $allowedValues = $this->getPayOptionAllowableValues();
        if (!is_null($this->container['payOption']) && !in_array($this->container['payOption'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payOption', must be one of '%s'",
                $this->container['payOption'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['payOption']) && (mb_strlen($this->container['payOption']) > 64)) {
            $invalidProperties[] = "invalid value for 'payOption', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['payOptionBillExtendInfo']) && (mb_strlen($this->container['payOptionBillExtendInfo']) > 4096)) {
            $invalidProperties[] = "invalid value for 'payOptionBillExtendInfo', the character length must be smaller than or equal to 4096.";
        }

        if (!is_null($this->container['extendInfo']) && (mb_strlen($this->container['extendInfo']) > 4096)) {
            $invalidProperties[] = "invalid value for 'extendInfo', the character length must be smaller than or equal to 4096.";
        }

        if (!is_null($this->container['paymentCode']) && (mb_strlen($this->container['paymentCode']) > 64)) {
            $invalidProperties[] = "invalid value for 'paymentCode', the character length must be smaller than or equal to 64.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payMethod
     *
     * @return string
     */
    public function getPayMethod()
    {
        return $this->container['payMethod'];
    }

    /**
     * Sets payMethod
     *
     * @param string $payMethod Payment method name. The enums:<br>   * BALANCE - Payment method with balance<br>   * COUPON - Payment method with coupon<br>   * NET_BANKING - Payment method with internet banking<br>   * CREDIT_CARD - Payment method with credit card<br>   * DEBIT_CARD - Payment method with debit card<br>   * VIRTUAL_ACCOUNT - Payment method with virtual account<br>   * OTC - Payment method with OTC<br>   * DIRECT_DEBIT_CREDIT_CARD - Payment method with direct debit of credit card<br>   * DIRECT_DEBIT_DEBIT_CARD - Payment method with direct debit of debit card<br>   * ONLINE_CREDIT - Payment method with online Credit<br>   * LOAN_CREDIT - Payment method with DANA Cicil<br>   * NETWORK_PAY - Payment method with e-wallet
     *
     * @return self
     */
    public function setPayMethod($payMethod)
    {
        if (is_null($payMethod)) {
            throw new \InvalidArgumentException('non-nullable payMethod cannot be null');
        }
        $allowedValues = $this->getPayMethodAllowableValues();
        if (!in_array($payMethod, $allowedValues, true) && (!empty($payMethod) || $payMethod !== '')) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payMethod', must be one of '%s'",
                    $payMethod,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($payMethod) > 64)) {
            throw new \InvalidArgumentException('invalid length for $payMethod when calling PayOptionInfo., must be smaller than or equal to 64.');
        }

        $this->container['payMethod'] = $payMethod;

        return $this;
    }

    /**
     * Gets payOption
     *
     * @return string|null
     */
    public function getPayOption()
    {
        return $this->container['payOption'];
    }

    /**
     * Sets payOption
     *
     * @param string|null $payOption Payment option which shows the provider of this payment. The enums:<br>   * NETWORK_PAY_PG_SPAY - Payment method with ShopeePay e-wallet<br>   * NETWORK_PAY_PG_OVO - Payment method with OVO e-wallet<br>   * NETWORK_PAY_PG_GOPAY - Payment method with GoPay e-wallet<br>   * NETWORK_PAY_PG_LINKAJA - Payment method with LinkAja e-wallet<br>   * NETWORK_PAY_PG_CARD - Payment method with Card<br>   * VIRTUAL_ACCOUNT_BCA - Payment method with BCA virtual account<br>   * VIRTUAL_ACCOUNT_BNI - Payment method with BNI virtual account<br>   * VIRTUAL_ACCOUNT_MANDIRI - Payment method with Mandiri virtual account<br>   * VIRTUAL_ACCOUNT_BRI - Payment method with BRI virtual account<br>   * VIRTUAL_ACCOUNT_BTPN - Payment method with BTPN virtual account<br>   * VIRTUAL_ACCOUNT_CIMB - Payment method with CIMB virtual account<br>   * VIRTUAL_ACCOUNT_PERMATA - Payment method with Permata virtual account<br>
     *
     * @return self
     */
    public function setPayOption($payOption)
    {
        if (is_null($payOption)) {
            throw new \InvalidArgumentException('non-nullable payOption cannot be null');
        }
        $allowedValues = $this->getPayOptionAllowableValues();
        if (!in_array($payOption, $allowedValues, true) && (!empty($payOption) || $payOption !== '')) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payOption', must be one of '%s'",
                    $payOption,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($payOption) > 64)) {
            throw new \InvalidArgumentException('invalid length for $payOption when calling PayOptionInfo., must be smaller than or equal to 64.');
        }

        $this->container['payOption'] = $payOption;

        return $this;
    }

    /**
     * Gets payAmount
     *
     * @return \Dana\PaymentGateway\v1\Model\Money|null
     */
    public function getPayAmount()
    {
        return $this->container['payAmount'];
    }

    /**
     * Sets payAmount
     *
     * @param \Dana\PaymentGateway\v1\Model\Money|null $payAmount Pay amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br>
     *
     * @return self
     */
    public function setPayAmount($payAmount)
    {
        if (is_null($payAmount)) {
            throw new \InvalidArgumentException('non-nullable payAmount cannot be null');
        }
        $this->container['payAmount'] = $payAmount;

        return $this;
    }

    /**
     * Gets transAmount
     *
     * @return \Dana\PaymentGateway\v1\Model\Money|null
     */
    public function getTransAmount()
    {
        return $this->container['transAmount'];
    }

    /**
     * Sets transAmount
     *
     * @param \Dana\PaymentGateway\v1\Model\Money|null $transAmount Trans amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br>
     *
     * @return self
     */
    public function setTransAmount($transAmount)
    {
        if (is_null($transAmount)) {
            throw new \InvalidArgumentException('non-nullable transAmount cannot be null');
        }
        $this->container['transAmount'] = $transAmount;

        return $this;
    }

    /**
     * Gets chargeAmount
     *
     * @return \Dana\PaymentGateway\v1\Model\Money|null
     */
    public function getChargeAmount()
    {
        return $this->container['chargeAmount'];
    }

    /**
     * Sets chargeAmount
     *
     * @param \Dana\PaymentGateway\v1\Model\Money|null $chargeAmount Charge amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br>
     *
     * @return self
     */
    public function setChargeAmount($chargeAmount)
    {
        if (is_null($chargeAmount)) {
            throw new \InvalidArgumentException('non-nullable chargeAmount cannot be null');
        }
        $this->container['chargeAmount'] = $chargeAmount;

        return $this;
    }

    /**
     * Gets payOptionBillExtendInfo
     *
     * @return string|null
     */
    public function getPayOptionBillExtendInfo()
    {
        return $this->container['payOptionBillExtendInfo'];
    }

    /**
     * Sets payOptionBillExtendInfo
     *
     * @param string|null $payOptionBillExtendInfo Extend information of pay option bill
     *
     * @return self
     */
    public function setPayOptionBillExtendInfo($payOptionBillExtendInfo)
    {
        if (is_null($payOptionBillExtendInfo)) {
            throw new \InvalidArgumentException('non-nullable payOptionBillExtendInfo cannot be null');
        }
        if ((mb_strlen($payOptionBillExtendInfo) > 4096)) {
            throw new \InvalidArgumentException('invalid length for $payOptionBillExtendInfo when calling PayOptionInfo., must be smaller than or equal to 4096.');
        }

        $this->container['payOptionBillExtendInfo'] = $payOptionBillExtendInfo;

        return $this;
    }

    /**
     * Gets extendInfo
     *
     * @return string|null
     */
    public function getExtendInfo()
    {
        return $this->container['extendInfo'];
    }

    /**
     * Sets extendInfo
     *
     * @param string|null $extendInfo Extend information
     *
     * @return self
     */
    public function setExtendInfo($extendInfo)
    {
        if (is_null($extendInfo)) {
            throw new \InvalidArgumentException('non-nullable extendInfo cannot be null');
        }
        if ((mb_strlen($extendInfo) > 4096)) {
            throw new \InvalidArgumentException('invalid length for $extendInfo when calling PayOptionInfo., must be smaller than or equal to 4096.');
        }

        $this->container['extendInfo'] = $extendInfo;

        return $this;
    }

    /**
     * Gets paymentCode
     *
     * @return string|null
     */
    public function getPaymentCode()
    {
        return $this->container['paymentCode'];
    }

    /**
     * Sets paymentCode
     *
     * @param string|null $paymentCode Payment code
     *
     * @return self
     */
    public function setPaymentCode($paymentCode)
    {
        if (is_null($paymentCode)) {
            throw new \InvalidArgumentException('non-nullable paymentCode cannot be null');
        }
        if ((mb_strlen($paymentCode) > 64)) {
            throw new \InvalidArgumentException('invalid length for $paymentCode when calling PayOptionInfo., must be smaller than or equal to 64.');
        }

        $this->container['paymentCode'] = $paymentCode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


