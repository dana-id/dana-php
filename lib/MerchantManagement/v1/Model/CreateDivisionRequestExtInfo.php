<?php
/**
 * CreateDivisionRequestExtInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\MerchantManagement
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Merchant Management API
 *
 * API for merchant management operations in DANA
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\MerchantManagement\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * CreateDivisionRequestExtInfo Class Doc Comment
 *
 * @category Class
 * @description Extended information
 * @package  Dana\MerchantManagement
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateDivisionRequestExtInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateDivisionRequest_extInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pICEMAIL' => 'string',
        'pICPHONENUMBER' => 'string',
        'sUBMITTEREMAIL' => 'string',
        'gOODSSOLDTYPE' => 'string',
        'uSECASE' => 'string',
        'uSERPROFILING' => 'string',
        'aVGTICKET' => 'string',
        'oMZET' => 'string',
        'eXTURLS' => 'string',
        'bRANDNAME' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pICEMAIL' => null,
        'pICPHONENUMBER' => null,
        'sUBMITTEREMAIL' => null,
        'gOODSSOLDTYPE' => null,
        'uSECASE' => null,
        'uSERPROFILING' => null,
        'aVGTICKET' => null,
        'oMZET' => null,
        'eXTURLS' => null,
        'bRANDNAME' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pICEMAIL' => false,
        'pICPHONENUMBER' => false,
        'sUBMITTEREMAIL' => false,
        'gOODSSOLDTYPE' => false,
        'uSECASE' => false,
        'uSERPROFILING' => false,
        'aVGTICKET' => false,
        'oMZET' => false,
        'eXTURLS' => false,
        'bRANDNAME' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pICEMAIL' => 'PIC_EMAIL',
        'pICPHONENUMBER' => 'PIC_PHONENUMBER',
        'sUBMITTEREMAIL' => 'SUBMITTER_EMAIL',
        'gOODSSOLDTYPE' => 'GOODS_SOLD_TYPE',
        'uSECASE' => 'USECASE',
        'uSERPROFILING' => 'USER_PROFILING',
        'aVGTICKET' => 'AVG_TICKET',
        'oMZET' => 'OMZET',
        'eXTURLS' => 'EXT_URLS',
        'bRANDNAME' => 'BRAND_NAME'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pICEMAIL' => 'setPICEMAIL',
        'pICPHONENUMBER' => 'setPICPHONENUMBER',
        'sUBMITTEREMAIL' => 'setSUBMITTEREMAIL',
        'gOODSSOLDTYPE' => 'setGOODSSOLDTYPE',
        'uSECASE' => 'setUSECASE',
        'uSERPROFILING' => 'setUSERPROFILING',
        'aVGTICKET' => 'setAVGTICKET',
        'oMZET' => 'setOMZET',
        'eXTURLS' => 'setEXTURLS',
        'bRANDNAME' => 'setBRANDNAME'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pICEMAIL' => 'getPICEMAIL',
        'pICPHONENUMBER' => 'getPICPHONENUMBER',
        'sUBMITTEREMAIL' => 'getSUBMITTEREMAIL',
        'gOODSSOLDTYPE' => 'getGOODSSOLDTYPE',
        'uSECASE' => 'getUSECASE',
        'uSERPROFILING' => 'getUSERPROFILING',
        'aVGTICKET' => 'getAVGTICKET',
        'oMZET' => 'getOMZET',
        'eXTURLS' => 'getEXTURLS',
        'bRANDNAME' => 'getBRANDNAME'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const G_OODSSOLDTYPE_DIGITAL = 'DIGITAL';
    public const G_OODSSOLDTYPE_PHYSICAL = 'PHYSICAL';
    public const U_SERPROFILING_B2_B = 'B2B';
    public const U_SERPROFILING_B2_C = 'B2C';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGOODSSOLDTYPEAllowableValues()
    {
        return [
            self::G_OODSSOLDTYPE_DIGITAL,
            self::G_OODSSOLDTYPE_PHYSICAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUSERPROFILINGAllowableValues()
    {
        return [
            self::U_SERPROFILING_B2_B,
            self::U_SERPROFILING_B2_C,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('pICEMAIL', $data ?? [], null);
        $this->setIfExists('pICPHONENUMBER', $data ?? [], null);
        $this->setIfExists('sUBMITTEREMAIL', $data ?? [], null);
        $this->setIfExists('gOODSSOLDTYPE', $data ?? [], null);
        $this->setIfExists('uSECASE', $data ?? [], null);
        $this->setIfExists('uSERPROFILING', $data ?? [], null);
        $this->setIfExists('aVGTICKET', $data ?? [], null);
        $this->setIfExists('oMZET', $data ?? [], null);
        $this->setIfExists('eXTURLS', $data ?? [], null);
        $this->setIfExists('bRANDNAME', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getGOODSSOLDTYPEAllowableValues();
        if (!is_null($this->container['gOODSSOLDTYPE']) && !in_array($this->container['gOODSSOLDTYPE'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gOODSSOLDTYPE', must be one of '%s'",
                $this->container['gOODSSOLDTYPE'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUSERPROFILINGAllowableValues();
        if (!is_null($this->container['uSERPROFILING']) && !in_array($this->container['uSERPROFILING'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'uSERPROFILING', must be one of '%s'",
                $this->container['uSERPROFILING'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pICEMAIL
     *
     * @return string|null
     */
    public function getPICEMAIL()
    {
        return $this->container['pICEMAIL'];
    }

    /**
     * Sets pICEMAIL
     *
     * @param string|null $pICEMAIL PIC email address
     *
     * @return self
     */
    public function setPICEMAIL($pICEMAIL)
    {
        if (is_null($pICEMAIL)) {
            throw new \InvalidArgumentException('non-nullable pICEMAIL cannot be null');
        }
        $this->container['pICEMAIL'] = $pICEMAIL;

        return $this;
    }

    /**
     * Gets pICPHONENUMBER
     *
     * @return string|null
     */
    public function getPICPHONENUMBER()
    {
        return $this->container['pICPHONENUMBER'];
    }

    /**
     * Sets pICPHONENUMBER
     *
     * @param string|null $pICPHONENUMBER PIC phone number
     *
     * @return self
     */
    public function setPICPHONENUMBER($pICPHONENUMBER)
    {
        if (is_null($pICPHONENUMBER)) {
            throw new \InvalidArgumentException('non-nullable pICPHONENUMBER cannot be null');
        }
        $this->container['pICPHONENUMBER'] = $pICPHONENUMBER;

        return $this;
    }

    /**
     * Gets sUBMITTEREMAIL
     *
     * @return string|null
     */
    public function getSUBMITTEREMAIL()
    {
        return $this->container['sUBMITTEREMAIL'];
    }

    /**
     * Sets sUBMITTEREMAIL
     *
     * @param string|null $sUBMITTEREMAIL Submitter email address
     *
     * @return self
     */
    public function setSUBMITTEREMAIL($sUBMITTEREMAIL)
    {
        if (is_null($sUBMITTEREMAIL)) {
            throw new \InvalidArgumentException('non-nullable sUBMITTEREMAIL cannot be null');
        }
        $this->container['sUBMITTEREMAIL'] = $sUBMITTEREMAIL;

        return $this;
    }

    /**
     * Gets gOODSSOLDTYPE
     *
     * @return string|null
     */
    public function getGOODSSOLDTYPE()
    {
        return $this->container['gOODSSOLDTYPE'];
    }

    /**
     * Sets gOODSSOLDTYPE
     *
     * @param string|null $gOODSSOLDTYPE Type of goods sold
     *
     * @return self
     */
    public function setGOODSSOLDTYPE($gOODSSOLDTYPE)
    {
        if (is_null($gOODSSOLDTYPE)) {
            throw new \InvalidArgumentException('non-nullable gOODSSOLDTYPE cannot be null');
        }
        $allowedValues = $this->getGOODSSOLDTYPEAllowableValues();
        if (!in_array($gOODSSOLDTYPE, $allowedValues, true) && !empty($gOODSSOLDTYPE)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gOODSSOLDTYPE', must be one of '%s'",
                    $gOODSSOLDTYPE,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gOODSSOLDTYPE'] = $gOODSSOLDTYPE;

        return $this;
    }

    /**
     * Gets uSECASE
     *
     * @return string|null
     */
    public function getUSECASE()
    {
        return $this->container['uSECASE'];
    }

    /**
     * Sets uSECASE
     *
     * @param string|null $uSECASE Use case type
     *
     * @return self
     */
    public function setUSECASE($uSECASE)
    {
        if (is_null($uSECASE)) {
            throw new \InvalidArgumentException('non-nullable uSECASE cannot be null');
        }
        $this->container['uSECASE'] = $uSECASE;

        return $this;
    }

    /**
     * Gets uSERPROFILING
     *
     * @return string|null
     */
    public function getUSERPROFILING()
    {
        return $this->container['uSERPROFILING'];
    }

    /**
     * Sets uSERPROFILING
     *
     * @param string|null $uSERPROFILING User profiling type
     *
     * @return self
     */
    public function setUSERPROFILING($uSERPROFILING)
    {
        if (is_null($uSERPROFILING)) {
            throw new \InvalidArgumentException('non-nullable uSERPROFILING cannot be null');
        }
        $allowedValues = $this->getUSERPROFILINGAllowableValues();
        if (!in_array($uSERPROFILING, $allowedValues, true) && !empty($uSERPROFILING)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'uSERPROFILING', must be one of '%s'",
                    $uSERPROFILING,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['uSERPROFILING'] = $uSERPROFILING;

        return $this;
    }

    /**
     * Gets aVGTICKET
     *
     * @return string|null
     */
    public function getAVGTICKET()
    {
        return $this->container['aVGTICKET'];
    }

    /**
     * Sets aVGTICKET
     *
     * @param string|null $aVGTICKET Average ticket size
     *
     * @return self
     */
    public function setAVGTICKET($aVGTICKET)
    {
        if (is_null($aVGTICKET)) {
            throw new \InvalidArgumentException('non-nullable aVGTICKET cannot be null');
        }
        $this->container['aVGTICKET'] = $aVGTICKET;

        return $this;
    }

    /**
     * Gets oMZET
     *
     * @return string|null
     */
    public function getOMZET()
    {
        return $this->container['oMZET'];
    }

    /**
     * Sets oMZET
     *
     * @param string|null $oMZET Revenue range
     *
     * @return self
     */
    public function setOMZET($oMZET)
    {
        if (is_null($oMZET)) {
            throw new \InvalidArgumentException('non-nullable oMZET cannot be null');
        }
        $this->container['oMZET'] = $oMZET;

        return $this;
    }

    /**
     * Gets eXTURLS
     *
     * @return string|null
     */
    public function getEXTURLS()
    {
        return $this->container['eXTURLS'];
    }

    /**
     * Sets eXTURLS
     *
     * @param string|null $eXTURLS External URLs
     *
     * @return self
     */
    public function setEXTURLS($eXTURLS)
    {
        if (is_null($eXTURLS)) {
            throw new \InvalidArgumentException('non-nullable eXTURLS cannot be null');
        }
        $this->container['eXTURLS'] = $eXTURLS;

        return $this;
    }

    /**
     * Gets bRANDNAME
     *
     * @return string|null
     */
    public function getBRANDNAME()
    {
        return $this->container['bRANDNAME'];
    }

    /**
     * Sets bRANDNAME
     *
     * @param string|null $bRANDNAME Brand name
     *
     * @return self
     */
    public function setBRANDNAME($bRANDNAME)
    {
        if (is_null($bRANDNAME)) {
            throw new \InvalidArgumentException('non-nullable bRANDNAME cannot be null');
        }
        $this->container['bRANDNAME'] = $bRANDNAME;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


