<?php
/**
 * DivisionResourceInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\MerchantManagement
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Merchant Management API
 *
 * API for merchant management operations in DANA
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\MerchantManagement\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * DivisionResourceInfo Class Doc Comment
 *
 * @category Class
 * @package  Dana\MerchantManagement
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DivisionResourceInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DivisionResourceInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'divisionId' => 'string',
        'merchantId' => 'string',
        'parentRoleType' => 'string',
        'contactAddress' => '\Dana\MerchantManagement\v1\Model\AddressInfo',
        'divisionDescription' => 'string',
        'divisionType' => 'string',
        'divisionName' => 'string',
        'externalDivisionId' => 'string',
        'pgDivisionFlag' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'divisionId' => null,
        'merchantId' => null,
        'parentRoleType' => null,
        'contactAddress' => null,
        'divisionDescription' => null,
        'divisionType' => null,
        'divisionName' => null,
        'externalDivisionId' => null,
        'pgDivisionFlag' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'divisionId' => false,
        'merchantId' => false,
        'parentRoleType' => false,
        'contactAddress' => false,
        'divisionDescription' => false,
        'divisionType' => false,
        'divisionName' => false,
        'externalDivisionId' => false,
        'pgDivisionFlag' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'divisionId' => 'divisionId',
        'merchantId' => 'merchantId',
        'parentRoleType' => 'parentRoleType',
        'contactAddress' => 'contactAddress',
        'divisionDescription' => 'divisionDescription',
        'divisionType' => 'divisionType',
        'divisionName' => 'divisionName',
        'externalDivisionId' => 'externalDivisionId',
        'pgDivisionFlag' => 'pgDivisionFlag'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'divisionId' => 'setDivisionId',
        'merchantId' => 'setMerchantId',
        'parentRoleType' => 'setParentRoleType',
        'contactAddress' => 'setContactAddress',
        'divisionDescription' => 'setDivisionDescription',
        'divisionType' => 'setDivisionType',
        'divisionName' => 'setDivisionName',
        'externalDivisionId' => 'setExternalDivisionId',
        'pgDivisionFlag' => 'setPgDivisionFlag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'divisionId' => 'getDivisionId',
        'merchantId' => 'getMerchantId',
        'parentRoleType' => 'getParentRoleType',
        'contactAddress' => 'getContactAddress',
        'divisionDescription' => 'getDivisionDescription',
        'divisionType' => 'getDivisionType',
        'divisionName' => 'getDivisionName',
        'externalDivisionId' => 'getExternalDivisionId',
        'pgDivisionFlag' => 'getPgDivisionFlag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PARENT_ROLE_TYPE_MERCHANT = 'MERCHANT';
    public const PARENT_ROLE_TYPE_DIVISION = 'DIVISION';
    public const PARENT_ROLE_TYPE_EXTERNAL_DIVISION = 'EXTERNAL_DIVISION';
    public const DIVISION_TYPE_REGION = 'REGION';
    public const DIVISION_TYPE_AREA = 'AREA';
    public const DIVISION_TYPE_BRANCH = 'BRANCH';
    public const DIVISION_TYPE_OUTLET = 'OUTLET';
    public const DIVISION_TYPE_STORE = 'STORE';
    public const DIVISION_TYPE_KIOSK = 'KIOSK';
    public const DIVISION_TYPE_STALL = 'STALL';
    public const DIVISION_TYPE_COUNTER = 'COUNTER';
    public const DIVISION_TYPE_BOOTH = 'BOOTH';
    public const DIVISION_TYPE_POINT_OF_SALE = 'POINT_OF_SALE';
    public const DIVISION_TYPE_VENDING_MACHINE = 'VENDING_MACHINE';
    public const PG_DIVISION_FLAG_TRUE = 'true';
    public const PG_DIVISION_FLAG_FALSE = 'false';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getParentRoleTypeAllowableValues()
    {
        return [
            self::PARENT_ROLE_TYPE_MERCHANT,
            self::PARENT_ROLE_TYPE_DIVISION,
            self::PARENT_ROLE_TYPE_EXTERNAL_DIVISION,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDivisionTypeAllowableValues()
    {
        return [
            self::DIVISION_TYPE_REGION,
            self::DIVISION_TYPE_AREA,
            self::DIVISION_TYPE_BRANCH,
            self::DIVISION_TYPE_OUTLET,
            self::DIVISION_TYPE_STORE,
            self::DIVISION_TYPE_KIOSK,
            self::DIVISION_TYPE_STALL,
            self::DIVISION_TYPE_COUNTER,
            self::DIVISION_TYPE_BOOTH,
            self::DIVISION_TYPE_POINT_OF_SALE,
            self::DIVISION_TYPE_VENDING_MACHINE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPgDivisionFlagAllowableValues()
    {
        return [
            self::PG_DIVISION_FLAG_TRUE,
            self::PG_DIVISION_FLAG_FALSE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('divisionId', $data ?? [], null);
        $this->setIfExists('merchantId', $data ?? [], null);
        $this->setIfExists('parentRoleType', $data ?? [], null);
        $this->setIfExists('contactAddress', $data ?? [], null);
        $this->setIfExists('divisionDescription', $data ?? [], null);
        $this->setIfExists('divisionType', $data ?? [], null);
        $this->setIfExists('divisionName', $data ?? [], null);
        $this->setIfExists('externalDivisionId', $data ?? [], null);
        $this->setIfExists('pgDivisionFlag', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getParentRoleTypeAllowableValues();
        if (!is_null($this->container['parentRoleType']) && !in_array($this->container['parentRoleType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'parentRoleType', must be one of '%s'",
                $this->container['parentRoleType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDivisionTypeAllowableValues();
        if (!is_null($this->container['divisionType']) && !in_array($this->container['divisionType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'divisionType', must be one of '%s'",
                $this->container['divisionType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPgDivisionFlagAllowableValues();
        if (!is_null($this->container['pgDivisionFlag']) && !in_array($this->container['pgDivisionFlag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pgDivisionFlag', must be one of '%s'",
                $this->container['pgDivisionFlag'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets divisionId
     *
     * @return string|null
     */
    public function getDivisionId()
    {
        return $this->container['divisionId'];
    }

    /**
     * Sets divisionId
     *
     * @param string|null $divisionId Division identifier
     *
     * @return self
     */
    public function setDivisionId($divisionId)
    {
        if (is_null($divisionId)) {
            throw new \InvalidArgumentException('non-nullable divisionId cannot be null');
        }
        $this->container['divisionId'] = $divisionId;

        return $this;
    }

    /**
     * Gets merchantId
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchantId'];
    }

    /**
     * Sets merchantId
     *
     * @param string|null $merchantId Merchant identifier
     *
     * @return self
     */
    public function setMerchantId($merchantId)
    {
        if (is_null($merchantId)) {
            throw new \InvalidArgumentException('non-nullable merchantId cannot be null');
        }
        $this->container['merchantId'] = $merchantId;

        return $this;
    }

    /**
     * Gets parentRoleType
     *
     * @return string|null
     */
    public function getParentRoleType()
    {
        return $this->container['parentRoleType'];
    }

    /**
     * Sets parentRoleType
     *
     * @param string|null $parentRoleType Parent role type
     *
     * @return self
     */
    public function setParentRoleType($parentRoleType)
    {
        if (is_null($parentRoleType)) {
            throw new \InvalidArgumentException('non-nullable parentRoleType cannot be null');
        }
        $allowedValues = $this->getParentRoleTypeAllowableValues();
        if (!in_array($parentRoleType, $allowedValues, true) && !empty($parentRoleType)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'parentRoleType', must be one of '%s'",
                    $parentRoleType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['parentRoleType'] = $parentRoleType;

        return $this;
    }

    /**
     * Gets contactAddress
     *
     * @return \Dana\MerchantManagement\v1\Model\AddressInfo|null
     */
    public function getContactAddress()
    {
        return $this->container['contactAddress'];
    }

    /**
     * Sets contactAddress
     *
     * @param \Dana\MerchantManagement\v1\Model\AddressInfo|null $contactAddress contactAddress
     *
     * @return self
     */
    public function setContactAddress($contactAddress)
    {
        if (is_null($contactAddress)) {
            throw new \InvalidArgumentException('non-nullable contactAddress cannot be null');
        }
        $this->container['contactAddress'] = $contactAddress;

        return $this;
    }

    /**
     * Gets divisionDescription
     *
     * @return string|null
     */
    public function getDivisionDescription()
    {
        return $this->container['divisionDescription'];
    }

    /**
     * Sets divisionDescription
     *
     * @param string|null $divisionDescription Division description
     *
     * @return self
     */
    public function setDivisionDescription($divisionDescription)
    {
        if (is_null($divisionDescription)) {
            throw new \InvalidArgumentException('non-nullable divisionDescription cannot be null');
        }
        $this->container['divisionDescription'] = $divisionDescription;

        return $this;
    }

    /**
     * Gets divisionType
     *
     * @return string|null
     */
    public function getDivisionType()
    {
        return $this->container['divisionType'];
    }

    /**
     * Sets divisionType
     *
     * @param string|null $divisionType Division type
     *
     * @return self
     */
    public function setDivisionType($divisionType)
    {
        if (is_null($divisionType)) {
            throw new \InvalidArgumentException('non-nullable divisionType cannot be null');
        }
        $allowedValues = $this->getDivisionTypeAllowableValues();
        if (!in_array($divisionType, $allowedValues, true) && !empty($divisionType)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'divisionType', must be one of '%s'",
                    $divisionType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['divisionType'] = $divisionType;

        return $this;
    }

    /**
     * Gets divisionName
     *
     * @return string|null
     */
    public function getDivisionName()
    {
        return $this->container['divisionName'];
    }

    /**
     * Sets divisionName
     *
     * @param string|null $divisionName Division name
     *
     * @return self
     */
    public function setDivisionName($divisionName)
    {
        if (is_null($divisionName)) {
            throw new \InvalidArgumentException('non-nullable divisionName cannot be null');
        }
        $this->container['divisionName'] = $divisionName;

        return $this;
    }

    /**
     * Gets externalDivisionId
     *
     * @return string|null
     */
    public function getExternalDivisionId()
    {
        return $this->container['externalDivisionId'];
    }

    /**
     * Sets externalDivisionId
     *
     * @param string|null $externalDivisionId External division identifier
     *
     * @return self
     */
    public function setExternalDivisionId($externalDivisionId)
    {
        if (is_null($externalDivisionId)) {
            throw new \InvalidArgumentException('non-nullable externalDivisionId cannot be null');
        }
        $this->container['externalDivisionId'] = $externalDivisionId;

        return $this;
    }

    /**
     * Gets pgDivisionFlag
     *
     * @return string|null
     */
    public function getPgDivisionFlag()
    {
        return $this->container['pgDivisionFlag'];
    }

    /**
     * Sets pgDivisionFlag
     *
     * @param string|null $pgDivisionFlag Flag if division is type PG
     *
     * @return self
     */
    public function setPgDivisionFlag($pgDivisionFlag)
    {
        if (is_null($pgDivisionFlag)) {
            throw new \InvalidArgumentException('non-nullable pgDivisionFlag cannot be null');
        }
        $allowedValues = $this->getPgDivisionFlagAllowableValues();
        if (!in_array($pgDivisionFlag, $allowedValues, true) && !empty($pgDivisionFlag)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pgDivisionFlag', must be one of '%s'",
                    $pgDivisionFlag,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pgDivisionFlag'] = $pgDivisionFlag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


