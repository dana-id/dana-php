<?php
/**
 * CreateDivisionRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\MerchantManagement
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Merchant Management API
 *
 * API for merchant management operations in DANA
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\MerchantManagement\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * CreateDivisionRequest Class Doc Comment
 *
 * @category Class
 * @package  Dana\MerchantManagement
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateDivisionRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateDivisionRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'apiVersion' => 'string',
        'merchantId' => 'string',
        'parentDivisionId' => 'string',
        'parentRoleType' => 'string',
        'divisionName' => 'string',
        'divisionAddress' => '\Dana\MerchantManagement\v1\Model\AddressInfo',
        'divisionDescription' => 'string',
        'divisionType' => 'string',
        'externalDivisionId' => 'string',
        'logoUrlMap' => 'array<string,string>',
        'extInfo' => '\Dana\MerchantManagement\v1\Model\CreateDivisionRequestExtInfo',
        'mccCodes' => 'string[]',
        'businessDocs' => '\Dana\MerchantManagement\v1\Model\BusinessDocs[]',
        'businessEntity' => 'string',
        'ownerName' => '\Dana\MerchantManagement\v1\Model\UserName',
        'ownerPhoneNumber' => '\Dana\MerchantManagement\v1\Model\MobileNoInfo',
        'ownerIdType' => 'string',
        'ownerIdNo' => 'string',
        'ownerAddress' => '\Dana\MerchantManagement\v1\Model\AddressInfo',
        'directorPics' => '\Dana\MerchantManagement\v1\Model\PicInfo[]',
        'nonDirectorPics' => '\Dana\MerchantManagement\v1\Model\PicInfo[]',
        'sizeType' => 'string',
        'pgDivisionFlag' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'apiVersion' => null,
        'merchantId' => null,
        'parentDivisionId' => null,
        'parentRoleType' => null,
        'divisionName' => null,
        'divisionAddress' => null,
        'divisionDescription' => null,
        'divisionType' => null,
        'externalDivisionId' => null,
        'logoUrlMap' => null,
        'extInfo' => null,
        'mccCodes' => null,
        'businessDocs' => null,
        'businessEntity' => null,
        'ownerName' => null,
        'ownerPhoneNumber' => null,
        'ownerIdType' => null,
        'ownerIdNo' => null,
        'ownerAddress' => null,
        'directorPics' => null,
        'nonDirectorPics' => null,
        'sizeType' => null,
        'pgDivisionFlag' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'apiVersion' => false,
        'merchantId' => false,
        'parentDivisionId' => false,
        'parentRoleType' => false,
        'divisionName' => false,
        'divisionAddress' => false,
        'divisionDescription' => false,
        'divisionType' => false,
        'externalDivisionId' => false,
        'logoUrlMap' => false,
        'extInfo' => false,
        'mccCodes' => false,
        'businessDocs' => false,
        'businessEntity' => false,
        'ownerName' => false,
        'ownerPhoneNumber' => false,
        'ownerIdType' => false,
        'ownerIdNo' => false,
        'ownerAddress' => false,
        'directorPics' => false,
        'nonDirectorPics' => false,
        'sizeType' => false,
        'pgDivisionFlag' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'apiVersion' => 'apiVersion',
        'merchantId' => 'merchantId',
        'parentDivisionId' => 'parentDivisionId',
        'parentRoleType' => 'parentRoleType',
        'divisionName' => 'divisionName',
        'divisionAddress' => 'divisionAddress',
        'divisionDescription' => 'divisionDescription',
        'divisionType' => 'divisionType',
        'externalDivisionId' => 'externalDivisionId',
        'logoUrlMap' => 'logoUrlMap',
        'extInfo' => 'extInfo',
        'mccCodes' => 'mccCodes',
        'businessDocs' => 'businessDocs',
        'businessEntity' => 'businessEntity',
        'ownerName' => 'ownerName',
        'ownerPhoneNumber' => 'ownerPhoneNumber',
        'ownerIdType' => 'ownerIdType',
        'ownerIdNo' => 'ownerIdNo',
        'ownerAddress' => 'ownerAddress',
        'directorPics' => 'directorPics',
        'nonDirectorPics' => 'nonDirectorPics',
        'sizeType' => 'sizeType',
        'pgDivisionFlag' => 'pgDivisionFlag'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'apiVersion' => 'setApiVersion',
        'merchantId' => 'setMerchantId',
        'parentDivisionId' => 'setParentDivisionId',
        'parentRoleType' => 'setParentRoleType',
        'divisionName' => 'setDivisionName',
        'divisionAddress' => 'setDivisionAddress',
        'divisionDescription' => 'setDivisionDescription',
        'divisionType' => 'setDivisionType',
        'externalDivisionId' => 'setExternalDivisionId',
        'logoUrlMap' => 'setLogoUrlMap',
        'extInfo' => 'setExtInfo',
        'mccCodes' => 'setMccCodes',
        'businessDocs' => 'setBusinessDocs',
        'businessEntity' => 'setBusinessEntity',
        'ownerName' => 'setOwnerName',
        'ownerPhoneNumber' => 'setOwnerPhoneNumber',
        'ownerIdType' => 'setOwnerIdType',
        'ownerIdNo' => 'setOwnerIdNo',
        'ownerAddress' => 'setOwnerAddress',
        'directorPics' => 'setDirectorPics',
        'nonDirectorPics' => 'setNonDirectorPics',
        'sizeType' => 'setSizeType',
        'pgDivisionFlag' => 'setPgDivisionFlag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'apiVersion' => 'getApiVersion',
        'merchantId' => 'getMerchantId',
        'parentDivisionId' => 'getParentDivisionId',
        'parentRoleType' => 'getParentRoleType',
        'divisionName' => 'getDivisionName',
        'divisionAddress' => 'getDivisionAddress',
        'divisionDescription' => 'getDivisionDescription',
        'divisionType' => 'getDivisionType',
        'externalDivisionId' => 'getExternalDivisionId',
        'logoUrlMap' => 'getLogoUrlMap',
        'extInfo' => 'getExtInfo',
        'mccCodes' => 'getMccCodes',
        'businessDocs' => 'getBusinessDocs',
        'businessEntity' => 'getBusinessEntity',
        'ownerName' => 'getOwnerName',
        'ownerPhoneNumber' => 'getOwnerPhoneNumber',
        'ownerIdType' => 'getOwnerIdType',
        'ownerIdNo' => 'getOwnerIdNo',
        'ownerAddress' => 'getOwnerAddress',
        'directorPics' => 'getDirectorPics',
        'nonDirectorPics' => 'getNonDirectorPics',
        'sizeType' => 'getSizeType',
        'pgDivisionFlag' => 'getPgDivisionFlag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PARENT_ROLE_TYPE_MERCHANT = 'MERCHANT';
    public const PARENT_ROLE_TYPE_DIVISION = 'DIVISION';
    public const PARENT_ROLE_TYPE_EXTERNAL_DIVISION = 'EXTERNAL_DIVISION';
    public const DIVISION_TYPE_REGION = 'REGION';
    public const DIVISION_TYPE_AREA = 'AREA';
    public const DIVISION_TYPE_BRANCH = 'BRANCH';
    public const DIVISION_TYPE_OUTLET = 'OUTLET';
    public const DIVISION_TYPE_STORE = 'STORE';
    public const DIVISION_TYPE_KIOSK = 'KIOSK';
    public const DIVISION_TYPE_STALL = 'STALL';
    public const DIVISION_TYPE_COUNTER = 'COUNTER';
    public const DIVISION_TYPE_BOOTH = 'BOOTH';
    public const DIVISION_TYPE_POINT_OF_SALE = 'POINT_OF_SALE';
    public const DIVISION_TYPE_VENDING_MACHINE = 'VENDING_MACHINE';
    public const BUSINESS_ENTITY_PT = 'pt';
    public const BUSINESS_ENTITY_CV = 'cv';
    public const BUSINESS_ENTITY_INDIVIDU = 'individu';
    public const BUSINESS_ENTITY_USAHA_DAGANG = 'usaha_dagang';
    public const BUSINESS_ENTITY_YAYASAN = 'yayasan';
    public const BUSINESS_ENTITY_KOPERASI = 'koperasi';
    public const OWNER_ID_TYPE_KTP = 'KTP';
    public const OWNER_ID_TYPE_SIM = 'SIM';
    public const OWNER_ID_TYPE_PASSPORT = 'PASSPORT';
    public const OWNER_ID_TYPE_SIUP = 'SIUP';
    public const OWNER_ID_TYPE_NIB = 'NIB';
    public const SIZE_TYPE_UMI = 'UMI';
    public const SIZE_TYPE_UKE = 'UKE';
    public const SIZE_TYPE_UME = 'UME';
    public const SIZE_TYPE_UBE = 'UBE';
    public const SIZE_TYPE_URE = 'URE';
    public const PG_DIVISION_FLAG_TRUE = 'true';
    public const PG_DIVISION_FLAG_FALSE = 'false';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getParentRoleTypeAllowableValues()
    {
        return [
            self::PARENT_ROLE_TYPE_MERCHANT,
            self::PARENT_ROLE_TYPE_DIVISION,
            self::PARENT_ROLE_TYPE_EXTERNAL_DIVISION,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDivisionTypeAllowableValues()
    {
        return [
            self::DIVISION_TYPE_REGION,
            self::DIVISION_TYPE_AREA,
            self::DIVISION_TYPE_BRANCH,
            self::DIVISION_TYPE_OUTLET,
            self::DIVISION_TYPE_STORE,
            self::DIVISION_TYPE_KIOSK,
            self::DIVISION_TYPE_STALL,
            self::DIVISION_TYPE_COUNTER,
            self::DIVISION_TYPE_BOOTH,
            self::DIVISION_TYPE_POINT_OF_SALE,
            self::DIVISION_TYPE_VENDING_MACHINE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBusinessEntityAllowableValues()
    {
        return [
            self::BUSINESS_ENTITY_PT,
            self::BUSINESS_ENTITY_CV,
            self::BUSINESS_ENTITY_INDIVIDU,
            self::BUSINESS_ENTITY_USAHA_DAGANG,
            self::BUSINESS_ENTITY_YAYASAN,
            self::BUSINESS_ENTITY_KOPERASI,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOwnerIdTypeAllowableValues()
    {
        return [
            self::OWNER_ID_TYPE_KTP,
            self::OWNER_ID_TYPE_SIM,
            self::OWNER_ID_TYPE_PASSPORT,
            self::OWNER_ID_TYPE_SIUP,
            self::OWNER_ID_TYPE_NIB,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSizeTypeAllowableValues()
    {
        return [
            self::SIZE_TYPE_UMI,
            self::SIZE_TYPE_UKE,
            self::SIZE_TYPE_UME,
            self::SIZE_TYPE_UBE,
            self::SIZE_TYPE_URE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPgDivisionFlagAllowableValues()
    {
        return [
            self::PG_DIVISION_FLAG_TRUE,
            self::PG_DIVISION_FLAG_FALSE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('apiVersion', $data ?? [], null);
        $this->setIfExists('merchantId', $data ?? [], null);
        $this->setIfExists('parentDivisionId', $data ?? [], null);
        $this->setIfExists('parentRoleType', $data ?? [], null);
        $this->setIfExists('divisionName', $data ?? [], null);
        $this->setIfExists('divisionAddress', $data ?? [], null);
        $this->setIfExists('divisionDescription', $data ?? [], null);
        $this->setIfExists('divisionType', $data ?? [], null);
        $this->setIfExists('externalDivisionId', $data ?? [], null);
        $this->setIfExists('logoUrlMap', $data ?? [], null);
        $this->setIfExists('extInfo', $data ?? [], null);
        $this->setIfExists('mccCodes', $data ?? [], null);
        $this->setIfExists('businessDocs', $data ?? [], null);
        $this->setIfExists('businessEntity', $data ?? [], null);
        $this->setIfExists('ownerName', $data ?? [], null);
        $this->setIfExists('ownerPhoneNumber', $data ?? [], null);
        $this->setIfExists('ownerIdType', $data ?? [], null);
        $this->setIfExists('ownerIdNo', $data ?? [], null);
        $this->setIfExists('ownerAddress', $data ?? [], null);
        $this->setIfExists('directorPics', $data ?? [], null);
        $this->setIfExists('nonDirectorPics', $data ?? [], null);
        $this->setIfExists('sizeType', $data ?? [], null);
        $this->setIfExists('pgDivisionFlag', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['apiVersion'] === null) {
            $invalidProperties[] = "'apiVersion' can't be null";
        }
        if ((mb_strlen($this->container['apiVersion']) > 8)) {
            $invalidProperties[] = "invalid value for 'apiVersion', the character length must be smaller than or equal to 8.";
        }

        if ($this->container['merchantId'] === null) {
            $invalidProperties[] = "'merchantId' can't be null";
        }
        if ((mb_strlen($this->container['merchantId']) > 21)) {
            $invalidProperties[] = "invalid value for 'merchantId', the character length must be smaller than or equal to 21.";
        }

        if ($this->container['parentRoleType'] === null) {
            $invalidProperties[] = "'parentRoleType' can't be null";
        }
        $allowedValues = $this->getParentRoleTypeAllowableValues();
        if (!is_null($this->container['parentRoleType']) && !in_array($this->container['parentRoleType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'parentRoleType', must be one of '%s'",
                $this->container['parentRoleType'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['divisionName'] === null) {
            $invalidProperties[] = "'divisionName' can't be null";
        }
        if ((mb_strlen($this->container['divisionName']) > 256)) {
            $invalidProperties[] = "invalid value for 'divisionName', the character length must be smaller than or equal to 256.";
        }

        if ($this->container['divisionAddress'] === null) {
            $invalidProperties[] = "'divisionAddress' can't be null";
        }
        if (!is_null($this->container['divisionDescription']) && (mb_strlen($this->container['divisionDescription']) > 1024)) {
            $invalidProperties[] = "invalid value for 'divisionDescription', the character length must be smaller than or equal to 1024.";
        }

        if ($this->container['divisionType'] === null) {
            $invalidProperties[] = "'divisionType' can't be null";
        }
        $allowedValues = $this->getDivisionTypeAllowableValues();
        if (!is_null($this->container['divisionType']) && !in_array($this->container['divisionType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'divisionType', must be one of '%s'",
                $this->container['divisionType'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['externalDivisionId'] === null) {
            $invalidProperties[] = "'externalDivisionId' can't be null";
        }
        if ((mb_strlen($this->container['externalDivisionId']) > 64)) {
            $invalidProperties[] = "invalid value for 'externalDivisionId', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['extInfo'] === null) {
            $invalidProperties[] = "'extInfo' can't be null";
        }
        if ($this->container['mccCodes'] === null) {
            $invalidProperties[] = "'mccCodes' can't be null";
        }
        if ($this->container['businessDocs'] === null) {
            $invalidProperties[] = "'businessDocs' can't be null";
        }
        if ($this->container['businessEntity'] === null) {
            $invalidProperties[] = "'businessEntity' can't be null";
        }
        $allowedValues = $this->getBusinessEntityAllowableValues();
        if (!is_null($this->container['businessEntity']) && !in_array($this->container['businessEntity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'businessEntity', must be one of '%s'",
                $this->container['businessEntity'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['ownerName'] === null) {
            $invalidProperties[] = "'ownerName' can't be null";
        }
        if ($this->container['ownerPhoneNumber'] === null) {
            $invalidProperties[] = "'ownerPhoneNumber' can't be null";
        }
        if ($this->container['ownerIdType'] === null) {
            $invalidProperties[] = "'ownerIdType' can't be null";
        }
        $allowedValues = $this->getOwnerIdTypeAllowableValues();
        if (!is_null($this->container['ownerIdType']) && !in_array($this->container['ownerIdType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ownerIdType', must be one of '%s'",
                $this->container['ownerIdType'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['ownerIdNo'] === null) {
            $invalidProperties[] = "'ownerIdNo' can't be null";
        }
        if ($this->container['ownerAddress'] === null) {
            $invalidProperties[] = "'ownerAddress' can't be null";
        }
        if ($this->container['directorPics'] === null) {
            $invalidProperties[] = "'directorPics' can't be null";
        }
        if ($this->container['nonDirectorPics'] === null) {
            $invalidProperties[] = "'nonDirectorPics' can't be null";
        }
        if ($this->container['sizeType'] === null) {
            $invalidProperties[] = "'sizeType' can't be null";
        }
        $allowedValues = $this->getSizeTypeAllowableValues();
        if (!is_null($this->container['sizeType']) && !in_array($this->container['sizeType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sizeType', must be one of '%s'",
                $this->container['sizeType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPgDivisionFlagAllowableValues();
        if (!is_null($this->container['pgDivisionFlag']) && !in_array($this->container['pgDivisionFlag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pgDivisionFlag', must be one of '%s'",
                $this->container['pgDivisionFlag'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets apiVersion
     *
     * @return string
     */
    public function getApiVersion()
    {
        return $this->container['apiVersion'];
    }

    /**
     * Sets apiVersion
     *
     * @param string $apiVersion API Version. As per the respective API reference. Must be > 2
     *
     * @return self
     */
    public function setApiVersion($apiVersion)
    {
        if (is_null($apiVersion)) {
            throw new \InvalidArgumentException('non-nullable apiVersion cannot be null');
        }
        if ((mb_strlen($apiVersion) > 8)) {
            throw new \InvalidArgumentException('invalid length for $apiVersion when calling CreateDivisionRequest., must be smaller than or equal to 8.');
        }

        $this->container['apiVersion'] = $apiVersion;

        return $this;
    }

    /**
     * Gets merchantId
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchantId'];
    }

    /**
     * Sets merchantId
     *
     * @param string $merchantId Merchant identifier
     *
     * @return self
     */
    public function setMerchantId($merchantId)
    {
        if (is_null($merchantId)) {
            throw new \InvalidArgumentException('non-nullable merchantId cannot be null');
        }
        if ((mb_strlen($merchantId) > 21)) {
            throw new \InvalidArgumentException('invalid length for $merchantId when calling CreateDivisionRequest., must be smaller than or equal to 21.');
        }

        $this->container['merchantId'] = $merchantId;

        return $this;
    }

    /**
     * Gets parentDivisionId
     *
     * @return string|null
     */
    public function getParentDivisionId()
    {
        return $this->container['parentDivisionId'];
    }

    /**
     * Sets parentDivisionId
     *
     * @param string|null $parentDivisionId Parent division identifier. Required when parentRoleType is DIVISION or EXTERNAL_DIVISION. Length depends on parentRoleType - DIVISION (21 max), EXTERNAL_DIVISION (64 max)
     *
     * @return self
     */
    public function setParentDivisionId($parentDivisionId)
    {
        if (is_null($parentDivisionId)) {
            throw new \InvalidArgumentException('non-nullable parentDivisionId cannot be null');
        }
        $this->container['parentDivisionId'] = $parentDivisionId;

        return $this;
    }

    /**
     * Gets parentRoleType
     *
     * @return string
     */
    public function getParentRoleType()
    {
        return $this->container['parentRoleType'];
    }

    /**
     * Sets parentRoleType
     *
     * @param string $parentRoleType Type of parent role
     *
     * @return self
     */
    public function setParentRoleType($parentRoleType)
    {
        if (is_null($parentRoleType)) {
            throw new \InvalidArgumentException('non-nullable parentRoleType cannot be null');
        }
        $allowedValues = $this->getParentRoleTypeAllowableValues();
        if (!in_array($parentRoleType, $allowedValues, true) && !empty($parentRoleType)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'parentRoleType', must be one of '%s'",
                    $parentRoleType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['parentRoleType'] = $parentRoleType;

        return $this;
    }

    /**
     * Gets divisionName
     *
     * @return string
     */
    public function getDivisionName()
    {
        return $this->container['divisionName'];
    }

    /**
     * Sets divisionName
     *
     * @param string $divisionName Division name
     *
     * @return self
     */
    public function setDivisionName($divisionName)
    {
        if (is_null($divisionName)) {
            throw new \InvalidArgumentException('non-nullable divisionName cannot be null');
        }
        if ((mb_strlen($divisionName) > 256)) {
            throw new \InvalidArgumentException('invalid length for $divisionName when calling CreateDivisionRequest., must be smaller than or equal to 256.');
        }

        $this->container['divisionName'] = $divisionName;

        return $this;
    }

    /**
     * Gets divisionAddress
     *
     * @return \Dana\MerchantManagement\v1\Model\AddressInfo
     */
    public function getDivisionAddress()
    {
        return $this->container['divisionAddress'];
    }

    /**
     * Sets divisionAddress
     *
     * @param \Dana\MerchantManagement\v1\Model\AddressInfo $divisionAddress divisionAddress
     *
     * @return self
     */
    public function setDivisionAddress($divisionAddress)
    {
        if (is_null($divisionAddress)) {
            throw new \InvalidArgumentException('non-nullable divisionAddress cannot be null');
        }
        $this->container['divisionAddress'] = $divisionAddress;

        return $this;
    }

    /**
     * Gets divisionDescription
     *
     * @return string|null
     */
    public function getDivisionDescription()
    {
        return $this->container['divisionDescription'];
    }

    /**
     * Sets divisionDescription
     *
     * @param string|null $divisionDescription Division description
     *
     * @return self
     */
    public function setDivisionDescription($divisionDescription)
    {
        if (is_null($divisionDescription)) {
            throw new \InvalidArgumentException('non-nullable divisionDescription cannot be null');
        }
        if ((mb_strlen($divisionDescription) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $divisionDescription when calling CreateDivisionRequest., must be smaller than or equal to 1024.');
        }

        $this->container['divisionDescription'] = $divisionDescription;

        return $this;
    }

    /**
     * Gets divisionType
     *
     * @return string
     */
    public function getDivisionType()
    {
        return $this->container['divisionType'];
    }

    /**
     * Sets divisionType
     *
     * @param string $divisionType Division type
     *
     * @return self
     */
    public function setDivisionType($divisionType)
    {
        if (is_null($divisionType)) {
            throw new \InvalidArgumentException('non-nullable divisionType cannot be null');
        }
        $allowedValues = $this->getDivisionTypeAllowableValues();
        if (!in_array($divisionType, $allowedValues, true) && !empty($divisionType)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'divisionType', must be one of '%s'",
                    $divisionType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['divisionType'] = $divisionType;

        return $this;
    }

    /**
     * Gets externalDivisionId
     *
     * @return string
     */
    public function getExternalDivisionId()
    {
        return $this->container['externalDivisionId'];
    }

    /**
     * Sets externalDivisionId
     *
     * @param string $externalDivisionId External division identifier
     *
     * @return self
     */
    public function setExternalDivisionId($externalDivisionId)
    {
        if (is_null($externalDivisionId)) {
            throw new \InvalidArgumentException('non-nullable externalDivisionId cannot be null');
        }
        if ((mb_strlen($externalDivisionId) > 64)) {
            throw new \InvalidArgumentException('invalid length for $externalDivisionId when calling CreateDivisionRequest., must be smaller than or equal to 64.');
        }

        $this->container['externalDivisionId'] = $externalDivisionId;

        return $this;
    }

    /**
     * Gets logoUrlMap
     *
     * @return array<string,string>|null
     */
    public function getLogoUrlMap()
    {
        return $this->container['logoUrlMap'];
    }

    /**
     * Sets logoUrlMap
     *
     * @param array<string,string>|null $logoUrlMap Logo URL map with base64 encoded images. Keys can be LOGO, PC_LOGO, MOBILE_LOGO
     *
     * @return self
     */
    public function setLogoUrlMap($logoUrlMap)
    {
        if (is_null($logoUrlMap)) {
            throw new \InvalidArgumentException('non-nullable logoUrlMap cannot be null');
        }
        $this->container['logoUrlMap'] = $logoUrlMap;

        return $this;
    }

    /**
     * Gets extInfo
     *
     * @return \Dana\MerchantManagement\v1\Model\CreateDivisionRequestExtInfo
     */
    public function getExtInfo()
    {
        return $this->container['extInfo'];
    }

    /**
     * Sets extInfo
     *
     * @param \Dana\MerchantManagement\v1\Model\CreateDivisionRequestExtInfo $extInfo extInfo
     *
     * @return self
     */
    public function setExtInfo($extInfo)
    {
        if (is_null($extInfo)) {
            throw new \InvalidArgumentException('non-nullable extInfo cannot be null');
        }
        $this->container['extInfo'] = $extInfo;

        return $this;
    }

    /**
     * Gets mccCodes
     *
     * @return string[]
     */
    public function getMccCodes()
    {
        return $this->container['mccCodes'];
    }

    /**
     * Sets mccCodes
     *
     * @param string[] $mccCodes Merchant category codes
     *
     * @return self
     */
    public function setMccCodes($mccCodes)
    {
        if (is_null($mccCodes)) {
            throw new \InvalidArgumentException('non-nullable mccCodes cannot be null');
        }
        $this->container['mccCodes'] = $mccCodes;

        return $this;
    }

    /**
     * Gets businessDocs
     *
     * @return \Dana\MerchantManagement\v1\Model\BusinessDocs[]
     */
    public function getBusinessDocs()
    {
        return $this->container['businessDocs'];
    }

    /**
     * Sets businessDocs
     *
     * @param \Dana\MerchantManagement\v1\Model\BusinessDocs[] $businessDocs Business documents. \"individu\" entity can only use KTP and SIM. Other entities can use SIUP and NIB
     *
     * @return self
     */
    public function setBusinessDocs($businessDocs)
    {
        if (is_null($businessDocs)) {
            throw new \InvalidArgumentException('non-nullable businessDocs cannot be null');
        }
        $this->container['businessDocs'] = $businessDocs;

        return $this;
    }

    /**
     * Gets businessEntity
     *
     * @return string
     */
    public function getBusinessEntity()
    {
        return $this->container['businessEntity'];
    }

    /**
     * Sets businessEntity
     *
     * @param string $businessEntity Business entity type
     *
     * @return self
     */
    public function setBusinessEntity($businessEntity)
    {
        if (is_null($businessEntity)) {
            throw new \InvalidArgumentException('non-nullable businessEntity cannot be null');
        }
        $allowedValues = $this->getBusinessEntityAllowableValues();
        if (!in_array($businessEntity, $allowedValues, true) && !empty($businessEntity)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'businessEntity', must be one of '%s'",
                    $businessEntity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['businessEntity'] = $businessEntity;

        return $this;
    }

    /**
     * Gets ownerName
     *
     * @return \Dana\MerchantManagement\v1\Model\UserName
     */
    public function getOwnerName()
    {
        return $this->container['ownerName'];
    }

    /**
     * Sets ownerName
     *
     * @param \Dana\MerchantManagement\v1\Model\UserName $ownerName ownerName
     *
     * @return self
     */
    public function setOwnerName($ownerName)
    {
        if (is_null($ownerName)) {
            throw new \InvalidArgumentException('non-nullable ownerName cannot be null');
        }
        $this->container['ownerName'] = $ownerName;

        return $this;
    }

    /**
     * Gets ownerPhoneNumber
     *
     * @return \Dana\MerchantManagement\v1\Model\MobileNoInfo
     */
    public function getOwnerPhoneNumber()
    {
        return $this->container['ownerPhoneNumber'];
    }

    /**
     * Sets ownerPhoneNumber
     *
     * @param \Dana\MerchantManagement\v1\Model\MobileNoInfo $ownerPhoneNumber ownerPhoneNumber
     *
     * @return self
     */
    public function setOwnerPhoneNumber($ownerPhoneNumber)
    {
        if (is_null($ownerPhoneNumber)) {
            throw new \InvalidArgumentException('non-nullable ownerPhoneNumber cannot be null');
        }
        $this->container['ownerPhoneNumber'] = $ownerPhoneNumber;

        return $this;
    }

    /**
     * Gets ownerIdType
     *
     * @return string
     */
    public function getOwnerIdType()
    {
        return $this->container['ownerIdType'];
    }

    /**
     * Sets ownerIdType
     *
     * @param string $ownerIdType Owner identifier type
     *
     * @return self
     */
    public function setOwnerIdType($ownerIdType)
    {
        if (is_null($ownerIdType)) {
            throw new \InvalidArgumentException('non-nullable ownerIdType cannot be null');
        }
        $allowedValues = $this->getOwnerIdTypeAllowableValues();
        if (!in_array($ownerIdType, $allowedValues, true) && !empty($ownerIdType)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ownerIdType', must be one of '%s'",
                    $ownerIdType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ownerIdType'] = $ownerIdType;

        return $this;
    }

    /**
     * Gets ownerIdNo
     *
     * @return string
     */
    public function getOwnerIdNo()
    {
        return $this->container['ownerIdNo'];
    }

    /**
     * Sets ownerIdNo
     *
     * @param string $ownerIdNo Owner identifier number. Length depends on ownerIdType - KTP (16), SIM (12-14), Passport (8), NIB (>=13), SIUP (free text)
     *
     * @return self
     */
    public function setOwnerIdNo($ownerIdNo)
    {
        if (is_null($ownerIdNo)) {
            throw new \InvalidArgumentException('non-nullable ownerIdNo cannot be null');
        }
        $this->container['ownerIdNo'] = $ownerIdNo;

        return $this;
    }

    /**
     * Gets ownerAddress
     *
     * @return \Dana\MerchantManagement\v1\Model\AddressInfo
     */
    public function getOwnerAddress()
    {
        return $this->container['ownerAddress'];
    }

    /**
     * Sets ownerAddress
     *
     * @param \Dana\MerchantManagement\v1\Model\AddressInfo $ownerAddress ownerAddress
     *
     * @return self
     */
    public function setOwnerAddress($ownerAddress)
    {
        if (is_null($ownerAddress)) {
            throw new \InvalidArgumentException('non-nullable ownerAddress cannot be null');
        }
        $this->container['ownerAddress'] = $ownerAddress;

        return $this;
    }

    /**
     * Gets directorPics
     *
     * @return \Dana\MerchantManagement\v1\Model\PicInfo[]
     */
    public function getDirectorPics()
    {
        return $this->container['directorPics'];
    }

    /**
     * Sets directorPics
     *
     * @param \Dana\MerchantManagement\v1\Model\PicInfo[] $directorPics Director as a PIC of sub merchant
     *
     * @return self
     */
    public function setDirectorPics($directorPics)
    {
        if (is_null($directorPics)) {
            throw new \InvalidArgumentException('non-nullable directorPics cannot be null');
        }
        $this->container['directorPics'] = $directorPics;

        return $this;
    }

    /**
     * Gets nonDirectorPics
     *
     * @return \Dana\MerchantManagement\v1\Model\PicInfo[]
     */
    public function getNonDirectorPics()
    {
        return $this->container['nonDirectorPics'];
    }

    /**
     * Sets nonDirectorPics
     *
     * @param \Dana\MerchantManagement\v1\Model\PicInfo[] $nonDirectorPics Non director which become a PIC of sub merchant
     *
     * @return self
     */
    public function setNonDirectorPics($nonDirectorPics)
    {
        if (is_null($nonDirectorPics)) {
            throw new \InvalidArgumentException('non-nullable nonDirectorPics cannot be null');
        }
        $this->container['nonDirectorPics'] = $nonDirectorPics;

        return $this;
    }

    /**
     * Gets sizeType
     *
     * @return string
     */
    public function getSizeType()
    {
        return $this->container['sizeType'];
    }

    /**
     * Sets sizeType
     *
     * @param string $sizeType Size type
     *
     * @return self
     */
    public function setSizeType($sizeType)
    {
        if (is_null($sizeType)) {
            throw new \InvalidArgumentException('non-nullable sizeType cannot be null');
        }
        $allowedValues = $this->getSizeTypeAllowableValues();
        if (!in_array($sizeType, $allowedValues, true) && !empty($sizeType)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sizeType', must be one of '%s'",
                    $sizeType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sizeType'] = $sizeType;

        return $this;
    }

    /**
     * Gets pgDivisionFlag
     *
     * @return string|null
     */
    public function getPgDivisionFlag()
    {
        return $this->container['pgDivisionFlag'];
    }

    /**
     * Sets pgDivisionFlag
     *
     * @param string|null $pgDivisionFlag Flag if division is type PG
     *
     * @return self
     */
    public function setPgDivisionFlag($pgDivisionFlag)
    {
        if (is_null($pgDivisionFlag)) {
            throw new \InvalidArgumentException('non-nullable pgDivisionFlag cannot be null');
        }
        $allowedValues = $this->getPgDivisionFlagAllowableValues();
        if (!in_array($pgDivisionFlag, $allowedValues, true) && !empty($pgDivisionFlag)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pgDivisionFlag', must be one of '%s'",
                    $pgDivisionFlag,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pgDivisionFlag'] = $pgDivisionFlag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


