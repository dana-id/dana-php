<?php
/**
 * UpdateShopRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\MerchantManagement
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Merchant Management API
 *
 * API for merchant management operations in DANA
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\MerchantManagement\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * UpdateShopRequest Class Doc Comment
 *
 * @category Class
 * @package  Dana\MerchantManagement
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateShopRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdateShopRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'shopId' => 'string',
        'merchantId' => 'string',
        'shopIdType' => 'string',
        'mainName' => 'string',
        'shopAddress' => '\Dana\MerchantManagement\v1\Model\AddressInfo',
        'shopDesc' => 'string',
        'newExternalShopId' => 'string',
        'mccCodes' => 'string[]',
        'logoUrlMap' => 'array<string,string>',
        'extInfo' => 'array<string,mixed>',
        'sizeType' => 'string',
        'ln' => 'string',
        'lat' => 'string',
        'loyalty' => 'string',
        'ownerAddress' => '\Dana\MerchantManagement\v1\Model\AddressInfo',
        'ownerName' => '\Dana\MerchantManagement\v1\Model\UserName',
        'ownerPhoneNumber' => '\Dana\MerchantManagement\v1\Model\MobileNoInfo',
        'ownerIdType' => 'string',
        'ownerIdNo' => 'string',
        'deviceNumber' => 'string',
        'posNumber' => 'string',
        'apiVersion' => 'string',
        'businessEntity' => 'string',
        'shopOwning' => 'string',
        'shopBizType' => 'string',
        'businessDocs' => '\Dana\MerchantManagement\v1\Model\BusinessDocs[]',
        'businessEndDate' => 'string',
        'taxNo' => 'string',
        'taxAddress' => '\Dana\MerchantManagement\v1\Model\AddressInfo',
        'brandName' => 'string',
        'directorPics' => '\Dana\MerchantManagement\v1\Model\PicInfo[]',
        'nonDirectorPics' => '\Dana\MerchantManagement\v1\Model\PicInfo[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'shopId' => null,
        'merchantId' => null,
        'shopIdType' => null,
        'mainName' => null,
        'shopAddress' => null,
        'shopDesc' => null,
        'newExternalShopId' => null,
        'mccCodes' => null,
        'logoUrlMap' => null,
        'extInfo' => null,
        'sizeType' => null,
        'ln' => null,
        'lat' => null,
        'loyalty' => null,
        'ownerAddress' => null,
        'ownerName' => null,
        'ownerPhoneNumber' => null,
        'ownerIdType' => null,
        'ownerIdNo' => null,
        'deviceNumber' => null,
        'posNumber' => null,
        'apiVersion' => null,
        'businessEntity' => null,
        'shopOwning' => null,
        'shopBizType' => null,
        'businessDocs' => null,
        'businessEndDate' => null,
        'taxNo' => null,
        'taxAddress' => null,
        'brandName' => null,
        'directorPics' => null,
        'nonDirectorPics' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'shopId' => false,
        'merchantId' => false,
        'shopIdType' => false,
        'mainName' => false,
        'shopAddress' => false,
        'shopDesc' => false,
        'newExternalShopId' => false,
        'mccCodes' => false,
        'logoUrlMap' => false,
        'extInfo' => false,
        'sizeType' => false,
        'ln' => false,
        'lat' => false,
        'loyalty' => false,
        'ownerAddress' => false,
        'ownerName' => false,
        'ownerPhoneNumber' => false,
        'ownerIdType' => false,
        'ownerIdNo' => false,
        'deviceNumber' => false,
        'posNumber' => false,
        'apiVersion' => false,
        'businessEntity' => false,
        'shopOwning' => false,
        'shopBizType' => false,
        'businessDocs' => false,
        'businessEndDate' => false,
        'taxNo' => false,
        'taxAddress' => false,
        'brandName' => false,
        'directorPics' => false,
        'nonDirectorPics' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shopId' => 'shopId',
        'merchantId' => 'merchantId',
        'shopIdType' => 'shopIdType',
        'mainName' => 'mainName',
        'shopAddress' => 'shopAddress',
        'shopDesc' => 'shopDesc',
        'newExternalShopId' => 'newExternalShopId',
        'mccCodes' => 'mccCodes',
        'logoUrlMap' => 'logoUrlMap',
        'extInfo' => 'extInfo',
        'sizeType' => 'sizeType',
        'ln' => 'ln',
        'lat' => 'lat',
        'loyalty' => 'loyalty',
        'ownerAddress' => 'ownerAddress',
        'ownerName' => 'ownerName',
        'ownerPhoneNumber' => 'ownerPhoneNumber',
        'ownerIdType' => 'ownerIdType',
        'ownerIdNo' => 'ownerIdNo',
        'deviceNumber' => 'deviceNumber',
        'posNumber' => 'posNumber',
        'apiVersion' => 'apiVersion',
        'businessEntity' => 'businessEntity',
        'shopOwning' => 'shopOwning',
        'shopBizType' => 'shopBizType',
        'businessDocs' => 'businessDocs',
        'businessEndDate' => 'businessEndDate',
        'taxNo' => 'taxNo',
        'taxAddress' => 'taxAddress',
        'brandName' => 'brandName',
        'directorPics' => 'directorPics',
        'nonDirectorPics' => 'nonDirectorPics'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shopId' => 'setShopId',
        'merchantId' => 'setMerchantId',
        'shopIdType' => 'setShopIdType',
        'mainName' => 'setMainName',
        'shopAddress' => 'setShopAddress',
        'shopDesc' => 'setShopDesc',
        'newExternalShopId' => 'setNewExternalShopId',
        'mccCodes' => 'setMccCodes',
        'logoUrlMap' => 'setLogoUrlMap',
        'extInfo' => 'setExtInfo',
        'sizeType' => 'setSizeType',
        'ln' => 'setLn',
        'lat' => 'setLat',
        'loyalty' => 'setLoyalty',
        'ownerAddress' => 'setOwnerAddress',
        'ownerName' => 'setOwnerName',
        'ownerPhoneNumber' => 'setOwnerPhoneNumber',
        'ownerIdType' => 'setOwnerIdType',
        'ownerIdNo' => 'setOwnerIdNo',
        'deviceNumber' => 'setDeviceNumber',
        'posNumber' => 'setPosNumber',
        'apiVersion' => 'setApiVersion',
        'businessEntity' => 'setBusinessEntity',
        'shopOwning' => 'setShopOwning',
        'shopBizType' => 'setShopBizType',
        'businessDocs' => 'setBusinessDocs',
        'businessEndDate' => 'setBusinessEndDate',
        'taxNo' => 'setTaxNo',
        'taxAddress' => 'setTaxAddress',
        'brandName' => 'setBrandName',
        'directorPics' => 'setDirectorPics',
        'nonDirectorPics' => 'setNonDirectorPics'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shopId' => 'getShopId',
        'merchantId' => 'getMerchantId',
        'shopIdType' => 'getShopIdType',
        'mainName' => 'getMainName',
        'shopAddress' => 'getShopAddress',
        'shopDesc' => 'getShopDesc',
        'newExternalShopId' => 'getNewExternalShopId',
        'mccCodes' => 'getMccCodes',
        'logoUrlMap' => 'getLogoUrlMap',
        'extInfo' => 'getExtInfo',
        'sizeType' => 'getSizeType',
        'ln' => 'getLn',
        'lat' => 'getLat',
        'loyalty' => 'getLoyalty',
        'ownerAddress' => 'getOwnerAddress',
        'ownerName' => 'getOwnerName',
        'ownerPhoneNumber' => 'getOwnerPhoneNumber',
        'ownerIdType' => 'getOwnerIdType',
        'ownerIdNo' => 'getOwnerIdNo',
        'deviceNumber' => 'getDeviceNumber',
        'posNumber' => 'getPosNumber',
        'apiVersion' => 'getApiVersion',
        'businessEntity' => 'getBusinessEntity',
        'shopOwning' => 'getShopOwning',
        'shopBizType' => 'getShopBizType',
        'businessDocs' => 'getBusinessDocs',
        'businessEndDate' => 'getBusinessEndDate',
        'taxNo' => 'getTaxNo',
        'taxAddress' => 'getTaxAddress',
        'brandName' => 'getBrandName',
        'directorPics' => 'getDirectorPics',
        'nonDirectorPics' => 'getNonDirectorPics'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SHOP_ID_TYPE_INNER_ID = 'INNER_ID';
    public const SHOP_ID_TYPE_EXTERNAL_ID = 'EXTERNAL_ID';
    public const SIZE_TYPE_UMI = 'UMI';
    public const SIZE_TYPE_UKE = 'UKE';
    public const SIZE_TYPE_UME = 'UME';
    public const SIZE_TYPE_UBE = 'UBE';
    public const LOYALTY_TRUE = 'true';
    public const LOYALTY_FALSE = 'false';
    public const OWNER_ID_TYPE_KTP = 'KTP';
    public const OWNER_ID_TYPE_SIM = 'SIM';
    public const OWNER_ID_TYPE_PASSPORT = 'PASSPORT';
    public const OWNER_ID_TYPE_SIUP = 'SIUP';
    public const OWNER_ID_TYPE_NIB = 'NIB';
    public const BUSINESS_ENTITY_PT = 'pt';
    public const BUSINESS_ENTITY_CV = 'cv';
    public const BUSINESS_ENTITY_INDIVIDU = 'individu';
    public const BUSINESS_ENTITY_USAHA_DAGANG = 'usaha_dagang';
    public const BUSINESS_ENTITY_YAYASAN = 'yayasan';
    public const BUSINESS_ENTITY_KOPERASI = 'koperasi';
    public const SHOP_OWNING_DIRECT_OWNED = 'DIRECT_OWNED';
    public const SHOP_OWNING_FRANCHISED = 'FRANCHISED';
    public const SHOP_BIZ_TYPE_ONLINE = 'ONLINE';
    public const SHOP_BIZ_TYPE_OFFLINE = 'OFFLINE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShopIdTypeAllowableValues()
    {
        return [
            self::SHOP_ID_TYPE_INNER_ID,
            self::SHOP_ID_TYPE_EXTERNAL_ID,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSizeTypeAllowableValues()
    {
        return [
            self::SIZE_TYPE_UMI,
            self::SIZE_TYPE_UKE,
            self::SIZE_TYPE_UME,
            self::SIZE_TYPE_UBE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLoyaltyAllowableValues()
    {
        return [
            self::LOYALTY_TRUE,
            self::LOYALTY_FALSE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOwnerIdTypeAllowableValues()
    {
        return [
            self::OWNER_ID_TYPE_KTP,
            self::OWNER_ID_TYPE_SIM,
            self::OWNER_ID_TYPE_PASSPORT,
            self::OWNER_ID_TYPE_SIUP,
            self::OWNER_ID_TYPE_NIB,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBusinessEntityAllowableValues()
    {
        return [
            self::BUSINESS_ENTITY_PT,
            self::BUSINESS_ENTITY_CV,
            self::BUSINESS_ENTITY_INDIVIDU,
            self::BUSINESS_ENTITY_USAHA_DAGANG,
            self::BUSINESS_ENTITY_YAYASAN,
            self::BUSINESS_ENTITY_KOPERASI,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShopOwningAllowableValues()
    {
        return [
            self::SHOP_OWNING_DIRECT_OWNED,
            self::SHOP_OWNING_FRANCHISED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShopBizTypeAllowableValues()
    {
        return [
            self::SHOP_BIZ_TYPE_ONLINE,
            self::SHOP_BIZ_TYPE_OFFLINE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('shopId', $data ?? [], null);
        $this->setIfExists('merchantId', $data ?? [], null);
        $this->setIfExists('shopIdType', $data ?? [], null);
        $this->setIfExists('mainName', $data ?? [], null);
        $this->setIfExists('shopAddress', $data ?? [], null);
        $this->setIfExists('shopDesc', $data ?? [], null);
        $this->setIfExists('newExternalShopId', $data ?? [], null);
        $this->setIfExists('mccCodes', $data ?? [], null);
        $this->setIfExists('logoUrlMap', $data ?? [], null);
        $this->setIfExists('extInfo', $data ?? [], null);
        $this->setIfExists('sizeType', $data ?? [], null);
        $this->setIfExists('ln', $data ?? [], null);
        $this->setIfExists('lat', $data ?? [], null);
        $this->setIfExists('loyalty', $data ?? [], null);
        $this->setIfExists('ownerAddress', $data ?? [], null);
        $this->setIfExists('ownerName', $data ?? [], null);
        $this->setIfExists('ownerPhoneNumber', $data ?? [], null);
        $this->setIfExists('ownerIdType', $data ?? [], null);
        $this->setIfExists('ownerIdNo', $data ?? [], null);
        $this->setIfExists('deviceNumber', $data ?? [], null);
        $this->setIfExists('posNumber', $data ?? [], null);
        $this->setIfExists('apiVersion', $data ?? [], null);
        $this->setIfExists('businessEntity', $data ?? [], null);
        $this->setIfExists('shopOwning', $data ?? [], null);
        $this->setIfExists('shopBizType', $data ?? [], null);
        $this->setIfExists('businessDocs', $data ?? [], null);
        $this->setIfExists('businessEndDate', $data ?? [], null);
        $this->setIfExists('taxNo', $data ?? [], null);
        $this->setIfExists('taxAddress', $data ?? [], null);
        $this->setIfExists('brandName', $data ?? [], null);
        $this->setIfExists('directorPics', $data ?? [], null);
        $this->setIfExists('nonDirectorPics', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['shopId'] === null) {
            $invalidProperties[] = "'shopId' can't be null";
        }
        if ($this->container['merchantId'] === null) {
            $invalidProperties[] = "'merchantId' can't be null";
        }
        if ((mb_strlen($this->container['merchantId']) > 21)) {
            $invalidProperties[] = "invalid value for 'merchantId', the character length must be smaller than or equal to 21.";
        }

        if ($this->container['shopIdType'] === null) {
            $invalidProperties[] = "'shopIdType' can't be null";
        }
        $allowedValues = $this->getShopIdTypeAllowableValues();
        if (!is_null($this->container['shopIdType']) && !in_array($this->container['shopIdType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shopIdType', must be one of '%s'",
                $this->container['shopIdType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['mainName']) && (mb_strlen($this->container['mainName']) > 256)) {
            $invalidProperties[] = "invalid value for 'mainName', the character length must be smaller than or equal to 256.";
        }

        if ($this->container['shopAddress'] === null) {
            $invalidProperties[] = "'shopAddress' can't be null";
        }
        if (!is_null($this->container['shopDesc']) && (mb_strlen($this->container['shopDesc']) > 1024)) {
            $invalidProperties[] = "invalid value for 'shopDesc', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['newExternalShopId']) && (mb_strlen($this->container['newExternalShopId']) > 64)) {
            $invalidProperties[] = "invalid value for 'newExternalShopId', the character length must be smaller than or equal to 64.";
        }

        $allowedValues = $this->getSizeTypeAllowableValues();
        if (!is_null($this->container['sizeType']) && !in_array($this->container['sizeType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sizeType', must be one of '%s'",
                $this->container['sizeType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ln']) && (mb_strlen($this->container['ln']) > 10)) {
            $invalidProperties[] = "invalid value for 'ln', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['lat']) && (mb_strlen($this->container['lat']) > 10)) {
            $invalidProperties[] = "invalid value for 'lat', the character length must be smaller than or equal to 10.";
        }

        $allowedValues = $this->getLoyaltyAllowableValues();
        if (!is_null($this->container['loyalty']) && !in_array($this->container['loyalty'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'loyalty', must be one of '%s'",
                $this->container['loyalty'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOwnerIdTypeAllowableValues();
        if (!is_null($this->container['ownerIdType']) && !in_array($this->container['ownerIdType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ownerIdType', must be one of '%s'",
                $this->container['ownerIdType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['apiVersion']) && (mb_strlen($this->container['apiVersion']) > 8)) {
            $invalidProperties[] = "invalid value for 'apiVersion', the character length must be smaller than or equal to 8.";
        }

        $allowedValues = $this->getBusinessEntityAllowableValues();
        if (!is_null($this->container['businessEntity']) && !in_array($this->container['businessEntity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'businessEntity', must be one of '%s'",
                $this->container['businessEntity'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getShopOwningAllowableValues();
        if (!is_null($this->container['shopOwning']) && !in_array($this->container['shopOwning'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shopOwning', must be one of '%s'",
                $this->container['shopOwning'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getShopBizTypeAllowableValues();
        if (!is_null($this->container['shopBizType']) && !in_array($this->container['shopBizType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shopBizType', must be one of '%s'",
                $this->container['shopBizType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['businessEndDate']) && (mb_strlen($this->container['businessEndDate']) > 10)) {
            $invalidProperties[] = "invalid value for 'businessEndDate', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['taxNo']) && !preg_match("/^[0-9]{15}$/", $this->container['taxNo'])) {
            $invalidProperties[] = "invalid value for 'taxNo', must be conform to the pattern /^[0-9]{15}$/.";
        }

        if (!is_null($this->container['brandName']) && (mb_strlen($this->container['brandName']) > 256)) {
            $invalidProperties[] = "invalid value for 'brandName', the character length must be smaller than or equal to 256.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shopId
     *
     * @return string
     */
    public function getShopId()
    {
        return $this->container['shopId'];
    }

    /**
     * Sets shopId
     *
     * @param string $shopId Shop identifier. Length depends on shopIdType - INNER_ID (21 max), EXTERNAL_ID (64 max)
     *
     * @return self
     */
    public function setShopId($shopId)
    {
        if (is_null($shopId)) {
            throw new \InvalidArgumentException('non-nullable shopId cannot be null');
        }
        $this->container['shopId'] = $shopId;

        return $this;
    }

    /**
     * Gets merchantId
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchantId'];
    }

    /**
     * Sets merchantId
     *
     * @param string $merchantId Merchant identifier
     *
     * @return self
     */
    public function setMerchantId($merchantId)
    {
        if (is_null($merchantId)) {
            throw new \InvalidArgumentException('non-nullable merchantId cannot be null');
        }
        if ((mb_strlen($merchantId) > 21)) {
            throw new \InvalidArgumentException('invalid length for $merchantId when calling UpdateShopRequest., must be smaller than or equal to 21.');
        }

        $this->container['merchantId'] = $merchantId;

        return $this;
    }

    /**
     * Gets shopIdType
     *
     * @return string
     */
    public function getShopIdType()
    {
        return $this->container['shopIdType'];
    }

    /**
     * Sets shopIdType
     *
     * @param string $shopIdType Shop identifier type
     *
     * @return self
     */
    public function setShopIdType($shopIdType)
    {
        if (is_null($shopIdType)) {
            throw new \InvalidArgumentException('non-nullable shopIdType cannot be null');
        }
        $allowedValues = $this->getShopIdTypeAllowableValues();
        if (!in_array($shopIdType, $allowedValues, true) && !empty($shopIdType)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shopIdType', must be one of '%s'",
                    $shopIdType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shopIdType'] = $shopIdType;

        return $this;
    }

    /**
     * Gets mainName
     *
     * @return string|null
     */
    public function getMainName()
    {
        return $this->container['mainName'];
    }

    /**
     * Sets mainName
     *
     * @param string|null $mainName Shop name
     *
     * @return self
     */
    public function setMainName($mainName)
    {
        if (is_null($mainName)) {
            throw new \InvalidArgumentException('non-nullable mainName cannot be null');
        }
        if ((mb_strlen($mainName) > 256)) {
            throw new \InvalidArgumentException('invalid length for $mainName when calling UpdateShopRequest., must be smaller than or equal to 256.');
        }

        $this->container['mainName'] = $mainName;

        return $this;
    }

    /**
     * Gets shopAddress
     *
     * @return \Dana\MerchantManagement\v1\Model\AddressInfo
     */
    public function getShopAddress()
    {
        return $this->container['shopAddress'];
    }

    /**
     * Sets shopAddress
     *
     * @param \Dana\MerchantManagement\v1\Model\AddressInfo $shopAddress shopAddress
     *
     * @return self
     */
    public function setShopAddress($shopAddress)
    {
        if (is_null($shopAddress)) {
            throw new \InvalidArgumentException('non-nullable shopAddress cannot be null');
        }
        $this->container['shopAddress'] = $shopAddress;

        return $this;
    }

    /**
     * Gets shopDesc
     *
     * @return string|null
     */
    public function getShopDesc()
    {
        return $this->container['shopDesc'];
    }

    /**
     * Sets shopDesc
     *
     * @param string|null $shopDesc Shop description
     *
     * @return self
     */
    public function setShopDesc($shopDesc)
    {
        if (is_null($shopDesc)) {
            throw new \InvalidArgumentException('non-nullable shopDesc cannot be null');
        }
        if ((mb_strlen($shopDesc) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $shopDesc when calling UpdateShopRequest., must be smaller than or equal to 1024.');
        }

        $this->container['shopDesc'] = $shopDesc;

        return $this;
    }

    /**
     * Gets newExternalShopId
     *
     * @return string|null
     */
    public function getNewExternalShopId()
    {
        return $this->container['newExternalShopId'];
    }

    /**
     * Sets newExternalShopId
     *
     * @param string|null $newExternalShopId New external shop identifier
     *
     * @return self
     */
    public function setNewExternalShopId($newExternalShopId)
    {
        if (is_null($newExternalShopId)) {
            throw new \InvalidArgumentException('non-nullable newExternalShopId cannot be null');
        }
        if ((mb_strlen($newExternalShopId) > 64)) {
            throw new \InvalidArgumentException('invalid length for $newExternalShopId when calling UpdateShopRequest., must be smaller than or equal to 64.');
        }

        $this->container['newExternalShopId'] = $newExternalShopId;

        return $this;
    }

    /**
     * Gets mccCodes
     *
     * @return string[]|null
     */
    public function getMccCodes()
    {
        return $this->container['mccCodes'];
    }

    /**
     * Sets mccCodes
     *
     * @param string[]|null $mccCodes Merchant category code
     *
     * @return self
     */
    public function setMccCodes($mccCodes)
    {
        if (is_null($mccCodes)) {
            throw new \InvalidArgumentException('non-nullable mccCodes cannot be null');
        }
        $this->container['mccCodes'] = $mccCodes;

        return $this;
    }

    /**
     * Gets logoUrlMap
     *
     * @return array<string,string>|null
     */
    public function getLogoUrlMap()
    {
        return $this->container['logoUrlMap'];
    }

    /**
     * Sets logoUrlMap
     *
     * @param array<string,string>|null $logoUrlMap Logo URL map with base64 encoded images. Keys can be LOGO, PC_LOGO, MOBILE_LOGO
     *
     * @return self
     */
    public function setLogoUrlMap($logoUrlMap)
    {
        if (is_null($logoUrlMap)) {
            throw new \InvalidArgumentException('non-nullable logoUrlMap cannot be null');
        }
        $this->container['logoUrlMap'] = $logoUrlMap;

        return $this;
    }

    /**
     * Gets extInfo
     *
     * @return array<string,mixed>|null
     */
    public function getExtInfo()
    {
        return $this->container['extInfo'];
    }

    /**
     * Sets extInfo
     *
     * @param array<string,mixed>|null $extInfo Extend information
     *
     * @return self
     */
    public function setExtInfo($extInfo)
    {
        if (is_null($extInfo)) {
            throw new \InvalidArgumentException('non-nullable extInfo cannot be null');
        }


        $this->container['extInfo'] = $extInfo;

        return $this;
    }

    /**
     * Gets sizeType
     *
     * @return string|null
     */
    public function getSizeType()
    {
        return $this->container['sizeType'];
    }

    /**
     * Sets sizeType
     *
     * @param string|null $sizeType Size type
     *
     * @return self
     */
    public function setSizeType($sizeType)
    {
        if (is_null($sizeType)) {
            throw new \InvalidArgumentException('non-nullable sizeType cannot be null');
        }
        $allowedValues = $this->getSizeTypeAllowableValues();
        if (!in_array($sizeType, $allowedValues, true) && !empty($sizeType)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sizeType', must be one of '%s'",
                    $sizeType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sizeType'] = $sizeType;

        return $this;
    }

    /**
     * Gets ln
     *
     * @return string|null
     */
    public function getLn()
    {
        return $this->container['ln'];
    }

    /**
     * Sets ln
     *
     * @param string|null $ln Longitude of shop's location
     *
     * @return self
     */
    public function setLn($ln)
    {
        if (is_null($ln)) {
            throw new \InvalidArgumentException('non-nullable ln cannot be null');
        }
        if ((mb_strlen($ln) > 10)) {
            throw new \InvalidArgumentException('invalid length for $ln when calling UpdateShopRequest., must be smaller than or equal to 10.');
        }

        $this->container['ln'] = $ln;

        return $this;
    }

    /**
     * Gets lat
     *
     * @return string|null
     */
    public function getLat()
    {
        return $this->container['lat'];
    }

    /**
     * Sets lat
     *
     * @param string|null $lat Latitude of shop's location
     *
     * @return self
     */
    public function setLat($lat)
    {
        if (is_null($lat)) {
            throw new \InvalidArgumentException('non-nullable lat cannot be null');
        }
        if ((mb_strlen($lat) > 10)) {
            throw new \InvalidArgumentException('invalid length for $lat when calling UpdateShopRequest., must be smaller than or equal to 10.');
        }

        $this->container['lat'] = $lat;

        return $this;
    }

    /**
     * Gets loyalty
     *
     * @return string|null
     */
    public function getLoyalty()
    {
        return $this->container['loyalty'];
    }

    /**
     * Sets loyalty
     *
     * @param string|null $loyalty Flag for loyalty category
     *
     * @return self
     */
    public function setLoyalty($loyalty)
    {
        if (is_null($loyalty)) {
            throw new \InvalidArgumentException('non-nullable loyalty cannot be null');
        }
        $allowedValues = $this->getLoyaltyAllowableValues();
        if (!in_array($loyalty, $allowedValues, true) && !empty($loyalty)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'loyalty', must be one of '%s'",
                    $loyalty,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['loyalty'] = $loyalty;

        return $this;
    }

    /**
     * Gets ownerAddress
     *
     * @return \Dana\MerchantManagement\v1\Model\AddressInfo|null
     */
    public function getOwnerAddress()
    {
        return $this->container['ownerAddress'];
    }

    /**
     * Sets ownerAddress
     *
     * @param \Dana\MerchantManagement\v1\Model\AddressInfo|null $ownerAddress ownerAddress
     *
     * @return self
     */
    public function setOwnerAddress($ownerAddress)
    {
        if (is_null($ownerAddress)) {
            throw new \InvalidArgumentException('non-nullable ownerAddress cannot be null');
        }
        $this->container['ownerAddress'] = $ownerAddress;

        return $this;
    }

    /**
     * Gets ownerName
     *
     * @return \Dana\MerchantManagement\v1\Model\UserName|null
     */
    public function getOwnerName()
    {
        return $this->container['ownerName'];
    }

    /**
     * Sets ownerName
     *
     * @param \Dana\MerchantManagement\v1\Model\UserName|null $ownerName ownerName
     *
     * @return self
     */
    public function setOwnerName($ownerName)
    {
        if (is_null($ownerName)) {
            throw new \InvalidArgumentException('non-nullable ownerName cannot be null');
        }
        $this->container['ownerName'] = $ownerName;

        return $this;
    }

    /**
     * Gets ownerPhoneNumber
     *
     * @return \Dana\MerchantManagement\v1\Model\MobileNoInfo|null
     */
    public function getOwnerPhoneNumber()
    {
        return $this->container['ownerPhoneNumber'];
    }

    /**
     * Sets ownerPhoneNumber
     *
     * @param \Dana\MerchantManagement\v1\Model\MobileNoInfo|null $ownerPhoneNumber ownerPhoneNumber
     *
     * @return self
     */
    public function setOwnerPhoneNumber($ownerPhoneNumber)
    {
        if (is_null($ownerPhoneNumber)) {
            throw new \InvalidArgumentException('non-nullable ownerPhoneNumber cannot be null');
        }
        $this->container['ownerPhoneNumber'] = $ownerPhoneNumber;

        return $this;
    }

    /**
     * Gets ownerIdType
     *
     * @return string|null
     */
    public function getOwnerIdType()
    {
        return $this->container['ownerIdType'];
    }

    /**
     * Sets ownerIdType
     *
     * @param string|null $ownerIdType Owner identifier type
     *
     * @return self
     */
    public function setOwnerIdType($ownerIdType)
    {
        if (is_null($ownerIdType)) {
            throw new \InvalidArgumentException('non-nullable ownerIdType cannot be null');
        }
        $allowedValues = $this->getOwnerIdTypeAllowableValues();
        if (!in_array($ownerIdType, $allowedValues, true) && !empty($ownerIdType)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ownerIdType', must be one of '%s'",
                    $ownerIdType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ownerIdType'] = $ownerIdType;

        return $this;
    }

    /**
     * Gets ownerIdNo
     *
     * @return string|null
     */
    public function getOwnerIdNo()
    {
        return $this->container['ownerIdNo'];
    }

    /**
     * Sets ownerIdNo
     *
     * @param string|null $ownerIdNo Owner identifier number. Length depends on ownerIdType - KTP (16), SIM (12-14), Passport (8), NIB (>=13), SIUP (free text)
     *
     * @return self
     */
    public function setOwnerIdNo($ownerIdNo)
    {
        if (is_null($ownerIdNo)) {
            throw new \InvalidArgumentException('non-nullable ownerIdNo cannot be null');
        }
        $this->container['ownerIdNo'] = $ownerIdNo;

        return $this;
    }

    /**
     * Gets deviceNumber
     *
     * @return string|null
     */
    public function getDeviceNumber()
    {
        return $this->container['deviceNumber'];
    }

    /**
     * Sets deviceNumber
     *
     * @param string|null $deviceNumber Device number
     *
     * @return self
     */
    public function setDeviceNumber($deviceNumber)
    {
        if (is_null($deviceNumber)) {
            throw new \InvalidArgumentException('non-nullable deviceNumber cannot be null');
        }
        $this->container['deviceNumber'] = $deviceNumber;

        return $this;
    }

    /**
     * Gets posNumber
     *
     * @return string|null
     */
    public function getPosNumber()
    {
        return $this->container['posNumber'];
    }

    /**
     * Sets posNumber
     *
     * @param string|null $posNumber POS number
     *
     * @return self
     */
    public function setPosNumber($posNumber)
    {
        if (is_null($posNumber)) {
            throw new \InvalidArgumentException('non-nullable posNumber cannot be null');
        }
        $this->container['posNumber'] = $posNumber;

        return $this;
    }

    /**
     * Gets apiVersion
     *
     * @return string|null
     */
    public function getApiVersion()
    {
        return $this->container['apiVersion'];
    }

    /**
     * Sets apiVersion
     *
     * @param string|null $apiVersion API version flag. Use > 2 for new attributes
     *
     * @return self
     */
    public function setApiVersion($apiVersion)
    {
        if (is_null($apiVersion)) {
            throw new \InvalidArgumentException('non-nullable apiVersion cannot be null');
        }
        if ((mb_strlen($apiVersion) > 8)) {
            throw new \InvalidArgumentException('invalid length for $apiVersion when calling UpdateShopRequest., must be smaller than or equal to 8.');
        }

        $this->container['apiVersion'] = $apiVersion;

        return $this;
    }

    /**
     * Gets businessEntity
     *
     * @return string|null
     */
    public function getBusinessEntity()
    {
        return $this->container['businessEntity'];
    }

    /**
     * Sets businessEntity
     *
     * @param string|null $businessEntity Business entity type
     *
     * @return self
     */
    public function setBusinessEntity($businessEntity)
    {
        if (is_null($businessEntity)) {
            throw new \InvalidArgumentException('non-nullable businessEntity cannot be null');
        }
        $allowedValues = $this->getBusinessEntityAllowableValues();
        if (!in_array($businessEntity, $allowedValues, true) && !empty($businessEntity)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'businessEntity', must be one of '%s'",
                    $businessEntity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['businessEntity'] = $businessEntity;

        return $this;
    }

    /**
     * Gets shopOwning
     *
     * @return string|null
     */
    public function getShopOwning()
    {
        return $this->container['shopOwning'];
    }

    /**
     * Sets shopOwning
     *
     * @param string|null $shopOwning Shop owning information
     *
     * @return self
     */
    public function setShopOwning($shopOwning)
    {
        if (is_null($shopOwning)) {
            throw new \InvalidArgumentException('non-nullable shopOwning cannot be null');
        }
        $allowedValues = $this->getShopOwningAllowableValues();
        if (!in_array($shopOwning, $allowedValues, true) && !empty($shopOwning)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shopOwning', must be one of '%s'",
                    $shopOwning,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shopOwning'] = $shopOwning;

        return $this;
    }

    /**
     * Gets shopBizType
     *
     * @return string|null
     */
    public function getShopBizType()
    {
        return $this->container['shopBizType'];
    }

    /**
     * Sets shopBizType
     *
     * @param string|null $shopBizType Shop business type
     *
     * @return self
     */
    public function setShopBizType($shopBizType)
    {
        if (is_null($shopBizType)) {
            throw new \InvalidArgumentException('non-nullable shopBizType cannot be null');
        }
        $allowedValues = $this->getShopBizTypeAllowableValues();
        if (!in_array($shopBizType, $allowedValues, true) && !empty($shopBizType)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shopBizType', must be one of '%s'",
                    $shopBizType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shopBizType'] = $shopBizType;

        return $this;
    }

    /**
     * Gets businessDocs
     *
     * @return \Dana\MerchantManagement\v1\Model\BusinessDocs[]|null
     */
    public function getBusinessDocs()
    {
        return $this->container['businessDocs'];
    }

    /**
     * Sets businessDocs
     *
     * @param \Dana\MerchantManagement\v1\Model\BusinessDocs[]|null $businessDocs Business documents. \"individu\" entity can only use KTP and SIM. Other entities can use SIUP and NIB
     *
     * @return self
     */
    public function setBusinessDocs($businessDocs)
    {
        if (is_null($businessDocs)) {
            throw new \InvalidArgumentException('non-nullable businessDocs cannot be null');
        }
        $this->container['businessDocs'] = $businessDocs;

        return $this;
    }

    /**
     * Gets businessEndDate
     *
     * @return string|null
     */
    public function getBusinessEndDate()
    {
        return $this->container['businessEndDate'];
    }

    /**
     * Sets businessEndDate
     *
     * @param string|null $businessEndDate Business end date, in format YYYY-MM-dd
     *
     * @return self
     */
    public function setBusinessEndDate($businessEndDate)
    {
        if (is_null($businessEndDate)) {
            throw new \InvalidArgumentException('non-nullable businessEndDate cannot be null');
        }
        if ((mb_strlen($businessEndDate) > 10)) {
            throw new \InvalidArgumentException('invalid length for $businessEndDate when calling UpdateShopRequest., must be smaller than or equal to 10.');
        }

        $this->container['businessEndDate'] = $businessEndDate;

        return $this;
    }

    /**
     * Gets taxNo
     *
     * @return string|null
     */
    public function getTaxNo()
    {
        return $this->container['taxNo'];
    }

    /**
     * Sets taxNo
     *
     * @param string|null $taxNo Tax number (NPWP). Must be 15 digits
     *
     * @return self
     */
    public function setTaxNo($taxNo)
    {
        if (is_null($taxNo)) {
            throw new \InvalidArgumentException('non-nullable taxNo cannot be null');
        }

        if ((!preg_match("/^[0-9]{15}$/", ObjectSerializer::toString($taxNo)))) {
            throw new \InvalidArgumentException("invalid value for \$taxNo when calling UpdateShopRequest., must conform to the pattern /^[0-9]{15}$/.");
        }

        $this->container['taxNo'] = $taxNo;

        return $this;
    }

    /**
     * Gets taxAddress
     *
     * @return \Dana\MerchantManagement\v1\Model\AddressInfo|null
     */
    public function getTaxAddress()
    {
        return $this->container['taxAddress'];
    }

    /**
     * Sets taxAddress
     *
     * @param \Dana\MerchantManagement\v1\Model\AddressInfo|null $taxAddress taxAddress
     *
     * @return self
     */
    public function setTaxAddress($taxAddress)
    {
        if (is_null($taxAddress)) {
            throw new \InvalidArgumentException('non-nullable taxAddress cannot be null');
        }
        $this->container['taxAddress'] = $taxAddress;

        return $this;
    }

    /**
     * Gets brandName
     *
     * @return string|null
     */
    public function getBrandName()
    {
        return $this->container['brandName'];
    }

    /**
     * Sets brandName
     *
     * @param string|null $brandName Brand name on legal name or tax name
     *
     * @return self
     */
    public function setBrandName($brandName)
    {
        if (is_null($brandName)) {
            throw new \InvalidArgumentException('non-nullable brandName cannot be null');
        }
        if ((mb_strlen($brandName) > 256)) {
            throw new \InvalidArgumentException('invalid length for $brandName when calling UpdateShopRequest., must be smaller than or equal to 256.');
        }

        $this->container['brandName'] = $brandName;

        return $this;
    }

    /**
     * Gets directorPics
     *
     * @return \Dana\MerchantManagement\v1\Model\PicInfo[]|null
     */
    public function getDirectorPics()
    {
        return $this->container['directorPics'];
    }

    /**
     * Sets directorPics
     *
     * @param \Dana\MerchantManagement\v1\Model\PicInfo[]|null $directorPics Director as a PIC of shop
     *
     * @return self
     */
    public function setDirectorPics($directorPics)
    {
        if (is_null($directorPics)) {
            throw new \InvalidArgumentException('non-nullable directorPics cannot be null');
        }
        $this->container['directorPics'] = $directorPics;

        return $this;
    }

    /**
     * Gets nonDirectorPics
     *
     * @return \Dana\MerchantManagement\v1\Model\PicInfo[]|null
     */
    public function getNonDirectorPics()
    {
        return $this->container['nonDirectorPics'];
    }

    /**
     * Sets nonDirectorPics
     *
     * @param \Dana\MerchantManagement\v1\Model\PicInfo[]|null $nonDirectorPics Non director which become an PIC of shop
     *
     * @return self
     */
    public function setNonDirectorPics($nonDirectorPics)
    {
        if (is_null($nonDirectorPics)) {
            throw new \InvalidArgumentException('non-nullable nonDirectorPics cannot be null');
        }
        $this->container['nonDirectorPics'] = $nonDirectorPics;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


