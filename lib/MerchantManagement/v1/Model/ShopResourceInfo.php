<?php
/**
 * ShopResourceInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\MerchantManagement
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Merchant Management API
 *
 * API for merchant management operations in DANA
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\MerchantManagement\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * ShopResourceInfo Class Doc Comment
 *
 * @category Class
 * @package  Dana\MerchantManagement
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShopResourceInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShopResourceInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'merchantId' => 'string',
        'parentDivisionId' => 'string',
        'parentRoleType' => 'string',
        'mainName' => 'string',
        'sizeType' => 'string',
        'shopAddress' => '\Dana\MerchantManagement\v1\Model\AddressInfo',
        'externalShopId' => 'string',
        'logoUrlMap' => 'array<string,string>',
        'extInfo' => 'object',
        'ln' => 'string',
        'lat' => 'string',
        'nmid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'merchantId' => null,
        'parentDivisionId' => null,
        'parentRoleType' => null,
        'mainName' => null,
        'sizeType' => null,
        'shopAddress' => null,
        'externalShopId' => null,
        'logoUrlMap' => null,
        'extInfo' => null,
        'ln' => null,
        'lat' => null,
        'nmid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'merchantId' => false,
        'parentDivisionId' => false,
        'parentRoleType' => false,
        'mainName' => false,
        'sizeType' => false,
        'shopAddress' => false,
        'externalShopId' => false,
        'logoUrlMap' => false,
        'extInfo' => false,
        'ln' => false,
        'lat' => false,
        'nmid' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchantId' => 'merchantId',
        'parentDivisionId' => 'parentDivisionId',
        'parentRoleType' => 'parentRoleType',
        'mainName' => 'mainName',
        'sizeType' => 'sizeType',
        'shopAddress' => 'shopAddress',
        'externalShopId' => 'externalShopId',
        'logoUrlMap' => 'logoUrlMap',
        'extInfo' => 'extInfo',
        'ln' => 'ln',
        'lat' => 'lat',
        'nmid' => 'nmid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchantId' => 'setMerchantId',
        'parentDivisionId' => 'setParentDivisionId',
        'parentRoleType' => 'setParentRoleType',
        'mainName' => 'setMainName',
        'sizeType' => 'setSizeType',
        'shopAddress' => 'setShopAddress',
        'externalShopId' => 'setExternalShopId',
        'logoUrlMap' => 'setLogoUrlMap',
        'extInfo' => 'setExtInfo',
        'ln' => 'setLn',
        'lat' => 'setLat',
        'nmid' => 'setNmid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchantId' => 'getMerchantId',
        'parentDivisionId' => 'getParentDivisionId',
        'parentRoleType' => 'getParentRoleType',
        'mainName' => 'getMainName',
        'sizeType' => 'getSizeType',
        'shopAddress' => 'getShopAddress',
        'externalShopId' => 'getExternalShopId',
        'logoUrlMap' => 'getLogoUrlMap',
        'extInfo' => 'getExtInfo',
        'ln' => 'getLn',
        'lat' => 'getLat',
        'nmid' => 'getNmid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('merchantId', $data ?? [], null);
        $this->setIfExists('parentDivisionId', $data ?? [], null);
        $this->setIfExists('parentRoleType', $data ?? [], null);
        $this->setIfExists('mainName', $data ?? [], null);
        $this->setIfExists('sizeType', $data ?? [], null);
        $this->setIfExists('shopAddress', $data ?? [], null);
        $this->setIfExists('externalShopId', $data ?? [], null);
        $this->setIfExists('logoUrlMap', $data ?? [], null);
        $this->setIfExists('extInfo', $data ?? [], null);
        $this->setIfExists('ln', $data ?? [], null);
        $this->setIfExists('lat', $data ?? [], null);
        $this->setIfExists('nmid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchantId
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchantId'];
    }

    /**
     * Sets merchantId
     *
     * @param string|null $merchantId Merchant identifier
     *
     * @return self
     */
    public function setMerchantId($merchantId)
    {
        if (is_null($merchantId)) {
            throw new \InvalidArgumentException('non-nullable merchantId cannot be null');
        }
        $this->container['merchantId'] = $merchantId;

        return $this;
    }

    /**
     * Gets parentDivisionId
     *
     * @return string|null
     */
    public function getParentDivisionId()
    {
        return $this->container['parentDivisionId'];
    }

    /**
     * Sets parentDivisionId
     *
     * @param string|null $parentDivisionId Parent division identifier
     *
     * @return self
     */
    public function setParentDivisionId($parentDivisionId)
    {
        if (is_null($parentDivisionId)) {
            throw new \InvalidArgumentException('non-nullable parentDivisionId cannot be null');
        }
        $this->container['parentDivisionId'] = $parentDivisionId;

        return $this;
    }

    /**
     * Gets parentRoleType
     *
     * @return string|null
     */
    public function getParentRoleType()
    {
        return $this->container['parentRoleType'];
    }

    /**
     * Sets parentRoleType
     *
     * @param string|null $parentRoleType Parent role type
     *
     * @return self
     */
    public function setParentRoleType($parentRoleType)
    {
        if (is_null($parentRoleType)) {
            throw new \InvalidArgumentException('non-nullable parentRoleType cannot be null');
        }
        $this->container['parentRoleType'] = $parentRoleType;

        return $this;
    }

    /**
     * Gets mainName
     *
     * @return string|null
     */
    public function getMainName()
    {
        return $this->container['mainName'];
    }

    /**
     * Sets mainName
     *
     * @param string|null $mainName Shop name
     *
     * @return self
     */
    public function setMainName($mainName)
    {
        if (is_null($mainName)) {
            throw new \InvalidArgumentException('non-nullable mainName cannot be null');
        }
        $this->container['mainName'] = $mainName;

        return $this;
    }

    /**
     * Gets sizeType
     *
     * @return string|null
     */
    public function getSizeType()
    {
        return $this->container['sizeType'];
    }

    /**
     * Sets sizeType
     *
     * @param string|null $sizeType Size type
     *
     * @return self
     */
    public function setSizeType($sizeType)
    {
        if (is_null($sizeType)) {
            throw new \InvalidArgumentException('non-nullable sizeType cannot be null');
        }
        $this->container['sizeType'] = $sizeType;

        return $this;
    }

    /**
     * Gets shopAddress
     *
     * @return \Dana\MerchantManagement\v1\Model\AddressInfo|null
     */
    public function getShopAddress()
    {
        return $this->container['shopAddress'];
    }

    /**
     * Sets shopAddress
     *
     * @param \Dana\MerchantManagement\v1\Model\AddressInfo|null $shopAddress shopAddress
     *
     * @return self
     */
    public function setShopAddress($shopAddress)
    {
        if (is_null($shopAddress)) {
            throw new \InvalidArgumentException('non-nullable shopAddress cannot be null');
        }
        $this->container['shopAddress'] = $shopAddress;

        return $this;
    }

    /**
     * Gets externalShopId
     *
     * @return string|null
     */
    public function getExternalShopId()
    {
        return $this->container['externalShopId'];
    }

    /**
     * Sets externalShopId
     *
     * @param string|null $externalShopId External shop identifier
     *
     * @return self
     */
    public function setExternalShopId($externalShopId)
    {
        if (is_null($externalShopId)) {
            throw new \InvalidArgumentException('non-nullable externalShopId cannot be null');
        }
        $this->container['externalShopId'] = $externalShopId;

        return $this;
    }

    /**
     * Gets logoUrlMap
     *
     * @return array<string,string>|null
     */
    public function getLogoUrlMap()
    {
        return $this->container['logoUrlMap'];
    }

    /**
     * Sets logoUrlMap
     *
     * @param array<string,string>|null $logoUrlMap Logo URL map with base64 encoded images
     *
     * @return self
     */
    public function setLogoUrlMap($logoUrlMap)
    {
        if (is_null($logoUrlMap)) {
            throw new \InvalidArgumentException('non-nullable logoUrlMap cannot be null');
        }
        $this->container['logoUrlMap'] = $logoUrlMap;

        return $this;
    }

    /**
     * Gets extInfo
     *
     * @return object|null
     */
    public function getExtInfo()
    {
        return $this->container['extInfo'];
    }

    /**
     * Sets extInfo
     *
     * @param object|null $extInfo Extended information
     *
     * @return self
     */
    public function setExtInfo($extInfo)
    {
        if (is_null($extInfo)) {
            throw new \InvalidArgumentException('non-nullable extInfo cannot be null');
        }
        $this->container['extInfo'] = $extInfo;

        return $this;
    }

    /**
     * Gets ln
     *
     * @return string|null
     */
    public function getLn()
    {
        return $this->container['ln'];
    }

    /**
     * Sets ln
     *
     * @param string|null $ln Longitude
     *
     * @return self
     */
    public function setLn($ln)
    {
        if (is_null($ln)) {
            throw new \InvalidArgumentException('non-nullable ln cannot be null');
        }
        $this->container['ln'] = $ln;

        return $this;
    }

    /**
     * Gets lat
     *
     * @return string|null
     */
    public function getLat()
    {
        return $this->container['lat'];
    }

    /**
     * Sets lat
     *
     * @param string|null $lat Latitude
     *
     * @return self
     */
    public function setLat($lat)
    {
        if (is_null($lat)) {
            throw new \InvalidArgumentException('non-nullable lat cannot be null');
        }
        $this->container['lat'] = $lat;

        return $this;
    }

    /**
     * Gets nmid
     *
     * @return string|null
     */
    public function getNmid()
    {
        return $this->container['nmid'];
    }

    /**
     * Sets nmid
     *
     * @param string|null $nmid Network merchant identifier
     *
     * @return self
     */
    public function setNmid($nmid)
    {
        if (is_null($nmid)) {
            throw new \InvalidArgumentException('non-nullable nmid cannot be null');
        }
        $this->container['nmid'] = $nmid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


