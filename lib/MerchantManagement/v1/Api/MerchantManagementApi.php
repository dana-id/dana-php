<?php
/**
 * MerchantManagementApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\MerchantManagement
 * @author   DANA Indonesia
 * @link     https://dashboard.dana.id/
 */

/**
 * Merchant Management API
 *
 * API for merchant management operations in DANA
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\MerchantManagement\v1\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Dana\ApiException;
use Dana\Configuration;
use Dana\HeaderSelector;
use Dana\ObjectSerializer;

/**
 * MerchantManagementApi Class Doc Comment
 *
 * @category Class
 * @package  Dana\MerchantManagement
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MerchantManagementApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createDivision' => [
            'application/json',
        ],
        'createShop' => [
            'application/json',
        ],
        'queryDivision' => [
            'application/json',
        ],
        'queryMerchantResource' => [
            'application/json',
        ],
        'queryShop' => [
            'application/json',
        ],
        'updateDivision' => [
            'application/json',
        ],
        'updateShop' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createDivision
     *
     * Create Division
     *
     * @param  \Dana\MerchantManagement\v1\Model\CreateDivisionRequest $createDivisionRequest createDivisionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDivision'] to see the possible values for this operation
     *
     * @throws \Dana\MerchantManagement\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dana\MerchantManagement\v1\Model\CreateDivisionResponse
     */
    public function createDivision($createDivisionRequest, string $contentType = self::contentTypes['createDivision'][0])
    {
        list($response) = $this->createDivisionWithHttpInfo($createDivisionRequest, $contentType);
        return $response;
    }

    /**
     * Operation createDivisionWithHttpInfo
     *
     * Create Division
     *
     * @param  \Dana\MerchantManagement\v1\Model\CreateDivisionRequest $createDivisionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDivision'] to see the possible values for this operation
     *
     * @throws \Dana\MerchantManagement\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dana\MerchantManagement\v1\Model\CreateDivisionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDivisionWithHttpInfo($createDivisionRequest, string $contentType = self::contentTypes['createDivision'][0])
    {
        $request = $this->createDivisionRequest($createDivisionRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Dana\MerchantManagement\v1\Model\CreateDivisionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dana\MerchantManagement\v1\Model\CreateDivisionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dana\MerchantManagement\v1\Model\CreateDivisionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Dana\MerchantManagement\v1\Model\CreateDivisionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dana\MerchantManagement\v1\Model\CreateDivisionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDivisionAsync
     *
     * Create Division
     *
     * @param  \Dana\MerchantManagement\v1\Model\CreateDivisionRequest $createDivisionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDivision'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDivisionAsync($createDivisionRequest, string $contentType = self::contentTypes['createDivision'][0])
    {
        return $this->createDivisionAsyncWithHttpInfo($createDivisionRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDivisionAsyncWithHttpInfo
     *
     * Create Division
     *
     * @param  \Dana\MerchantManagement\v1\Model\CreateDivisionRequest $createDivisionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDivision'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDivisionAsyncWithHttpInfo($createDivisionRequest, string $contentType = self::contentTypes['createDivision'][0])
    {
        $returnType = '\Dana\MerchantManagement\v1\Model\CreateDivisionResponse';
        $request = $this->createDivisionRequest($createDivisionRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDivision'
     *
     * @param  \Dana\MerchantManagement\v1\Model\CreateDivisionRequest $createDivisionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDivision'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDivisionRequest($createDivisionRequest, string $contentType = self::contentTypes['createDivision'][0])
    {

        // verify the required parameter 'createDivisionRequest' is set
        if ($createDivisionRequest === null || (is_array($createDivisionRequest) && count($createDivisionRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createDivisionRequest when calling createDivision'
            );
        }


        $resourcePath = '/dana/merchant/division/createDivision.htm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createDivisionRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($createDivisionRequest));
            } else {
                $httpBody = $createDivisionRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // Prepare the request body with head and body structure for DANA OpenAPI
        if (isset($createDivisionRequest)) {
            $functionName = 'dana.merchant.division.createDivision';
            $headParams = [];
            
            // Generate head parameters using OpenAPI header utility
            if (method_exists($this->config, 'getApiKey')) {
                $headParams = \Dana\Utils\OpenApiHeader::getOpenApiGeneratedHeaders(
                    $this->config,
                    json_encode($createDivisionRequest),
                    $functionName
                );
            }
            
            // Create the full request structure with head and body
            $requestBody = [
                'request' => [
                    'head' => $headParams,
                    'body' => $createDivisionRequest
                ]
            ];
            
            // Generate signature if private key is available
            $privateKey = $this->config->getApiKeyWithPrefix('PRIVATE_KEY');
            $privateKeyPath = $this->config->getApiKeyWithPrefix('PRIVATE_KEY_PATH');
            $clientKey = $this->config->getApiKeyWithPrefix('X_PARTNER_ID');
            
            if (!empty($privateKey) || !empty($privateKeyPath)) {
                try {
                    $signature = \Dana\Utils\OpenApiHeader::generateOpenApiSignature(
                        json_encode($requestBody['request']),
                        $this->config
                    );
                    $requestBody['signature'] = $signature;
                } catch (\Exception $e) {
                    throw new \InvalidArgumentException('Failed to generate signature: ' . $e->getMessage());
                }
            }
            
            $httpBody = json_encode($requestBody);
            $headers['Content-Type'] = 'application/json';
        }

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createShop
     *
     * Member – Create Shop
     *
     * @param  \Dana\MerchantManagement\v1\Model\CreateShopRequest $createShopRequest createShopRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShop'] to see the possible values for this operation
     *
     * @throws \Dana\MerchantManagement\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dana\MerchantManagement\v1\Model\CreateShopResponse
     */
    public function createShop($createShopRequest, string $contentType = self::contentTypes['createShop'][0])
    {
        list($response) = $this->createShopWithHttpInfo($createShopRequest, $contentType);
        return $response;
    }

    /**
     * Operation createShopWithHttpInfo
     *
     * Member – Create Shop
     *
     * @param  \Dana\MerchantManagement\v1\Model\CreateShopRequest $createShopRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShop'] to see the possible values for this operation
     *
     * @throws \Dana\MerchantManagement\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dana\MerchantManagement\v1\Model\CreateShopResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createShopWithHttpInfo($createShopRequest, string $contentType = self::contentTypes['createShop'][0])
    {
        $request = $this->createShopRequest($createShopRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Dana\MerchantManagement\v1\Model\CreateShopResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dana\MerchantManagement\v1\Model\CreateShopResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dana\MerchantManagement\v1\Model\CreateShopResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Dana\MerchantManagement\v1\Model\CreateShopResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dana\MerchantManagement\v1\Model\CreateShopResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createShopAsync
     *
     * Member – Create Shop
     *
     * @param  \Dana\MerchantManagement\v1\Model\CreateShopRequest $createShopRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShop'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createShopAsync($createShopRequest, string $contentType = self::contentTypes['createShop'][0])
    {
        return $this->createShopAsyncWithHttpInfo($createShopRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createShopAsyncWithHttpInfo
     *
     * Member – Create Shop
     *
     * @param  \Dana\MerchantManagement\v1\Model\CreateShopRequest $createShopRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShop'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createShopAsyncWithHttpInfo($createShopRequest, string $contentType = self::contentTypes['createShop'][0])
    {
        $returnType = '\Dana\MerchantManagement\v1\Model\CreateShopResponse';
        $request = $this->createShopRequest($createShopRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createShop'
     *
     * @param  \Dana\MerchantManagement\v1\Model\CreateShopRequest $createShopRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShop'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createShopRequest($createShopRequest, string $contentType = self::contentTypes['createShop'][0])
    {

        // verify the required parameter 'createShopRequest' is set
        if ($createShopRequest === null || (is_array($createShopRequest) && count($createShopRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createShopRequest when calling createShop'
            );
        }


        $resourcePath = '/dana/merchant/shop/createShop.htm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createShopRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($createShopRequest));
            } else {
                $httpBody = $createShopRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // Prepare the request body with head and body structure for DANA OpenAPI
        if (isset($createShopRequest)) {
            $functionName = 'dana.merchant.shop.createShop';
            $headParams = [];
            
            // Generate head parameters using OpenAPI header utility
            if (method_exists($this->config, 'getApiKey')) {
                $headParams = \Dana\Utils\OpenApiHeader::getOpenApiGeneratedHeaders(
                    $this->config,
                    json_encode($createShopRequest),
                    $functionName
                );
            }
            
            // Create the full request structure with head and body
            $requestBody = [
                'request' => [
                    'head' => $headParams,
                    'body' => $createShopRequest
                ]
            ];
            
            // Generate signature if private key is available
            $privateKey = $this->config->getApiKeyWithPrefix('PRIVATE_KEY');
            $privateKeyPath = $this->config->getApiKeyWithPrefix('PRIVATE_KEY_PATH');
            $clientKey = $this->config->getApiKeyWithPrefix('X_PARTNER_ID');
            
            if (!empty($privateKey) || !empty($privateKeyPath)) {
                try {
                    $signature = \Dana\Utils\OpenApiHeader::generateOpenApiSignature(
                        json_encode($requestBody['request']),
                        $this->config
                    );
                    $requestBody['signature'] = $signature;
                } catch (\Exception $e) {
                    throw new \InvalidArgumentException('Failed to generate signature: ' . $e->getMessage());
                }
            }
            
            $httpBody = json_encode($requestBody);
            $headers['Content-Type'] = 'application/json';
        }

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryDivision
     *
     * Query Division
     *
     * @param  \Dana\MerchantManagement\v1\Model\QueryDivisionRequest $queryDivisionRequest queryDivisionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryDivision'] to see the possible values for this operation
     *
     * @throws \Dana\MerchantManagement\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dana\MerchantManagement\v1\Model\QueryDivisionResponse
     */
    public function queryDivision($queryDivisionRequest, string $contentType = self::contentTypes['queryDivision'][0])
    {
        list($response) = $this->queryDivisionWithHttpInfo($queryDivisionRequest, $contentType);
        return $response;
    }

    /**
     * Operation queryDivisionWithHttpInfo
     *
     * Query Division
     *
     * @param  \Dana\MerchantManagement\v1\Model\QueryDivisionRequest $queryDivisionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryDivision'] to see the possible values for this operation
     *
     * @throws \Dana\MerchantManagement\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dana\MerchantManagement\v1\Model\QueryDivisionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryDivisionWithHttpInfo($queryDivisionRequest, string $contentType = self::contentTypes['queryDivision'][0])
    {
        $request = $this->queryDivisionRequest($queryDivisionRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Dana\MerchantManagement\v1\Model\QueryDivisionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dana\MerchantManagement\v1\Model\QueryDivisionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dana\MerchantManagement\v1\Model\QueryDivisionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Dana\MerchantManagement\v1\Model\QueryDivisionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dana\MerchantManagement\v1\Model\QueryDivisionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryDivisionAsync
     *
     * Query Division
     *
     * @param  \Dana\MerchantManagement\v1\Model\QueryDivisionRequest $queryDivisionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryDivision'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryDivisionAsync($queryDivisionRequest, string $contentType = self::contentTypes['queryDivision'][0])
    {
        return $this->queryDivisionAsyncWithHttpInfo($queryDivisionRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryDivisionAsyncWithHttpInfo
     *
     * Query Division
     *
     * @param  \Dana\MerchantManagement\v1\Model\QueryDivisionRequest $queryDivisionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryDivision'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryDivisionAsyncWithHttpInfo($queryDivisionRequest, string $contentType = self::contentTypes['queryDivision'][0])
    {
        $returnType = '\Dana\MerchantManagement\v1\Model\QueryDivisionResponse';
        $request = $this->queryDivisionRequest($queryDivisionRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryDivision'
     *
     * @param  \Dana\MerchantManagement\v1\Model\QueryDivisionRequest $queryDivisionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryDivision'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function queryDivisionRequest($queryDivisionRequest, string $contentType = self::contentTypes['queryDivision'][0])
    {

        // verify the required parameter 'queryDivisionRequest' is set
        if ($queryDivisionRequest === null || (is_array($queryDivisionRequest) && count($queryDivisionRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $queryDivisionRequest when calling queryDivision'
            );
        }


        $resourcePath = '/dana/merchant/division/queryDivision.htm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($queryDivisionRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($queryDivisionRequest));
            } else {
                $httpBody = $queryDivisionRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // Prepare the request body with head and body structure for DANA OpenAPI
        if (isset($queryDivisionRequest)) {
            $functionName = 'dana.merchant.division.queryDivision';
            $headParams = [];
            
            // Generate head parameters using OpenAPI header utility
            if (method_exists($this->config, 'getApiKey')) {
                $headParams = \Dana\Utils\OpenApiHeader::getOpenApiGeneratedHeaders(
                    $this->config,
                    json_encode($queryDivisionRequest),
                    $functionName
                );
            }
            
            // Create the full request structure with head and body
            $requestBody = [
                'request' => [
                    'head' => $headParams,
                    'body' => $queryDivisionRequest
                ]
            ];
            
            // Generate signature if private key is available
            $privateKey = $this->config->getApiKeyWithPrefix('PRIVATE_KEY');
            $privateKeyPath = $this->config->getApiKeyWithPrefix('PRIVATE_KEY_PATH');
            $clientKey = $this->config->getApiKeyWithPrefix('X_PARTNER_ID');
            
            if (!empty($privateKey) || !empty($privateKeyPath)) {
                try {
                    $signature = \Dana\Utils\OpenApiHeader::generateOpenApiSignature(
                        json_encode($requestBody['request']),
                        $this->config
                    );
                    $requestBody['signature'] = $signature;
                } catch (\Exception $e) {
                    throw new \InvalidArgumentException('Failed to generate signature: ' . $e->getMessage());
                }
            }
            
            $httpBody = json_encode($requestBody);
            $headers['Content-Type'] = 'application/json';
        }

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryMerchantResource
     *
     * Member – Merchant Open API Check Disbursement Account
     *
     * @param  \Dana\MerchantManagement\v1\Model\QueryMerchantResourceRequest $queryMerchantResourceRequest queryMerchantResourceRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryMerchantResource'] to see the possible values for this operation
     *
     * @throws \Dana\MerchantManagement\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dana\MerchantManagement\v1\Model\QueryMerchantResourceResponse
     */
    public function queryMerchantResource($queryMerchantResourceRequest, string $contentType = self::contentTypes['queryMerchantResource'][0])
    {
        list($response) = $this->queryMerchantResourceWithHttpInfo($queryMerchantResourceRequest, $contentType);
        return $response;
    }

    /**
     * Operation queryMerchantResourceWithHttpInfo
     *
     * Member – Merchant Open API Check Disbursement Account
     *
     * @param  \Dana\MerchantManagement\v1\Model\QueryMerchantResourceRequest $queryMerchantResourceRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryMerchantResource'] to see the possible values for this operation
     *
     * @throws \Dana\MerchantManagement\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dana\MerchantManagement\v1\Model\QueryMerchantResourceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryMerchantResourceWithHttpInfo($queryMerchantResourceRequest, string $contentType = self::contentTypes['queryMerchantResource'][0])
    {
        $request = $this->queryMerchantResourceRequest($queryMerchantResourceRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Dana\MerchantManagement\v1\Model\QueryMerchantResourceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dana\MerchantManagement\v1\Model\QueryMerchantResourceResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dana\MerchantManagement\v1\Model\QueryMerchantResourceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Dana\MerchantManagement\v1\Model\QueryMerchantResourceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dana\MerchantManagement\v1\Model\QueryMerchantResourceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryMerchantResourceAsync
     *
     * Member – Merchant Open API Check Disbursement Account
     *
     * @param  \Dana\MerchantManagement\v1\Model\QueryMerchantResourceRequest $queryMerchantResourceRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryMerchantResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryMerchantResourceAsync($queryMerchantResourceRequest, string $contentType = self::contentTypes['queryMerchantResource'][0])
    {
        return $this->queryMerchantResourceAsyncWithHttpInfo($queryMerchantResourceRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryMerchantResourceAsyncWithHttpInfo
     *
     * Member – Merchant Open API Check Disbursement Account
     *
     * @param  \Dana\MerchantManagement\v1\Model\QueryMerchantResourceRequest $queryMerchantResourceRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryMerchantResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryMerchantResourceAsyncWithHttpInfo($queryMerchantResourceRequest, string $contentType = self::contentTypes['queryMerchantResource'][0])
    {
        $returnType = '\Dana\MerchantManagement\v1\Model\QueryMerchantResourceResponse';
        $request = $this->queryMerchantResourceRequest($queryMerchantResourceRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryMerchantResource'
     *
     * @param  \Dana\MerchantManagement\v1\Model\QueryMerchantResourceRequest $queryMerchantResourceRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryMerchantResource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function queryMerchantResourceRequest($queryMerchantResourceRequest, string $contentType = self::contentTypes['queryMerchantResource'][0])
    {

        // verify the required parameter 'queryMerchantResourceRequest' is set
        if ($queryMerchantResourceRequest === null || (is_array($queryMerchantResourceRequest) && count($queryMerchantResourceRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $queryMerchantResourceRequest when calling queryMerchantResource'
            );
        }


        $resourcePath = '/dana/merchant/queryMerchantResource.htm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($queryMerchantResourceRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($queryMerchantResourceRequest));
            } else {
                $httpBody = $queryMerchantResourceRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // Prepare the request body with head and body structure for DANA OpenAPI
        if (isset($queryMerchantResourceRequest)) {
            $functionName = 'dana.merchant.queryMerchantResource';
            $headParams = [];
            
            // Generate head parameters using OpenAPI header utility
            if (method_exists($this->config, 'getApiKey')) {
                $headParams = \Dana\Utils\OpenApiHeader::getOpenApiGeneratedHeaders(
                    $this->config,
                    json_encode($queryMerchantResourceRequest),
                    $functionName
                );
            }
            
            // Create the full request structure with head and body
            $requestBody = [
                'request' => [
                    'head' => $headParams,
                    'body' => $queryMerchantResourceRequest
                ]
            ];
            
            // Generate signature if private key is available
            $privateKey = $this->config->getApiKeyWithPrefix('PRIVATE_KEY');
            $privateKeyPath = $this->config->getApiKeyWithPrefix('PRIVATE_KEY_PATH');
            $clientKey = $this->config->getApiKeyWithPrefix('X_PARTNER_ID');
            
            if (!empty($privateKey) || !empty($privateKeyPath)) {
                try {
                    $signature = \Dana\Utils\OpenApiHeader::generateOpenApiSignature(
                        json_encode($requestBody['request']),
                        $this->config
                    );
                    $requestBody['signature'] = $signature;
                } catch (\Exception $e) {
                    throw new \InvalidArgumentException('Failed to generate signature: ' . $e->getMessage());
                }
            }
            
            $httpBody = json_encode($requestBody);
            $headers['Content-Type'] = 'application/json';
        }

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryShop
     *
     * Member – Query Shop
     *
     * @param  \Dana\MerchantManagement\v1\Model\QueryShopRequest $queryShopRequest queryShopRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryShop'] to see the possible values for this operation
     *
     * @throws \Dana\MerchantManagement\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dana\MerchantManagement\v1\Model\QueryShopResponse
     */
    public function queryShop($queryShopRequest, string $contentType = self::contentTypes['queryShop'][0])
    {
        list($response) = $this->queryShopWithHttpInfo($queryShopRequest, $contentType);
        return $response;
    }

    /**
     * Operation queryShopWithHttpInfo
     *
     * Member – Query Shop
     *
     * @param  \Dana\MerchantManagement\v1\Model\QueryShopRequest $queryShopRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryShop'] to see the possible values for this operation
     *
     * @throws \Dana\MerchantManagement\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dana\MerchantManagement\v1\Model\QueryShopResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryShopWithHttpInfo($queryShopRequest, string $contentType = self::contentTypes['queryShop'][0])
    {
        $request = $this->queryShopRequest($queryShopRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Dana\MerchantManagement\v1\Model\QueryShopResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dana\MerchantManagement\v1\Model\QueryShopResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dana\MerchantManagement\v1\Model\QueryShopResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Dana\MerchantManagement\v1\Model\QueryShopResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dana\MerchantManagement\v1\Model\QueryShopResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryShopAsync
     *
     * Member – Query Shop
     *
     * @param  \Dana\MerchantManagement\v1\Model\QueryShopRequest $queryShopRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryShop'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryShopAsync($queryShopRequest, string $contentType = self::contentTypes['queryShop'][0])
    {
        return $this->queryShopAsyncWithHttpInfo($queryShopRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryShopAsyncWithHttpInfo
     *
     * Member – Query Shop
     *
     * @param  \Dana\MerchantManagement\v1\Model\QueryShopRequest $queryShopRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryShop'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryShopAsyncWithHttpInfo($queryShopRequest, string $contentType = self::contentTypes['queryShop'][0])
    {
        $returnType = '\Dana\MerchantManagement\v1\Model\QueryShopResponse';
        $request = $this->queryShopRequest($queryShopRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryShop'
     *
     * @param  \Dana\MerchantManagement\v1\Model\QueryShopRequest $queryShopRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryShop'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function queryShopRequest($queryShopRequest, string $contentType = self::contentTypes['queryShop'][0])
    {

        // verify the required parameter 'queryShopRequest' is set
        if ($queryShopRequest === null || (is_array($queryShopRequest) && count($queryShopRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $queryShopRequest when calling queryShop'
            );
        }


        $resourcePath = '/dana/merchant/shop/queryShop.htm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($queryShopRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($queryShopRequest));
            } else {
                $httpBody = $queryShopRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // Prepare the request body with head and body structure for DANA OpenAPI
        if (isset($queryShopRequest)) {
            $functionName = 'dana.merchant.shop.queryShop';
            $headParams = [];
            
            // Generate head parameters using OpenAPI header utility
            if (method_exists($this->config, 'getApiKey')) {
                $headParams = \Dana\Utils\OpenApiHeader::getOpenApiGeneratedHeaders(
                    $this->config,
                    json_encode($queryShopRequest),
                    $functionName
                );
            }
            
            // Create the full request structure with head and body
            $requestBody = [
                'request' => [
                    'head' => $headParams,
                    'body' => $queryShopRequest
                ]
            ];
            
            // Generate signature if private key is available
            $privateKey = $this->config->getApiKeyWithPrefix('PRIVATE_KEY');
            $privateKeyPath = $this->config->getApiKeyWithPrefix('PRIVATE_KEY_PATH');
            $clientKey = $this->config->getApiKeyWithPrefix('X_PARTNER_ID');
            
            if (!empty($privateKey) || !empty($privateKeyPath)) {
                try {
                    $signature = \Dana\Utils\OpenApiHeader::generateOpenApiSignature(
                        json_encode($requestBody['request']),
                        $this->config
                    );
                    $requestBody['signature'] = $signature;
                } catch (\Exception $e) {
                    throw new \InvalidArgumentException('Failed to generate signature: ' . $e->getMessage());
                }
            }
            
            $httpBody = json_encode($requestBody);
            $headers['Content-Type'] = 'application/json';
        }

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDivision
     *
     * Update Division
     *
     * @param  \Dana\MerchantManagement\v1\Model\UpdateDivisionRequest $updateDivisionRequest updateDivisionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDivision'] to see the possible values for this operation
     *
     * @throws \Dana\MerchantManagement\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dana\MerchantManagement\v1\Model\UpdateDivisionResponse
     */
    public function updateDivision($updateDivisionRequest, string $contentType = self::contentTypes['updateDivision'][0])
    {
        list($response) = $this->updateDivisionWithHttpInfo($updateDivisionRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateDivisionWithHttpInfo
     *
     * Update Division
     *
     * @param  \Dana\MerchantManagement\v1\Model\UpdateDivisionRequest $updateDivisionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDivision'] to see the possible values for this operation
     *
     * @throws \Dana\MerchantManagement\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dana\MerchantManagement\v1\Model\UpdateDivisionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDivisionWithHttpInfo($updateDivisionRequest, string $contentType = self::contentTypes['updateDivision'][0])
    {
        $request = $this->updateDivisionRequest($updateDivisionRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Dana\MerchantManagement\v1\Model\UpdateDivisionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dana\MerchantManagement\v1\Model\UpdateDivisionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dana\MerchantManagement\v1\Model\UpdateDivisionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Dana\MerchantManagement\v1\Model\UpdateDivisionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dana\MerchantManagement\v1\Model\UpdateDivisionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDivisionAsync
     *
     * Update Division
     *
     * @param  \Dana\MerchantManagement\v1\Model\UpdateDivisionRequest $updateDivisionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDivision'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDivisionAsync($updateDivisionRequest, string $contentType = self::contentTypes['updateDivision'][0])
    {
        return $this->updateDivisionAsyncWithHttpInfo($updateDivisionRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDivisionAsyncWithHttpInfo
     *
     * Update Division
     *
     * @param  \Dana\MerchantManagement\v1\Model\UpdateDivisionRequest $updateDivisionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDivision'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDivisionAsyncWithHttpInfo($updateDivisionRequest, string $contentType = self::contentTypes['updateDivision'][0])
    {
        $returnType = '\Dana\MerchantManagement\v1\Model\UpdateDivisionResponse';
        $request = $this->updateDivisionRequest($updateDivisionRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDivision'
     *
     * @param  \Dana\MerchantManagement\v1\Model\UpdateDivisionRequest $updateDivisionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDivision'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateDivisionRequest($updateDivisionRequest, string $contentType = self::contentTypes['updateDivision'][0])
    {

        // verify the required parameter 'updateDivisionRequest' is set
        if ($updateDivisionRequest === null || (is_array($updateDivisionRequest) && count($updateDivisionRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $updateDivisionRequest when calling updateDivision'
            );
        }


        $resourcePath = '/dana/merchant/division/updateDivision.htm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($updateDivisionRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($updateDivisionRequest));
            } else {
                $httpBody = $updateDivisionRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // Prepare the request body with head and body structure for DANA OpenAPI
        if (isset($updateDivisionRequest)) {
            $functionName = 'dana.merchant.division.updateDivision';
            $headParams = [];
            
            // Generate head parameters using OpenAPI header utility
            if (method_exists($this->config, 'getApiKey')) {
                $headParams = \Dana\Utils\OpenApiHeader::getOpenApiGeneratedHeaders(
                    $this->config,
                    json_encode($updateDivisionRequest),
                    $functionName
                );
            }
            
            // Create the full request structure with head and body
            $requestBody = [
                'request' => [
                    'head' => $headParams,
                    'body' => $updateDivisionRequest
                ]
            ];
            
            // Generate signature if private key is available
            $privateKey = $this->config->getApiKeyWithPrefix('PRIVATE_KEY');
            $privateKeyPath = $this->config->getApiKeyWithPrefix('PRIVATE_KEY_PATH');
            $clientKey = $this->config->getApiKeyWithPrefix('X_PARTNER_ID');
            
            if (!empty($privateKey) || !empty($privateKeyPath)) {
                try {
                    $signature = \Dana\Utils\OpenApiHeader::generateOpenApiSignature(
                        json_encode($requestBody['request']),
                        $this->config
                    );
                    $requestBody['signature'] = $signature;
                } catch (\Exception $e) {
                    throw new \InvalidArgumentException('Failed to generate signature: ' . $e->getMessage());
                }
            }
            
            $httpBody = json_encode($requestBody);
            $headers['Content-Type'] = 'application/json';
        }

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateShop
     *
     * Update Shop
     *
     * @param  \Dana\MerchantManagement\v1\Model\UpdateShopRequest $updateShopRequest updateShopRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateShop'] to see the possible values for this operation
     *
     * @throws \Dana\MerchantManagement\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dana\MerchantManagement\v1\Model\UpdateShopResponse
     */
    public function updateShop($updateShopRequest, string $contentType = self::contentTypes['updateShop'][0])
    {
        list($response) = $this->updateShopWithHttpInfo($updateShopRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateShopWithHttpInfo
     *
     * Update Shop
     *
     * @param  \Dana\MerchantManagement\v1\Model\UpdateShopRequest $updateShopRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateShop'] to see the possible values for this operation
     *
     * @throws \Dana\MerchantManagement\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dana\MerchantManagement\v1\Model\UpdateShopResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateShopWithHttpInfo($updateShopRequest, string $contentType = self::contentTypes['updateShop'][0])
    {
        $request = $this->updateShopRequest($updateShopRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Dana\MerchantManagement\v1\Model\UpdateShopResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dana\MerchantManagement\v1\Model\UpdateShopResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dana\MerchantManagement\v1\Model\UpdateShopResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Dana\MerchantManagement\v1\Model\UpdateShopResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dana\MerchantManagement\v1\Model\UpdateShopResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateShopAsync
     *
     * Update Shop
     *
     * @param  \Dana\MerchantManagement\v1\Model\UpdateShopRequest $updateShopRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateShop'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateShopAsync($updateShopRequest, string $contentType = self::contentTypes['updateShop'][0])
    {
        return $this->updateShopAsyncWithHttpInfo($updateShopRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateShopAsyncWithHttpInfo
     *
     * Update Shop
     *
     * @param  \Dana\MerchantManagement\v1\Model\UpdateShopRequest $updateShopRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateShop'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateShopAsyncWithHttpInfo($updateShopRequest, string $contentType = self::contentTypes['updateShop'][0])
    {
        $returnType = '\Dana\MerchantManagement\v1\Model\UpdateShopResponse';
        $request = $this->updateShopRequest($updateShopRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateShop'
     *
     * @param  \Dana\MerchantManagement\v1\Model\UpdateShopRequest $updateShopRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateShop'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateShopRequest($updateShopRequest, string $contentType = self::contentTypes['updateShop'][0])
    {

        // verify the required parameter 'updateShopRequest' is set
        if ($updateShopRequest === null || (is_array($updateShopRequest) && count($updateShopRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $updateShopRequest when calling updateShop'
            );
        }


        $resourcePath = '/dana/merchant/shop/updateShop.htm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($updateShopRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($updateShopRequest));
            } else {
                $httpBody = $updateShopRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // Prepare the request body with head and body structure for DANA OpenAPI
        if (isset($updateShopRequest)) {
            $functionName = 'dana.merchant.shop.updateShop';
            $headParams = [];
            
            // Generate head parameters using OpenAPI header utility
            if (method_exists($this->config, 'getApiKey')) {
                $headParams = \Dana\Utils\OpenApiHeader::getOpenApiGeneratedHeaders(
                    $this->config,
                    json_encode($updateShopRequest),
                    $functionName
                );
            }
            
            // Create the full request structure with head and body
            $requestBody = [
                'request' => [
                    'head' => $headParams,
                    'body' => $updateShopRequest
                ]
            ];
            
            // Generate signature if private key is available
            $privateKey = $this->config->getApiKeyWithPrefix('PRIVATE_KEY');
            $privateKeyPath = $this->config->getApiKeyWithPrefix('PRIVATE_KEY_PATH');
            $clientKey = $this->config->getApiKeyWithPrefix('X_PARTNER_ID');
            
            if (!empty($privateKey) || !empty($privateKeyPath)) {
                try {
                    $signature = \Dana\Utils\OpenApiHeader::generateOpenApiSignature(
                        json_encode($requestBody['request']),
                        $this->config
                    );
                    $requestBody['signature'] = $signature;
                } catch (\Exception $e) {
                    throw new \InvalidArgumentException('Failed to generate signature: ' . $e->getMessage());
                }
            }
            
            $httpBody = json_encode($requestBody);
            $headers['Content-Type'] = 'application/json';
        }

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
