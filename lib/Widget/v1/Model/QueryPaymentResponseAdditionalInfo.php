<?php
/**
 * QueryPaymentResponseAdditionalInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\Widget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Widget API
 *
 * API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\Widget\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * QueryPaymentResponseAdditionalInfo Class Doc Comment
 *
 * @category Class
 * @package  Dana\Widget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class QueryPaymentResponseAdditionalInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'QueryPaymentResponseAdditionalInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'merchantId' => 'string',
        'buyer' => '\Dana\Widget\v1\Model\Buyer',
        'seller' => '\Dana\Widget\v1\Model\Seller',
        'amountDetail' => '\Dana\Widget\v1\Model\AmountDetail',
        'timeDetail' => '\Dana\Widget\v1\Model\TimeDetail',
        'goods' => '\Dana\Widget\v1\Model\Goods[]',
        'shippingInfo' => '\Dana\Widget\v1\Model\ShippingInfo[]',
        'orderMemo' => 'string',
        'paymentViews' => '\Dana\Widget\v1\Model\PaymentView[]',
        'extendInfo' => 'string',
        'statusDetail' => '\Dana\Widget\v1\Model\StatusDetail',
        'closeReason' => 'string',
        'virtualAccountInfo' => '\Dana\Widget\v1\Model\VirtualAccountInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'merchantId' => null,
        'buyer' => null,
        'seller' => null,
        'amountDetail' => null,
        'timeDetail' => null,
        'goods' => null,
        'shippingInfo' => null,
        'orderMemo' => null,
        'paymentViews' => null,
        'extendInfo' => null,
        'statusDetail' => null,
        'closeReason' => null,
        'virtualAccountInfo' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'merchantId' => false,
        'buyer' => false,
        'seller' => false,
        'amountDetail' => false,
        'timeDetail' => false,
        'goods' => false,
        'shippingInfo' => false,
        'orderMemo' => false,
        'paymentViews' => false,
        'extendInfo' => false,
        'statusDetail' => false,
        'closeReason' => false,
        'virtualAccountInfo' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchantId' => 'merchantId',
        'buyer' => 'buyer',
        'seller' => 'seller',
        'amountDetail' => 'amountDetail',
        'timeDetail' => 'timeDetail',
        'goods' => 'goods',
        'shippingInfo' => 'shippingInfo',
        'orderMemo' => 'orderMemo',
        'paymentViews' => 'paymentViews',
        'extendInfo' => 'extendInfo',
        'statusDetail' => 'statusDetail',
        'closeReason' => 'closeReason',
        'virtualAccountInfo' => 'virtualAccountInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchantId' => 'setMerchantId',
        'buyer' => 'setBuyer',
        'seller' => 'setSeller',
        'amountDetail' => 'setAmountDetail',
        'timeDetail' => 'setTimeDetail',
        'goods' => 'setGoods',
        'shippingInfo' => 'setShippingInfo',
        'orderMemo' => 'setOrderMemo',
        'paymentViews' => 'setPaymentViews',
        'extendInfo' => 'setExtendInfo',
        'statusDetail' => 'setStatusDetail',
        'closeReason' => 'setCloseReason',
        'virtualAccountInfo' => 'setVirtualAccountInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchantId' => 'getMerchantId',
        'buyer' => 'getBuyer',
        'seller' => 'getSeller',
        'amountDetail' => 'getAmountDetail',
        'timeDetail' => 'getTimeDetail',
        'goods' => 'getGoods',
        'shippingInfo' => 'getShippingInfo',
        'orderMemo' => 'getOrderMemo',
        'paymentViews' => 'getPaymentViews',
        'extendInfo' => 'getExtendInfo',
        'statusDetail' => 'getStatusDetail',
        'closeReason' => 'getCloseReason',
        'virtualAccountInfo' => 'getVirtualAccountInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('merchantId', $data ?? [], null);
        $this->setIfExists('buyer', $data ?? [], null);
        $this->setIfExists('seller', $data ?? [], null);
        $this->setIfExists('amountDetail', $data ?? [], null);
        $this->setIfExists('timeDetail', $data ?? [], null);
        $this->setIfExists('goods', $data ?? [], null);
        $this->setIfExists('shippingInfo', $data ?? [], null);
        $this->setIfExists('orderMemo', $data ?? [], null);
        $this->setIfExists('paymentViews', $data ?? [], null);
        $this->setIfExists('extendInfo', $data ?? [], null);
        $this->setIfExists('statusDetail', $data ?? [], null);
        $this->setIfExists('closeReason', $data ?? [], null);
        $this->setIfExists('virtualAccountInfo', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['merchantId']) && (mb_strlen($this->container['merchantId']) > 64)) {
            $invalidProperties[] = "invalid value for 'merchantId', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['orderMemo']) && (mb_strlen($this->container['orderMemo']) > 64)) {
            $invalidProperties[] = "invalid value for 'orderMemo', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['extendInfo']) && (mb_strlen($this->container['extendInfo']) > 4096)) {
            $invalidProperties[] = "invalid value for 'extendInfo', the character length must be smaller than or equal to 4096.";
        }

        if (!is_null($this->container['closeReason']) && (mb_strlen($this->container['closeReason']) > 128)) {
            $invalidProperties[] = "invalid value for 'closeReason', the character length must be smaller than or equal to 128.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchantId
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchantId'];
    }

    /**
     * Sets merchantId
     *
     * @param string|null $merchantId Merchant identifier
     *
     * @return self
     */
    public function setMerchantId($merchantId)
    {
        if (is_null($merchantId)) {
            throw new \InvalidArgumentException('non-nullable merchantId cannot be null');
        }
        if ((mb_strlen($merchantId) > 64)) {
            throw new \InvalidArgumentException('invalid length for $merchantId when calling QueryPaymentResponseAdditionalInfo., must be smaller than or equal to 64.');
        }

        $this->container['merchantId'] = $merchantId;

        return $this;
    }

    /**
     * Gets buyer
     *
     * @return \Dana\Widget\v1\Model\Buyer|null
     */
    public function getBuyer()
    {
        return $this->container['buyer'];
    }

    /**
     * Sets buyer
     *
     * @param \Dana\Widget\v1\Model\Buyer|null $buyer buyer
     *
     * @return self
     */
    public function setBuyer($buyer)
    {
        if (is_null($buyer)) {
            throw new \InvalidArgumentException('non-nullable buyer cannot be null');
        }
        $this->container['buyer'] = $buyer;

        return $this;
    }

    /**
     * Gets seller
     *
     * @return \Dana\Widget\v1\Model\Seller|null
     */
    public function getSeller()
    {
        return $this->container['seller'];
    }

    /**
     * Sets seller
     *
     * @param \Dana\Widget\v1\Model\Seller|null $seller seller
     *
     * @return self
     */
    public function setSeller($seller)
    {
        if (is_null($seller)) {
            throw new \InvalidArgumentException('non-nullable seller cannot be null');
        }
        $this->container['seller'] = $seller;

        return $this;
    }

    /**
     * Gets amountDetail
     *
     * @return \Dana\Widget\v1\Model\AmountDetail|null
     */
    public function getAmountDetail()
    {
        return $this->container['amountDetail'];
    }

    /**
     * Sets amountDetail
     *
     * @param \Dana\Widget\v1\Model\AmountDetail|null $amountDetail amountDetail
     *
     * @return self
     */
    public function setAmountDetail($amountDetail)
    {
        if (is_null($amountDetail)) {
            throw new \InvalidArgumentException('non-nullable amountDetail cannot be null');
        }
        $this->container['amountDetail'] = $amountDetail;

        return $this;
    }

    /**
     * Gets timeDetail
     *
     * @return \Dana\Widget\v1\Model\TimeDetail|null
     */
    public function getTimeDetail()
    {
        return $this->container['timeDetail'];
    }

    /**
     * Sets timeDetail
     *
     * @param \Dana\Widget\v1\Model\TimeDetail|null $timeDetail timeDetail
     *
     * @return self
     */
    public function setTimeDetail($timeDetail)
    {
        if (is_null($timeDetail)) {
            throw new \InvalidArgumentException('non-nullable timeDetail cannot be null');
        }
        $this->container['timeDetail'] = $timeDetail;

        return $this;
    }

    /**
     * Gets goods
     *
     * @return \Dana\Widget\v1\Model\Goods[]|null
     */
    public function getGoods()
    {
        return $this->container['goods'];
    }

    /**
     * Sets goods
     *
     * @param \Dana\Widget\v1\Model\Goods[]|null $goods Additional information of goods
     *
     * @return self
     */
    public function setGoods($goods)
    {
        if (is_null($goods)) {
            throw new \InvalidArgumentException('non-nullable goods cannot be null');
        }
        $this->container['goods'] = $goods;

        return $this;
    }

    /**
     * Gets shippingInfo
     *
     * @return \Dana\Widget\v1\Model\ShippingInfo[]|null
     */
    public function getShippingInfo()
    {
        return $this->container['shippingInfo'];
    }

    /**
     * Sets shippingInfo
     *
     * @param \Dana\Widget\v1\Model\ShippingInfo[]|null $shippingInfo Additional information of shipping
     *
     * @return self
     */
    public function setShippingInfo($shippingInfo)
    {
        if (is_null($shippingInfo)) {
            throw new \InvalidArgumentException('non-nullable shippingInfo cannot be null');
        }
        $this->container['shippingInfo'] = $shippingInfo;

        return $this;
    }

    /**
     * Gets orderMemo
     *
     * @return string|null
     */
    public function getOrderMemo()
    {
        return $this->container['orderMemo'];
    }

    /**
     * Sets orderMemo
     *
     * @param string|null $orderMemo Additional information of memo
     *
     * @return self
     */
    public function setOrderMemo($orderMemo)
    {
        if (is_null($orderMemo)) {
            throw new \InvalidArgumentException('non-nullable orderMemo cannot be null');
        }
        if ((mb_strlen($orderMemo) > 64)) {
            throw new \InvalidArgumentException('invalid length for $orderMemo when calling QueryPaymentResponseAdditionalInfo., must be smaller than or equal to 64.');
        }

        $this->container['orderMemo'] = $orderMemo;

        return $this;
    }

    /**
     * Gets paymentViews
     *
     * @return \Dana\Widget\v1\Model\PaymentView[]|null
     */
    public function getPaymentViews()
    {
        return $this->container['paymentViews'];
    }

    /**
     * Sets paymentViews
     *
     * @param \Dana\Widget\v1\Model\PaymentView[]|null $paymentViews Additional information of payment views
     *
     * @return self
     */
    public function setPaymentViews($paymentViews)
    {
        if (is_null($paymentViews)) {
            throw new \InvalidArgumentException('non-nullable paymentViews cannot be null');
        }
        $this->container['paymentViews'] = $paymentViews;

        return $this;
    }

    /**
     * Gets extendInfo
     *
     * @return string|null
     */
    public function getExtendInfo()
    {
        return $this->container['extendInfo'];
    }

    /**
     * Sets extendInfo
     *
     * @param string|null $extendInfo Additional information of extend
     *
     * @return self
     */
    public function setExtendInfo($extendInfo)
    {
        if (is_null($extendInfo)) {
            throw new \InvalidArgumentException('non-nullable extendInfo cannot be null');
        }
        if ((mb_strlen($extendInfo) > 4096)) {
            throw new \InvalidArgumentException('invalid length for $extendInfo when calling QueryPaymentResponseAdditionalInfo., must be smaller than or equal to 4096.');
        }

        $this->container['extendInfo'] = $extendInfo;

        return $this;
    }

    /**
     * Gets statusDetail
     *
     * @return \Dana\Widget\v1\Model\StatusDetail|null
     */
    public function getStatusDetail()
    {
        return $this->container['statusDetail'];
    }

    /**
     * Sets statusDetail
     *
     * @param \Dana\Widget\v1\Model\StatusDetail|null $statusDetail statusDetail
     *
     * @return self
     */
    public function setStatusDetail($statusDetail)
    {
        if (is_null($statusDetail)) {
            throw new \InvalidArgumentException('non-nullable statusDetail cannot be null');
        }
        $this->container['statusDetail'] = $statusDetail;

        return $this;
    }

    /**
     * Gets closeReason
     *
     * @return string|null
     */
    public function getCloseReason()
    {
        return $this->container['closeReason'];
    }

    /**
     * Sets closeReason
     *
     * @param string|null $closeReason Additional information of close reason
     *
     * @return self
     */
    public function setCloseReason($closeReason)
    {
        if (is_null($closeReason)) {
            throw new \InvalidArgumentException('non-nullable closeReason cannot be null');
        }
        if ((mb_strlen($closeReason) > 128)) {
            throw new \InvalidArgumentException('invalid length for $closeReason when calling QueryPaymentResponseAdditionalInfo., must be smaller than or equal to 128.');
        }

        $this->container['closeReason'] = $closeReason;

        return $this;
    }

    /**
     * Gets virtualAccountInfo
     *
     * @return \Dana\Widget\v1\Model\VirtualAccountInfo|null
     */
    public function getVirtualAccountInfo()
    {
        return $this->container['virtualAccountInfo'];
    }

    /**
     * Sets virtualAccountInfo
     *
     * @param \Dana\Widget\v1\Model\VirtualAccountInfo|null $virtualAccountInfo virtualAccountInfo
     *
     * @return self
     */
    public function setVirtualAccountInfo($virtualAccountInfo)
    {
        if (is_null($virtualAccountInfo)) {
            throw new \InvalidArgumentException('non-nullable virtualAccountInfo cannot be null');
        }
        $this->container['virtualAccountInfo'] = $virtualAccountInfo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


