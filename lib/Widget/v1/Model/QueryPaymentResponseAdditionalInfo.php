<?php
/**
 * QueryPaymentResponseAdditionalInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\Widget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Widget API
 *
 * API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\Widget\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * QueryPaymentResponseAdditionalInfo Class Doc Comment
 *
 * @category Class
 * @package  Dana\Widget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class QueryPaymentResponseAdditionalInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'QueryPaymentResponseAdditionalInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'merchant_id' => 'string',
        'buyer' => '\Dana\Widget\v1\Model\Buyer',
        'seller' => '\Dana\Widget\v1\Model\Seller',
        'amount_detail' => '\Dana\Widget\v1\Model\AmountDetail',
        'time_detail' => '\Dana\Widget\v1\Model\TimeDetail',
        'goods' => '\Dana\Widget\v1\Model\Goods[]',
        'shipping_info' => '\Dana\Widget\v1\Model\ShippingInfo[]',
        'order_memo' => 'string',
        'payment_views' => '\Dana\Widget\v1\Model\PaymentView[]',
        'extend_info' => 'string',
        'status_detail' => '\Dana\Widget\v1\Model\StatusDetail',
        'close_reason' => 'string',
        'virtual_account_info' => '\Dana\Widget\v1\Model\VirtualAccountInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'merchant_id' => null,
        'buyer' => null,
        'seller' => null,
        'amount_detail' => null,
        'time_detail' => null,
        'goods' => null,
        'shipping_info' => null,
        'order_memo' => null,
        'payment_views' => null,
        'extend_info' => null,
        'status_detail' => null,
        'close_reason' => null,
        'virtual_account_info' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'merchant_id' => false,
        'buyer' => false,
        'seller' => false,
        'amount_detail' => false,
        'time_detail' => false,
        'goods' => false,
        'shipping_info' => false,
        'order_memo' => false,
        'payment_views' => false,
        'extend_info' => false,
        'status_detail' => false,
        'close_reason' => false,
        'virtual_account_info' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchant_id' => 'merchantId',
        'buyer' => 'buyer',
        'seller' => 'seller',
        'amount_detail' => 'amountDetail',
        'time_detail' => 'timeDetail',
        'goods' => 'goods',
        'shipping_info' => 'shippingInfo',
        'order_memo' => 'orderMemo',
        'payment_views' => 'paymentViews',
        'extend_info' => 'extendInfo',
        'status_detail' => 'statusDetail',
        'close_reason' => 'closeReason',
        'virtual_account_info' => 'virtualAccountInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchant_id' => 'setMerchantId',
        'buyer' => 'setBuyer',
        'seller' => 'setSeller',
        'amount_detail' => 'setAmountDetail',
        'time_detail' => 'setTimeDetail',
        'goods' => 'setGoods',
        'shipping_info' => 'setShippingInfo',
        'order_memo' => 'setOrderMemo',
        'payment_views' => 'setPaymentViews',
        'extend_info' => 'setExtendInfo',
        'status_detail' => 'setStatusDetail',
        'close_reason' => 'setCloseReason',
        'virtual_account_info' => 'setVirtualAccountInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchant_id' => 'getMerchantId',
        'buyer' => 'getBuyer',
        'seller' => 'getSeller',
        'amount_detail' => 'getAmountDetail',
        'time_detail' => 'getTimeDetail',
        'goods' => 'getGoods',
        'shipping_info' => 'getShippingInfo',
        'order_memo' => 'getOrderMemo',
        'payment_views' => 'getPaymentViews',
        'extend_info' => 'getExtendInfo',
        'status_detail' => 'getStatusDetail',
        'close_reason' => 'getCloseReason',
        'virtual_account_info' => 'getVirtualAccountInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('buyer', $data ?? [], null);
        $this->setIfExists('seller', $data ?? [], null);
        $this->setIfExists('amount_detail', $data ?? [], null);
        $this->setIfExists('time_detail', $data ?? [], null);
        $this->setIfExists('goods', $data ?? [], null);
        $this->setIfExists('shipping_info', $data ?? [], null);
        $this->setIfExists('order_memo', $data ?? [], null);
        $this->setIfExists('payment_views', $data ?? [], null);
        $this->setIfExists('extend_info', $data ?? [], null);
        $this->setIfExists('status_detail', $data ?? [], null);
        $this->setIfExists('close_reason', $data ?? [], null);
        $this->setIfExists('virtual_account_info', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['merchant_id']) && (mb_strlen($this->container['merchant_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'merchant_id', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['order_memo']) && (mb_strlen($this->container['order_memo']) > 64)) {
            $invalidProperties[] = "invalid value for 'order_memo', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['extend_info']) && (mb_strlen($this->container['extend_info']) > 4096)) {
            $invalidProperties[] = "invalid value for 'extend_info', the character length must be smaller than or equal to 4096.";
        }

        if (!is_null($this->container['close_reason']) && (mb_strlen($this->container['close_reason']) > 128)) {
            $invalidProperties[] = "invalid value for 'close_reason', the character length must be smaller than or equal to 128.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id Merchant identifier
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        if ((mb_strlen($merchant_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $merchant_id when calling QueryPaymentResponseAdditionalInfo., must be smaller than or equal to 64.');
        }

        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets buyer
     *
     * @return \Dana\Widget\v1\Model\Buyer|null
     */
    public function getBuyer()
    {
        return $this->container['buyer'];
    }

    /**
     * Sets buyer
     *
     * @param \Dana\Widget\v1\Model\Buyer|null $buyer buyer
     *
     * @return self
     */
    public function setBuyer($buyer)
    {
        if (is_null($buyer)) {
            throw new \InvalidArgumentException('non-nullable buyer cannot be null');
        }
        $this->container['buyer'] = $buyer;

        return $this;
    }

    /**
     * Gets seller
     *
     * @return \Dana\Widget\v1\Model\Seller|null
     */
    public function getSeller()
    {
        return $this->container['seller'];
    }

    /**
     * Sets seller
     *
     * @param \Dana\Widget\v1\Model\Seller|null $seller seller
     *
     * @return self
     */
    public function setSeller($seller)
    {
        if (is_null($seller)) {
            throw new \InvalidArgumentException('non-nullable seller cannot be null');
        }
        $this->container['seller'] = $seller;

        return $this;
    }

    /**
     * Gets amount_detail
     *
     * @return \Dana\Widget\v1\Model\AmountDetail|null
     */
    public function getAmountDetail()
    {
        return $this->container['amount_detail'];
    }

    /**
     * Sets amount_detail
     *
     * @param \Dana\Widget\v1\Model\AmountDetail|null $amount_detail amount_detail
     *
     * @return self
     */
    public function setAmountDetail($amount_detail)
    {
        if (is_null($amount_detail)) {
            throw new \InvalidArgumentException('non-nullable amount_detail cannot be null');
        }
        $this->container['amount_detail'] = $amount_detail;

        return $this;
    }

    /**
     * Gets time_detail
     *
     * @return \Dana\Widget\v1\Model\TimeDetail|null
     */
    public function getTimeDetail()
    {
        return $this->container['time_detail'];
    }

    /**
     * Sets time_detail
     *
     * @param \Dana\Widget\v1\Model\TimeDetail|null $time_detail time_detail
     *
     * @return self
     */
    public function setTimeDetail($time_detail)
    {
        if (is_null($time_detail)) {
            throw new \InvalidArgumentException('non-nullable time_detail cannot be null');
        }
        $this->container['time_detail'] = $time_detail;

        return $this;
    }

    /**
     * Gets goods
     *
     * @return \Dana\Widget\v1\Model\Goods[]|null
     */
    public function getGoods()
    {
        return $this->container['goods'];
    }

    /**
     * Sets goods
     *
     * @param \Dana\Widget\v1\Model\Goods[]|null $goods Additional information of goods
     *
     * @return self
     */
    public function setGoods($goods)
    {
        if (is_null($goods)) {
            throw new \InvalidArgumentException('non-nullable goods cannot be null');
        }
        $this->container['goods'] = $goods;

        return $this;
    }

    /**
     * Gets shipping_info
     *
     * @return \Dana\Widget\v1\Model\ShippingInfo[]|null
     */
    public function getShippingInfo()
    {
        return $this->container['shipping_info'];
    }

    /**
     * Sets shipping_info
     *
     * @param \Dana\Widget\v1\Model\ShippingInfo[]|null $shipping_info Additional information of shipping
     *
     * @return self
     */
    public function setShippingInfo($shipping_info)
    {
        if (is_null($shipping_info)) {
            throw new \InvalidArgumentException('non-nullable shipping_info cannot be null');
        }
        $this->container['shipping_info'] = $shipping_info;

        return $this;
    }

    /**
     * Gets order_memo
     *
     * @return string|null
     */
    public function getOrderMemo()
    {
        return $this->container['order_memo'];
    }

    /**
     * Sets order_memo
     *
     * @param string|null $order_memo Additional information of memo
     *
     * @return self
     */
    public function setOrderMemo($order_memo)
    {
        if (is_null($order_memo)) {
            throw new \InvalidArgumentException('non-nullable order_memo cannot be null');
        }
        if ((mb_strlen($order_memo) > 64)) {
            throw new \InvalidArgumentException('invalid length for $order_memo when calling QueryPaymentResponseAdditionalInfo., must be smaller than or equal to 64.');
        }

        $this->container['order_memo'] = $order_memo;

        return $this;
    }

    /**
     * Gets payment_views
     *
     * @return \Dana\Widget\v1\Model\PaymentView[]|null
     */
    public function getPaymentViews()
    {
        return $this->container['payment_views'];
    }

    /**
     * Sets payment_views
     *
     * @param \Dana\Widget\v1\Model\PaymentView[]|null $payment_views Additional information of payment views
     *
     * @return self
     */
    public function setPaymentViews($payment_views)
    {
        if (is_null($payment_views)) {
            throw new \InvalidArgumentException('non-nullable payment_views cannot be null');
        }
        $this->container['payment_views'] = $payment_views;

        return $this;
    }

    /**
     * Gets extend_info
     *
     * @return string|null
     */
    public function getExtendInfo()
    {
        return $this->container['extend_info'];
    }

    /**
     * Sets extend_info
     *
     * @param string|null $extend_info Additional information of extend
     *
     * @return self
     */
    public function setExtendInfo($extend_info)
    {
        if (is_null($extend_info)) {
            throw new \InvalidArgumentException('non-nullable extend_info cannot be null');
        }
        if ((mb_strlen($extend_info) > 4096)) {
            throw new \InvalidArgumentException('invalid length for $extend_info when calling QueryPaymentResponseAdditionalInfo., must be smaller than or equal to 4096.');
        }

        $this->container['extend_info'] = $extend_info;

        return $this;
    }

    /**
     * Gets status_detail
     *
     * @return \Dana\Widget\v1\Model\StatusDetail|null
     */
    public function getStatusDetail()
    {
        return $this->container['status_detail'];
    }

    /**
     * Sets status_detail
     *
     * @param \Dana\Widget\v1\Model\StatusDetail|null $status_detail status_detail
     *
     * @return self
     */
    public function setStatusDetail($status_detail)
    {
        if (is_null($status_detail)) {
            throw new \InvalidArgumentException('non-nullable status_detail cannot be null');
        }
        $this->container['status_detail'] = $status_detail;

        return $this;
    }

    /**
     * Gets close_reason
     *
     * @return string|null
     */
    public function getCloseReason()
    {
        return $this->container['close_reason'];
    }

    /**
     * Sets close_reason
     *
     * @param string|null $close_reason Additional information of close reason
     *
     * @return self
     */
    public function setCloseReason($close_reason)
    {
        if (is_null($close_reason)) {
            throw new \InvalidArgumentException('non-nullable close_reason cannot be null');
        }
        if ((mb_strlen($close_reason) > 128)) {
            throw new \InvalidArgumentException('invalid length for $close_reason when calling QueryPaymentResponseAdditionalInfo., must be smaller than or equal to 128.');
        }

        $this->container['close_reason'] = $close_reason;

        return $this;
    }

    /**
     * Gets virtual_account_info
     *
     * @return \Dana\Widget\v1\Model\VirtualAccountInfo|null
     */
    public function getVirtualAccountInfo()
    {
        return $this->container['virtual_account_info'];
    }

    /**
     * Sets virtual_account_info
     *
     * @param \Dana\Widget\v1\Model\VirtualAccountInfo|null $virtual_account_info virtual_account_info
     *
     * @return self
     */
    public function setVirtualAccountInfo($virtual_account_info)
    {
        if (is_null($virtual_account_info)) {
            throw new \InvalidArgumentException('non-nullable virtual_account_info cannot be null');
        }
        $this->container['virtual_account_info'] = $virtual_account_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


