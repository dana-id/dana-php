<?php
/**
 * ShippingInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\Widget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Widget API
 *
 * API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\Widget\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * ShippingInfo Class Doc Comment
 *
 * @category Class
 * @package  Dana\Widget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShippingInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShippingInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'merchantShippingId' => 'string',
        'trackingNo' => 'string',
        'carrier' => 'string',
        'chargeAmount' => '\Dana\Widget\v1\Model\Money',
        'countryName' => 'string',
        'stateName' => 'string',
        'cityName' => 'string',
        'areaName' => 'string',
        'address1' => 'string',
        'address2' => 'string',
        'firstName' => 'string',
        'lastName' => 'string',
        'mobileNo' => 'string',
        'phoneNo' => 'string',
        'zipCode' => 'string',
        'email' => 'string',
        'faxNo' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'merchantShippingId' => null,
        'trackingNo' => null,
        'carrier' => null,
        'chargeAmount' => null,
        'countryName' => null,
        'stateName' => null,
        'cityName' => null,
        'areaName' => null,
        'address1' => null,
        'address2' => null,
        'firstName' => null,
        'lastName' => null,
        'mobileNo' => null,
        'phoneNo' => null,
        'zipCode' => null,
        'email' => null,
        'faxNo' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'merchantShippingId' => false,
        'trackingNo' => false,
        'carrier' => false,
        'chargeAmount' => false,
        'countryName' => false,
        'stateName' => false,
        'cityName' => false,
        'areaName' => false,
        'address1' => false,
        'address2' => false,
        'firstName' => false,
        'lastName' => false,
        'mobileNo' => false,
        'phoneNo' => false,
        'zipCode' => false,
        'email' => false,
        'faxNo' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchantShippingId' => 'merchantShippingId',
        'trackingNo' => 'trackingNo',
        'carrier' => 'carrier',
        'chargeAmount' => 'chargeAmount',
        'countryName' => 'countryName',
        'stateName' => 'stateName',
        'cityName' => 'cityName',
        'areaName' => 'areaName',
        'address1' => 'address1',
        'address2' => 'address2',
        'firstName' => 'firstName',
        'lastName' => 'lastName',
        'mobileNo' => 'mobileNo',
        'phoneNo' => 'phoneNo',
        'zipCode' => 'zipCode',
        'email' => 'email',
        'faxNo' => 'faxNo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchantShippingId' => 'setMerchantShippingId',
        'trackingNo' => 'setTrackingNo',
        'carrier' => 'setCarrier',
        'chargeAmount' => 'setChargeAmount',
        'countryName' => 'setCountryName',
        'stateName' => 'setStateName',
        'cityName' => 'setCityName',
        'areaName' => 'setAreaName',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'firstName' => 'setFirstName',
        'lastName' => 'setLastName',
        'mobileNo' => 'setMobileNo',
        'phoneNo' => 'setPhoneNo',
        'zipCode' => 'setZipCode',
        'email' => 'setEmail',
        'faxNo' => 'setFaxNo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchantShippingId' => 'getMerchantShippingId',
        'trackingNo' => 'getTrackingNo',
        'carrier' => 'getCarrier',
        'chargeAmount' => 'getChargeAmount',
        'countryName' => 'getCountryName',
        'stateName' => 'getStateName',
        'cityName' => 'getCityName',
        'areaName' => 'getAreaName',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'firstName' => 'getFirstName',
        'lastName' => 'getLastName',
        'mobileNo' => 'getMobileNo',
        'phoneNo' => 'getPhoneNo',
        'zipCode' => 'getZipCode',
        'email' => 'getEmail',
        'faxNo' => 'getFaxNo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('merchantShippingId', $data ?? [], null);
        $this->setIfExists('trackingNo', $data ?? [], null);
        $this->setIfExists('carrier', $data ?? [], null);
        $this->setIfExists('chargeAmount', $data ?? [], null);
        $this->setIfExists('countryName', $data ?? [], null);
        $this->setIfExists('stateName', $data ?? [], null);
        $this->setIfExists('cityName', $data ?? [], null);
        $this->setIfExists('areaName', $data ?? [], null);
        $this->setIfExists('address1', $data ?? [], null);
        $this->setIfExists('address2', $data ?? [], null);
        $this->setIfExists('firstName', $data ?? [], null);
        $this->setIfExists('lastName', $data ?? [], null);
        $this->setIfExists('mobileNo', $data ?? [], null);
        $this->setIfExists('phoneNo', $data ?? [], null);
        $this->setIfExists('zipCode', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('faxNo', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['merchantShippingId'] === null) {
            $invalidProperties[] = "'merchantShippingId' can't be null";
        }
        if ((mb_strlen($this->container['merchantShippingId']) > 64)) {
            $invalidProperties[] = "invalid value for 'merchantShippingId', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['trackingNo']) && (mb_strlen($this->container['trackingNo']) > 64)) {
            $invalidProperties[] = "invalid value for 'trackingNo', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['carrier']) && (mb_strlen($this->container['carrier']) > 64)) {
            $invalidProperties[] = "invalid value for 'carrier', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['countryName'] === null) {
            $invalidProperties[] = "'countryName' can't be null";
        }
        if ((mb_strlen($this->container['countryName']) > 64)) {
            $invalidProperties[] = "invalid value for 'countryName', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['stateName'] === null) {
            $invalidProperties[] = "'stateName' can't be null";
        }
        if ((mb_strlen($this->container['stateName']) > 64)) {
            $invalidProperties[] = "invalid value for 'stateName', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['cityName'] === null) {
            $invalidProperties[] = "'cityName' can't be null";
        }
        if ((mb_strlen($this->container['cityName']) > 64)) {
            $invalidProperties[] = "invalid value for 'cityName', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['areaName']) && (mb_strlen($this->container['areaName']) > 64)) {
            $invalidProperties[] = "invalid value for 'areaName', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['address1'] === null) {
            $invalidProperties[] = "'address1' can't be null";
        }
        if ((mb_strlen($this->container['address1']) > 256)) {
            $invalidProperties[] = "invalid value for 'address1', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['address2']) && (mb_strlen($this->container['address2']) > 256)) {
            $invalidProperties[] = "invalid value for 'address2', the character length must be smaller than or equal to 256.";
        }

        if ($this->container['firstName'] === null) {
            $invalidProperties[] = "'firstName' can't be null";
        }
        if ((mb_strlen($this->container['firstName']) > 64)) {
            $invalidProperties[] = "invalid value for 'firstName', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['lastName'] === null) {
            $invalidProperties[] = "'lastName' can't be null";
        }
        if ((mb_strlen($this->container['lastName']) > 64)) {
            $invalidProperties[] = "invalid value for 'lastName', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['mobileNo']) && (mb_strlen($this->container['mobileNo']) > 32)) {
            $invalidProperties[] = "invalid value for 'mobileNo', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['phoneNo']) && (mb_strlen($this->container['phoneNo']) > 32)) {
            $invalidProperties[] = "invalid value for 'phoneNo', the character length must be smaller than or equal to 32.";
        }

        if ($this->container['zipCode'] === null) {
            $invalidProperties[] = "'zipCode' can't be null";
        }
        if ((mb_strlen($this->container['zipCode']) > 32)) {
            $invalidProperties[] = "invalid value for 'zipCode', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 128)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['faxNo']) && (mb_strlen($this->container['faxNo']) > 32)) {
            $invalidProperties[] = "invalid value for 'faxNo', the character length must be smaller than or equal to 32.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchantShippingId
     *
     * @return string
     */
    public function getMerchantShippingId()
    {
        return $this->container['merchantShippingId'];
    }

    /**
     * Sets merchantShippingId
     *
     * @param string $merchantShippingId Merchant shipping identifier
     *
     * @return self
     */
    public function setMerchantShippingId($merchantShippingId)
    {
        if (is_null($merchantShippingId)) {
            throw new \InvalidArgumentException('non-nullable merchantShippingId cannot be null');
        }
        if ((mb_strlen($merchantShippingId) > 64)) {
            throw new \InvalidArgumentException('invalid length for $merchantShippingId when calling ShippingInfo., must be smaller than or equal to 64.');
        }

        $this->container['merchantShippingId'] = $merchantShippingId;

        return $this;
    }

    /**
     * Gets trackingNo
     *
     * @return string|null
     */
    public function getTrackingNo()
    {
        return $this->container['trackingNo'];
    }

    /**
     * Sets trackingNo
     *
     * @param string|null $trackingNo Number of tracking
     *
     * @return self
     */
    public function setTrackingNo($trackingNo)
    {
        if (is_null($trackingNo)) {
            throw new \InvalidArgumentException('non-nullable trackingNo cannot be null');
        }
        if ((mb_strlen($trackingNo) > 64)) {
            throw new \InvalidArgumentException('invalid length for $trackingNo when calling ShippingInfo., must be smaller than or equal to 64.');
        }

        $this->container['trackingNo'] = $trackingNo;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return string|null
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param string|null $carrier Information of carrier
     *
     * @return self
     */
    public function setCarrier($carrier)
    {
        if (is_null($carrier)) {
            throw new \InvalidArgumentException('non-nullable carrier cannot be null');
        }
        if ((mb_strlen($carrier) > 64)) {
            throw new \InvalidArgumentException('invalid length for $carrier when calling ShippingInfo., must be smaller than or equal to 64.');
        }

        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets chargeAmount
     *
     * @return \Dana\Widget\v1\Model\Money|null
     */
    public function getChargeAmount()
    {
        return $this->container['chargeAmount'];
    }

    /**
     * Sets chargeAmount
     *
     * @param \Dana\Widget\v1\Model\Money|null $chargeAmount Promo amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br>
     *
     * @return self
     */
    public function setChargeAmount($chargeAmount)
    {
        if (is_null($chargeAmount)) {
            throw new \InvalidArgumentException('non-nullable chargeAmount cannot be null');
        }
        $this->container['chargeAmount'] = $chargeAmount;

        return $this;
    }

    /**
     * Gets countryName
     *
     * @return string
     */
    public function getCountryName()
    {
        return $this->container['countryName'];
    }

    /**
     * Sets countryName
     *
     * @param string $countryName Name of country
     *
     * @return self
     */
    public function setCountryName($countryName)
    {
        if (is_null($countryName)) {
            throw new \InvalidArgumentException('non-nullable countryName cannot be null');
        }
        if ((mb_strlen($countryName) > 64)) {
            throw new \InvalidArgumentException('invalid length for $countryName when calling ShippingInfo., must be smaller than or equal to 64.');
        }

        $this->container['countryName'] = $countryName;

        return $this;
    }

    /**
     * Gets stateName
     *
     * @return string
     */
    public function getStateName()
    {
        return $this->container['stateName'];
    }

    /**
     * Sets stateName
     *
     * @param string $stateName Name of state
     *
     * @return self
     */
    public function setStateName($stateName)
    {
        if (is_null($stateName)) {
            throw new \InvalidArgumentException('non-nullable stateName cannot be null');
        }
        if ((mb_strlen($stateName) > 64)) {
            throw new \InvalidArgumentException('invalid length for $stateName when calling ShippingInfo., must be smaller than or equal to 64.');
        }

        $this->container['stateName'] = $stateName;

        return $this;
    }

    /**
     * Gets cityName
     *
     * @return string
     */
    public function getCityName()
    {
        return $this->container['cityName'];
    }

    /**
     * Sets cityName
     *
     * @param string $cityName Name of city
     *
     * @return self
     */
    public function setCityName($cityName)
    {
        if (is_null($cityName)) {
            throw new \InvalidArgumentException('non-nullable cityName cannot be null');
        }
        if ((mb_strlen($cityName) > 64)) {
            throw new \InvalidArgumentException('invalid length for $cityName when calling ShippingInfo., must be smaller than or equal to 64.');
        }

        $this->container['cityName'] = $cityName;

        return $this;
    }

    /**
     * Gets areaName
     *
     * @return string|null
     */
    public function getAreaName()
    {
        return $this->container['areaName'];
    }

    /**
     * Sets areaName
     *
     * @param string|null $areaName Name of area
     *
     * @return self
     */
    public function setAreaName($areaName)
    {
        if (is_null($areaName)) {
            throw new \InvalidArgumentException('non-nullable areaName cannot be null');
        }
        if ((mb_strlen($areaName) > 64)) {
            throw new \InvalidArgumentException('invalid length for $areaName when calling ShippingInfo., must be smaller than or equal to 64.');
        }

        $this->container['areaName'] = $areaName;

        return $this;
    }

    /**
     * Gets address1
     *
     * @return string
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string $address1 Information of address 1
     *
     * @return self
     */
    public function setAddress1($address1)
    {
        if (is_null($address1)) {
            throw new \InvalidArgumentException('non-nullable address1 cannot be null');
        }
        if ((mb_strlen($address1) > 256)) {
            throw new \InvalidArgumentException('invalid length for $address1 when calling ShippingInfo., must be smaller than or equal to 256.');
        }

        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 Information of address 2
     *
     * @return self
     */
    public function setAddress2($address2)
    {
        if (is_null($address2)) {
            throw new \InvalidArgumentException('non-nullable address2 cannot be null');
        }
        if ((mb_strlen($address2) > 256)) {
            throw new \InvalidArgumentException('invalid length for $address2 when calling ShippingInfo., must be smaller than or equal to 256.');
        }

        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string $firstName First name
     *
     * @return self
     */
    public function setFirstName($firstName)
    {
        if (is_null($firstName)) {
            throw new \InvalidArgumentException('non-nullable firstName cannot be null');
        }
        if ((mb_strlen($firstName) > 64)) {
            throw new \InvalidArgumentException('invalid length for $firstName when calling ShippingInfo., must be smaller than or equal to 64.');
        }

        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string $lastName Last name
     *
     * @return self
     */
    public function setLastName($lastName)
    {
        if (is_null($lastName)) {
            throw new \InvalidArgumentException('non-nullable lastName cannot be null');
        }
        if ((mb_strlen($lastName) > 64)) {
            throw new \InvalidArgumentException('invalid length for $lastName when calling ShippingInfo., must be smaller than or equal to 64.');
        }

        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets mobileNo
     *
     * @return string|null
     */
    public function getMobileNo()
    {
        return $this->container['mobileNo'];
    }

    /**
     * Sets mobileNo
     *
     * @param string|null $mobileNo Mobile number
     *
     * @return self
     */
    public function setMobileNo($mobileNo)
    {
        if (is_null($mobileNo)) {
            throw new \InvalidArgumentException('non-nullable mobileNo cannot be null');
        }
        if ((mb_strlen($mobileNo) > 32)) {
            throw new \InvalidArgumentException('invalid length for $mobileNo when calling ShippingInfo., must be smaller than or equal to 32.');
        }

        $this->container['mobileNo'] = $mobileNo;

        return $this;
    }

    /**
     * Gets phoneNo
     *
     * @return string|null
     */
    public function getPhoneNo()
    {
        return $this->container['phoneNo'];
    }

    /**
     * Sets phoneNo
     *
     * @param string|null $phoneNo Phone number
     *
     * @return self
     */
    public function setPhoneNo($phoneNo)
    {
        if (is_null($phoneNo)) {
            throw new \InvalidArgumentException('non-nullable phoneNo cannot be null');
        }
        if ((mb_strlen($phoneNo) > 32)) {
            throw new \InvalidArgumentException('invalid length for $phoneNo when calling ShippingInfo., must be smaller than or equal to 32.');
        }

        $this->container['phoneNo'] = $phoneNo;

        return $this;
    }

    /**
     * Gets zipCode
     *
     * @return string
     */
    public function getZipCode()
    {
        return $this->container['zipCode'];
    }

    /**
     * Sets zipCode
     *
     * @param string $zipCode Zip code
     *
     * @return self
     */
    public function setZipCode($zipCode)
    {
        if (is_null($zipCode)) {
            throw new \InvalidArgumentException('non-nullable zipCode cannot be null');
        }
        if ((mb_strlen($zipCode) > 32)) {
            throw new \InvalidArgumentException('invalid length for $zipCode when calling ShippingInfo., must be smaller than or equal to 32.');
        }

        $this->container['zipCode'] = $zipCode;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        if ((mb_strlen($email) > 128)) {
            throw new \InvalidArgumentException('invalid length for $email when calling ShippingInfo., must be smaller than or equal to 128.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets faxNo
     *
     * @return string|null
     */
    public function getFaxNo()
    {
        return $this->container['faxNo'];
    }

    /**
     * Sets faxNo
     *
     * @param string|null $faxNo Fax number
     *
     * @return self
     */
    public function setFaxNo($faxNo)
    {
        if (is_null($faxNo)) {
            throw new \InvalidArgumentException('non-nullable faxNo cannot be null');
        }
        if ((mb_strlen($faxNo) > 32)) {
            throw new \InvalidArgumentException('invalid length for $faxNo when calling ShippingInfo., must be smaller than or equal to 32.');
        }

        $this->container['faxNo'] = $faxNo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


