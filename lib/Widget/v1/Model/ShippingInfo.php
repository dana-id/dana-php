<?php
/**
 * ShippingInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\Widget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Widget API
 *
 * API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\Widget\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * ShippingInfo Class Doc Comment
 *
 * @category Class
 * @package  Dana\Widget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShippingInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShippingInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'merchant_shipping_id' => 'string',
        'tracking_no' => 'string',
        'carrier' => 'string',
        'charge_amount' => '\Dana\Widget\v1\Model\Money',
        'country_name' => 'string',
        'state_name' => 'string',
        'city_name' => 'string',
        'area_name' => 'string',
        'address1' => 'string',
        'address2' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'mobile_no' => 'string',
        'phone_no' => 'string',
        'zip_code' => 'string',
        'email' => 'string',
        'fax_no' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'merchant_shipping_id' => null,
        'tracking_no' => null,
        'carrier' => null,
        'charge_amount' => null,
        'country_name' => null,
        'state_name' => null,
        'city_name' => null,
        'area_name' => null,
        'address1' => null,
        'address2' => null,
        'first_name' => null,
        'last_name' => null,
        'mobile_no' => null,
        'phone_no' => null,
        'zip_code' => null,
        'email' => null,
        'fax_no' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'merchant_shipping_id' => false,
        'tracking_no' => false,
        'carrier' => false,
        'charge_amount' => false,
        'country_name' => false,
        'state_name' => false,
        'city_name' => false,
        'area_name' => false,
        'address1' => false,
        'address2' => false,
        'first_name' => false,
        'last_name' => false,
        'mobile_no' => false,
        'phone_no' => false,
        'zip_code' => false,
        'email' => false,
        'fax_no' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchant_shipping_id' => 'merchantShippingId',
        'tracking_no' => 'trackingNo',
        'carrier' => 'carrier',
        'charge_amount' => 'chargeAmount',
        'country_name' => 'countryName',
        'state_name' => 'stateName',
        'city_name' => 'cityName',
        'area_name' => 'areaName',
        'address1' => 'address1',
        'address2' => 'address2',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'mobile_no' => 'mobileNo',
        'phone_no' => 'phoneNo',
        'zip_code' => 'zipCode',
        'email' => 'email',
        'fax_no' => 'faxNo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchant_shipping_id' => 'setMerchantShippingId',
        'tracking_no' => 'setTrackingNo',
        'carrier' => 'setCarrier',
        'charge_amount' => 'setChargeAmount',
        'country_name' => 'setCountryName',
        'state_name' => 'setStateName',
        'city_name' => 'setCityName',
        'area_name' => 'setAreaName',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'mobile_no' => 'setMobileNo',
        'phone_no' => 'setPhoneNo',
        'zip_code' => 'setZipCode',
        'email' => 'setEmail',
        'fax_no' => 'setFaxNo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchant_shipping_id' => 'getMerchantShippingId',
        'tracking_no' => 'getTrackingNo',
        'carrier' => 'getCarrier',
        'charge_amount' => 'getChargeAmount',
        'country_name' => 'getCountryName',
        'state_name' => 'getStateName',
        'city_name' => 'getCityName',
        'area_name' => 'getAreaName',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'mobile_no' => 'getMobileNo',
        'phone_no' => 'getPhoneNo',
        'zip_code' => 'getZipCode',
        'email' => 'getEmail',
        'fax_no' => 'getFaxNo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('merchant_shipping_id', $data ?? [], null);
        $this->setIfExists('tracking_no', $data ?? [], null);
        $this->setIfExists('carrier', $data ?? [], null);
        $this->setIfExists('charge_amount', $data ?? [], null);
        $this->setIfExists('country_name', $data ?? [], null);
        $this->setIfExists('state_name', $data ?? [], null);
        $this->setIfExists('city_name', $data ?? [], null);
        $this->setIfExists('area_name', $data ?? [], null);
        $this->setIfExists('address1', $data ?? [], null);
        $this->setIfExists('address2', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('mobile_no', $data ?? [], null);
        $this->setIfExists('phone_no', $data ?? [], null);
        $this->setIfExists('zip_code', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('fax_no', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['merchant_shipping_id'] === null) {
            $invalidProperties[] = "'merchant_shipping_id' can't be null";
        }
        if ((mb_strlen($this->container['merchant_shipping_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'merchant_shipping_id', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['tracking_no']) && (mb_strlen($this->container['tracking_no']) > 64)) {
            $invalidProperties[] = "invalid value for 'tracking_no', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['carrier']) && (mb_strlen($this->container['carrier']) > 64)) {
            $invalidProperties[] = "invalid value for 'carrier', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['country_name'] === null) {
            $invalidProperties[] = "'country_name' can't be null";
        }
        if ((mb_strlen($this->container['country_name']) > 64)) {
            $invalidProperties[] = "invalid value for 'country_name', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['state_name'] === null) {
            $invalidProperties[] = "'state_name' can't be null";
        }
        if ((mb_strlen($this->container['state_name']) > 64)) {
            $invalidProperties[] = "invalid value for 'state_name', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['city_name'] === null) {
            $invalidProperties[] = "'city_name' can't be null";
        }
        if ((mb_strlen($this->container['city_name']) > 64)) {
            $invalidProperties[] = "invalid value for 'city_name', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['area_name']) && (mb_strlen($this->container['area_name']) > 64)) {
            $invalidProperties[] = "invalid value for 'area_name', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['address1'] === null) {
            $invalidProperties[] = "'address1' can't be null";
        }
        if ((mb_strlen($this->container['address1']) > 256)) {
            $invalidProperties[] = "invalid value for 'address1', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['address2']) && (mb_strlen($this->container['address2']) > 256)) {
            $invalidProperties[] = "invalid value for 'address2', the character length must be smaller than or equal to 256.";
        }

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ((mb_strlen($this->container['first_name']) > 64)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ((mb_strlen($this->container['last_name']) > 64)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['mobile_no']) && (mb_strlen($this->container['mobile_no']) > 32)) {
            $invalidProperties[] = "invalid value for 'mobile_no', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['phone_no']) && (mb_strlen($this->container['phone_no']) > 32)) {
            $invalidProperties[] = "invalid value for 'phone_no', the character length must be smaller than or equal to 32.";
        }

        if ($this->container['zip_code'] === null) {
            $invalidProperties[] = "'zip_code' can't be null";
        }
        if ((mb_strlen($this->container['zip_code']) > 32)) {
            $invalidProperties[] = "invalid value for 'zip_code', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 128)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['fax_no']) && (mb_strlen($this->container['fax_no']) > 32)) {
            $invalidProperties[] = "invalid value for 'fax_no', the character length must be smaller than or equal to 32.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchant_shipping_id
     *
     * @return string
     */
    public function getMerchantShippingId()
    {
        return $this->container['merchant_shipping_id'];
    }

    /**
     * Sets merchant_shipping_id
     *
     * @param string $merchant_shipping_id Merchant shipping identifier
     *
     * @return self
     */
    public function setMerchantShippingId($merchant_shipping_id)
    {
        if (is_null($merchant_shipping_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_shipping_id cannot be null');
        }
        if ((mb_strlen($merchant_shipping_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $merchant_shipping_id when calling ShippingInfo., must be smaller than or equal to 64.');
        }

        $this->container['merchant_shipping_id'] = $merchant_shipping_id;

        return $this;
    }

    /**
     * Gets tracking_no
     *
     * @return string|null
     */
    public function getTrackingNo()
    {
        return $this->container['tracking_no'];
    }

    /**
     * Sets tracking_no
     *
     * @param string|null $tracking_no Number of tracking
     *
     * @return self
     */
    public function setTrackingNo($tracking_no)
    {
        if (is_null($tracking_no)) {
            throw new \InvalidArgumentException('non-nullable tracking_no cannot be null');
        }
        if ((mb_strlen($tracking_no) > 64)) {
            throw new \InvalidArgumentException('invalid length for $tracking_no when calling ShippingInfo., must be smaller than or equal to 64.');
        }

        $this->container['tracking_no'] = $tracking_no;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return string|null
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param string|null $carrier Information of carrier
     *
     * @return self
     */
    public function setCarrier($carrier)
    {
        if (is_null($carrier)) {
            throw new \InvalidArgumentException('non-nullable carrier cannot be null');
        }
        if ((mb_strlen($carrier) > 64)) {
            throw new \InvalidArgumentException('invalid length for $carrier when calling ShippingInfo., must be smaller than or equal to 64.');
        }

        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets charge_amount
     *
     * @return \Dana\Widget\v1\Model\Money|null
     */
    public function getChargeAmount()
    {
        return $this->container['charge_amount'];
    }

    /**
     * Sets charge_amount
     *
     * @param \Dana\Widget\v1\Model\Money|null $charge_amount Promo amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br>
     *
     * @return self
     */
    public function setChargeAmount($charge_amount)
    {
        if (is_null($charge_amount)) {
            throw new \InvalidArgumentException('non-nullable charge_amount cannot be null');
        }
        $this->container['charge_amount'] = $charge_amount;

        return $this;
    }

    /**
     * Gets country_name
     *
     * @return string
     */
    public function getCountryName()
    {
        return $this->container['country_name'];
    }

    /**
     * Sets country_name
     *
     * @param string $country_name Name of country
     *
     * @return self
     */
    public function setCountryName($country_name)
    {
        if (is_null($country_name)) {
            throw new \InvalidArgumentException('non-nullable country_name cannot be null');
        }
        if ((mb_strlen($country_name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $country_name when calling ShippingInfo., must be smaller than or equal to 64.');
        }

        $this->container['country_name'] = $country_name;

        return $this;
    }

    /**
     * Gets state_name
     *
     * @return string
     */
    public function getStateName()
    {
        return $this->container['state_name'];
    }

    /**
     * Sets state_name
     *
     * @param string $state_name Name of state
     *
     * @return self
     */
    public function setStateName($state_name)
    {
        if (is_null($state_name)) {
            throw new \InvalidArgumentException('non-nullable state_name cannot be null');
        }
        if ((mb_strlen($state_name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $state_name when calling ShippingInfo., must be smaller than or equal to 64.');
        }

        $this->container['state_name'] = $state_name;

        return $this;
    }

    /**
     * Gets city_name
     *
     * @return string
     */
    public function getCityName()
    {
        return $this->container['city_name'];
    }

    /**
     * Sets city_name
     *
     * @param string $city_name Name of city
     *
     * @return self
     */
    public function setCityName($city_name)
    {
        if (is_null($city_name)) {
            throw new \InvalidArgumentException('non-nullable city_name cannot be null');
        }
        if ((mb_strlen($city_name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $city_name when calling ShippingInfo., must be smaller than or equal to 64.');
        }

        $this->container['city_name'] = $city_name;

        return $this;
    }

    /**
     * Gets area_name
     *
     * @return string|null
     */
    public function getAreaName()
    {
        return $this->container['area_name'];
    }

    /**
     * Sets area_name
     *
     * @param string|null $area_name Name of area
     *
     * @return self
     */
    public function setAreaName($area_name)
    {
        if (is_null($area_name)) {
            throw new \InvalidArgumentException('non-nullable area_name cannot be null');
        }
        if ((mb_strlen($area_name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $area_name when calling ShippingInfo., must be smaller than or equal to 64.');
        }

        $this->container['area_name'] = $area_name;

        return $this;
    }

    /**
     * Gets address1
     *
     * @return string
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string $address1 Information of address 1
     *
     * @return self
     */
    public function setAddress1($address1)
    {
        if (is_null($address1)) {
            throw new \InvalidArgumentException('non-nullable address1 cannot be null');
        }
        if ((mb_strlen($address1) > 256)) {
            throw new \InvalidArgumentException('invalid length for $address1 when calling ShippingInfo., must be smaller than or equal to 256.');
        }

        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 Information of address 2
     *
     * @return self
     */
    public function setAddress2($address2)
    {
        if (is_null($address2)) {
            throw new \InvalidArgumentException('non-nullable address2 cannot be null');
        }
        if ((mb_strlen($address2) > 256)) {
            throw new \InvalidArgumentException('invalid length for $address2 when calling ShippingInfo., must be smaller than or equal to 256.');
        }

        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name First name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        if ((mb_strlen($first_name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling ShippingInfo., must be smaller than or equal to 64.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name Last name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        if ((mb_strlen($last_name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling ShippingInfo., must be smaller than or equal to 64.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets mobile_no
     *
     * @return string|null
     */
    public function getMobileNo()
    {
        return $this->container['mobile_no'];
    }

    /**
     * Sets mobile_no
     *
     * @param string|null $mobile_no Mobile number
     *
     * @return self
     */
    public function setMobileNo($mobile_no)
    {
        if (is_null($mobile_no)) {
            throw new \InvalidArgumentException('non-nullable mobile_no cannot be null');
        }
        if ((mb_strlen($mobile_no) > 32)) {
            throw new \InvalidArgumentException('invalid length for $mobile_no when calling ShippingInfo., must be smaller than or equal to 32.');
        }

        $this->container['mobile_no'] = $mobile_no;

        return $this;
    }

    /**
     * Gets phone_no
     *
     * @return string|null
     */
    public function getPhoneNo()
    {
        return $this->container['phone_no'];
    }

    /**
     * Sets phone_no
     *
     * @param string|null $phone_no Phone number
     *
     * @return self
     */
    public function setPhoneNo($phone_no)
    {
        if (is_null($phone_no)) {
            throw new \InvalidArgumentException('non-nullable phone_no cannot be null');
        }
        if ((mb_strlen($phone_no) > 32)) {
            throw new \InvalidArgumentException('invalid length for $phone_no when calling ShippingInfo., must be smaller than or equal to 32.');
        }

        $this->container['phone_no'] = $phone_no;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string $zip_code Zip code
     *
     * @return self
     */
    public function setZipCode($zip_code)
    {
        if (is_null($zip_code)) {
            throw new \InvalidArgumentException('non-nullable zip_code cannot be null');
        }
        if ((mb_strlen($zip_code) > 32)) {
            throw new \InvalidArgumentException('invalid length for $zip_code when calling ShippingInfo., must be smaller than or equal to 32.');
        }

        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        if ((mb_strlen($email) > 128)) {
            throw new \InvalidArgumentException('invalid length for $email when calling ShippingInfo., must be smaller than or equal to 128.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets fax_no
     *
     * @return string|null
     */
    public function getFaxNo()
    {
        return $this->container['fax_no'];
    }

    /**
     * Sets fax_no
     *
     * @param string|null $fax_no Fax number
     *
     * @return self
     */
    public function setFaxNo($fax_no)
    {
        if (is_null($fax_no)) {
            throw new \InvalidArgumentException('non-nullable fax_no cannot be null');
        }
        if ((mb_strlen($fax_no) > 32)) {
            throw new \InvalidArgumentException('invalid length for $fax_no when calling ShippingInfo., must be smaller than or equal to 32.');
        }

        $this->container['fax_no'] = $fax_no;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


