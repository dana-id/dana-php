<?php
/**
 * QueryUserProfileResponseResponseHead
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\Widget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Widget API
 *
 * API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\Widget\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * QueryUserProfileResponseResponseHead Class Doc Comment
 *
 * @category Class
 * @package  Dana\Widget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class QueryUserProfileResponseResponseHead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'QueryUserProfileResponse_response_head';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'version' => 'string',
        'function' => 'string',
        'client_id' => 'string',
        'resp_time' => 'string',
        'req_msg_id' => 'string',
        'reserve' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'version' => null,
        'function' => null,
        'client_id' => null,
        'resp_time' => null,
        'req_msg_id' => null,
        'reserve' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'version' => false,
        'function' => false,
        'client_id' => false,
        'resp_time' => false,
        'req_msg_id' => false,
        'reserve' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'version' => 'version',
        'function' => 'function',
        'client_id' => 'clientId',
        'resp_time' => 'respTime',
        'req_msg_id' => 'reqMsgId',
        'reserve' => 'reserve'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'version' => 'setVersion',
        'function' => 'setFunction',
        'client_id' => 'setClientId',
        'resp_time' => 'setRespTime',
        'req_msg_id' => 'setReqMsgId',
        'reserve' => 'setReserve'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'version' => 'getVersion',
        'function' => 'getFunction',
        'client_id' => 'getClientId',
        'resp_time' => 'getRespTime',
        'req_msg_id' => 'getReqMsgId',
        'reserve' => 'getReserve'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MODEL_FUNCTION_DANA_MEMBER_QUERY_QUERY_USER_PROFILE = 'dana.member.query.queryUserProfile';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFunctionAllowableValues()
    {
        return [
            self::MODEL_FUNCTION_DANA_MEMBER_QUERY_QUERY_USER_PROFILE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('version', $data ?? [], '2.0');
        $this->setIfExists('function', $data ?? [], null);
        $this->setIfExists('client_id', $data ?? [], null);
        $this->setIfExists('resp_time', $data ?? [], null);
        $this->setIfExists('req_msg_id', $data ?? [], null);
        $this->setIfExists('reserve', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['version']) && (mb_strlen($this->container['version']) > 8)) {
            $invalidProperties[] = "invalid value for 'version', the character length must be smaller than or equal to 8.";
        }

        $allowedValues = $this->getFunctionAllowableValues();
        if (!is_null($this->container['function']) && !in_array($this->container['function'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'function', must be one of '%s'",
                $this->container['function'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['function']) && (mb_strlen($this->container['function']) > 128)) {
            $invalidProperties[] = "invalid value for 'function', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['client_id']) && (mb_strlen($this->container['client_id']) > 32)) {
            $invalidProperties[] = "invalid value for 'client_id', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['req_msg_id']) && (mb_strlen($this->container['req_msg_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'req_msg_id', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['reserve']) && (mb_strlen($this->container['reserve']) > 256)) {
            $invalidProperties[] = "invalid value for 'reserve', the character length must be smaller than or equal to 256.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version API version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        if ((mb_strlen($version) > 8)) {
            throw new \InvalidArgumentException('invalid length for $version when calling QueryUserProfileResponseResponseHead., must be smaller than or equal to 8.');
        }

        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets function
     *
     * @return string|null
     */
    public function getFunction()
    {
        return $this->container['function'];
    }

    /**
     * Sets function
     *
     * @param string|null $function API interface
     *
     * @return self
     */
    public function setFunction($function)
    {
        if (is_null($function)) {
            throw new \InvalidArgumentException('non-nullable function cannot be null');
        }
        $allowedValues = $this->getFunctionAllowableValues();
        if (!in_array($function, $allowedValues, true) && !empty($function)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'function', must be one of '%s'",
                    $function,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($function) > 128)) {
            throw new \InvalidArgumentException('invalid length for $function when calling QueryUserProfileResponseResponseHead., must be smaller than or equal to 128.');
        }

        $this->container['function'] = $function;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string|null $client_id Client ID provided by DANA, used to identify partner and application system
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        if (is_null($client_id)) {
            throw new \InvalidArgumentException('non-nullable client_id cannot be null');
        }
        if ((mb_strlen($client_id) > 32)) {
            throw new \InvalidArgumentException('invalid length for $client_id when calling QueryUserProfileResponseResponseHead., must be smaller than or equal to 32.');
        }

        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets resp_time
     *
     * @return string|null
     */
    public function getRespTime()
    {
        return $this->container['resp_time'];
    }

    /**
     * Sets resp_time
     *
     * @param string|null $resp_time Response time, dateTime with timezone, which follows the ISO-8601 standard. Refer to RFC 3339 Section 5.6
     *
     * @return self
     */
    public function setRespTime($resp_time)
    {
        if (is_null($resp_time)) {
            throw new \InvalidArgumentException('non-nullable resp_time cannot be null');
        }
        $this->container['resp_time'] = $resp_time;

        return $this;
    }

    /**
     * Gets req_msg_id
     *
     * @return string|null
     */
    public function getReqMsgId()
    {
        return $this->container['req_msg_id'];
    }

    /**
     * Sets req_msg_id
     *
     * @param string|null $req_msg_id Each request will be assigned with a unique id (uuid)
     *
     * @return self
     */
    public function setReqMsgId($req_msg_id)
    {
        if (is_null($req_msg_id)) {
            throw new \InvalidArgumentException('non-nullable req_msg_id cannot be null');
        }
        if ((mb_strlen($req_msg_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $req_msg_id when calling QueryUserProfileResponseResponseHead., must be smaller than or equal to 64.');
        }

        $this->container['req_msg_id'] = $req_msg_id;

        return $this;
    }

    /**
     * Gets reserve
     *
     * @return string|null
     */
    public function getReserve()
    {
        return $this->container['reserve'];
    }

    /**
     * Sets reserve
     *
     * @param string|null $reserve Reserved for future implementation (Key/Value)
     *
     * @return self
     */
    public function setReserve($reserve)
    {
        if (is_null($reserve)) {
            throw new \InvalidArgumentException('non-nullable reserve cannot be null');
        }
        if ((mb_strlen($reserve) > 256)) {
            throw new \InvalidArgumentException('invalid length for $reserve when calling QueryUserProfileResponseResponseHead., must be smaller than or equal to 256.');
        }

        $this->container['reserve'] = $reserve;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


