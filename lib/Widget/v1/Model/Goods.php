<?php
/**
 * Goods
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\Widget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Widget API
 *
 * API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\Widget\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * Goods Class Doc Comment
 *
 * @category Class
 * @package  Dana\Widget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Goods implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Goods';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'merchantGoodsId' => 'string',
        'description' => 'string',
        'category' => 'string',
        'price' => '\Dana\Widget\v1\Model\Money',
        'unit' => 'string',
        'quantity' => 'string',
        'merchantShippingId' => 'string',
        'snapshotUrl' => 'string',
        'extendInfo' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'merchantGoodsId' => null,
        'description' => null,
        'category' => null,
        'price' => null,
        'unit' => null,
        'quantity' => null,
        'merchantShippingId' => null,
        'snapshotUrl' => null,
        'extendInfo' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'merchantGoodsId' => false,
        'description' => false,
        'category' => false,
        'price' => false,
        'unit' => false,
        'quantity' => false,
        'merchantShippingId' => false,
        'snapshotUrl' => false,
        'extendInfo' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'merchantGoodsId' => 'merchantGoodsId',
        'description' => 'description',
        'category' => 'category',
        'price' => 'price',
        'unit' => 'unit',
        'quantity' => 'quantity',
        'merchantShippingId' => 'merchantShippingId',
        'snapshotUrl' => 'snapshotUrl',
        'extendInfo' => 'extendInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'merchantGoodsId' => 'setMerchantGoodsId',
        'description' => 'setDescription',
        'category' => 'setCategory',
        'price' => 'setPrice',
        'unit' => 'setUnit',
        'quantity' => 'setQuantity',
        'merchantShippingId' => 'setMerchantShippingId',
        'snapshotUrl' => 'setSnapshotUrl',
        'extendInfo' => 'setExtendInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'merchantGoodsId' => 'getMerchantGoodsId',
        'description' => 'getDescription',
        'category' => 'getCategory',
        'price' => 'getPrice',
        'unit' => 'getUnit',
        'quantity' => 'getQuantity',
        'merchantShippingId' => 'getMerchantShippingId',
        'snapshotUrl' => 'getSnapshotUrl',
        'extendInfo' => 'getExtendInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('merchantGoodsId', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('unit', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('merchantShippingId', $data ?? [], null);
        $this->setIfExists('snapshotUrl', $data ?? [], null);
        $this->setIfExists('extendInfo', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 64)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['merchantGoodsId'] === null) {
            $invalidProperties[] = "'merchantGoodsId' can't be null";
        }
        if ((mb_strlen($this->container['merchantGoodsId']) > 64)) {
            $invalidProperties[] = "invalid value for 'merchantGoodsId', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ((mb_strlen($this->container['description']) > 1024)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 1024.";
        }

        if ($this->container['category'] === null) {
            $invalidProperties[] = "'category' can't be null";
        }
        if ((mb_strlen($this->container['category']) > 64)) {
            $invalidProperties[] = "invalid value for 'category', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if (!is_null($this->container['unit']) && (mb_strlen($this->container['unit']) > 64)) {
            $invalidProperties[] = "invalid value for 'unit', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ((mb_strlen($this->container['quantity']) > 16)) {
            $invalidProperties[] = "invalid value for 'quantity', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['merchantShippingId']) && (mb_strlen($this->container['merchantShippingId']) > 64)) {
            $invalidProperties[] = "invalid value for 'merchantShippingId', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['snapshotUrl']) && (mb_strlen($this->container['snapshotUrl']) > 512)) {
            $invalidProperties[] = "invalid value for 'snapshotUrl', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['extendInfo']) && (mb_strlen($this->container['extendInfo']) > 4096)) {
            $invalidProperties[] = "invalid value for 'extendInfo', the character length must be smaller than or equal to 4096.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Goods name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Goods., must be smaller than or equal to 64.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets merchantGoodsId
     *
     * @return string
     */
    public function getMerchantGoodsId()
    {
        return $this->container['merchantGoodsId'];
    }

    /**
     * Sets merchantGoodsId
     *
     * @param string $merchantGoodsId Goods identifier provided by merchant
     *
     * @return self
     */
    public function setMerchantGoodsId($merchantGoodsId)
    {
        if (is_null($merchantGoodsId)) {
            throw new \InvalidArgumentException('non-nullable merchantGoodsId cannot be null');
        }
        if ((mb_strlen($merchantGoodsId) > 64)) {
            throw new \InvalidArgumentException('invalid length for $merchantGoodsId when calling Goods., must be smaller than or equal to 64.');
        }

        $this->container['merchantGoodsId'] = $merchantGoodsId;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Goods description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Goods., must be smaller than or equal to 1024.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category Goods category
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        if ((mb_strlen($category) > 64)) {
            throw new \InvalidArgumentException('invalid length for $category when calling Goods., must be smaller than or equal to 64.');
        }

        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \Dana\Widget\v1\Model\Money
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \Dana\Widget\v1\Model\Money $price Goods price. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br>
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string|null
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string|null $unit Goods unit
     *
     * @return self
     */
    public function setUnit($unit)
    {
        if (is_null($unit)) {
            throw new \InvalidArgumentException('non-nullable unit cannot be null');
        }
        if ((mb_strlen($unit) > 64)) {
            throw new \InvalidArgumentException('invalid length for $unit when calling Goods., must be smaller than or equal to 64.');
        }

        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return string
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param string $quantity Count of items
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        if ((mb_strlen($quantity) > 16)) {
            throw new \InvalidArgumentException('invalid length for $quantity when calling Goods., must be smaller than or equal to 16.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets merchantShippingId
     *
     * @return string|null
     */
    public function getMerchantShippingId()
    {
        return $this->container['merchantShippingId'];
    }

    /**
     * Sets merchantShippingId
     *
     * @param string|null $merchantShippingId Shipment identifier provided by merchant
     *
     * @return self
     */
    public function setMerchantShippingId($merchantShippingId)
    {
        if (is_null($merchantShippingId)) {
            throw new \InvalidArgumentException('non-nullable merchantShippingId cannot be null');
        }
        if ((mb_strlen($merchantShippingId) > 64)) {
            throw new \InvalidArgumentException('invalid length for $merchantShippingId when calling Goods., must be smaller than or equal to 64.');
        }

        $this->container['merchantShippingId'] = $merchantShippingId;

        return $this;
    }

    /**
     * Gets snapshotUrl
     *
     * @return string|null
     */
    public function getSnapshotUrl()
    {
        return $this->container['snapshotUrl'];
    }

    /**
     * Sets snapshotUrl
     *
     * @param string|null $snapshotUrl The URL of good's snapshot web page
     *
     * @return self
     */
    public function setSnapshotUrl($snapshotUrl)
    {
        if (is_null($snapshotUrl)) {
            throw new \InvalidArgumentException('non-nullable snapshotUrl cannot be null');
        }
        if ((mb_strlen($snapshotUrl) > 512)) {
            throw new \InvalidArgumentException('invalid length for $snapshotUrl when calling Goods., must be smaller than or equal to 512.');
        }

        $this->container['snapshotUrl'] = $snapshotUrl;

        return $this;
    }

    /**
     * Gets extendInfo
     *
     * @return string|null
     */
    public function getExtendInfo()
    {
        return $this->container['extendInfo'];
    }

    /**
     * Sets extendInfo
     *
     * @param string|null $extendInfo Extend information
     *
     * @return self
     */
    public function setExtendInfo($extendInfo)
    {
        if (is_null($extendInfo)) {
            throw new \InvalidArgumentException('non-nullable extendInfo cannot be null');
        }
        if ((mb_strlen($extendInfo) > 4096)) {
            throw new \InvalidArgumentException('invalid length for $extendInfo when calling Goods., must be smaller than or equal to 4096.');
        }

        $this->container['extendInfo'] = $extendInfo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


