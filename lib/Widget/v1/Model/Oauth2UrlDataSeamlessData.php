<?php
/**
 * Oauth2UrlDataSeamlessData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\Widget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Widget API
 *
 * API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\Widget\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * Oauth2UrlDataSeamlessData Class Doc Comment
 *
 * @category Class
 * @description Option for binding process.Please refer sample below to know how to include seamlessData
 * @package  Dana\Widget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Oauth2UrlDataSeamlessData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Oauth2UrlData_seamlessData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'biz_scenario' => 'string',
        'mobile_number' => 'string',
        'verified_time' => 'string',
        'external_uid' => 'string',
        'device_id' => 'string',
        'skip_register_consult' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'biz_scenario' => null,
        'mobile_number' => null,
        'verified_time' => null,
        'external_uid' => null,
        'device_id' => null,
        'skip_register_consult' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'biz_scenario' => false,
        'mobile_number' => false,
        'verified_time' => false,
        'external_uid' => false,
        'device_id' => false,
        'skip_register_consult' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'biz_scenario' => 'bizScenario',
        'mobile_number' => 'mobileNumber',
        'verified_time' => 'verifiedTime',
        'external_uid' => 'externalUid',
        'device_id' => 'deviceId',
        'skip_register_consult' => 'skipRegisterConsult'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'biz_scenario' => 'setBizScenario',
        'mobile_number' => 'setMobileNumber',
        'verified_time' => 'setVerifiedTime',
        'external_uid' => 'setExternalUid',
        'device_id' => 'setDeviceId',
        'skip_register_consult' => 'setSkipRegisterConsult'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'biz_scenario' => 'getBizScenario',
        'mobile_number' => 'getMobileNumber',
        'verified_time' => 'getVerifiedTime',
        'external_uid' => 'getExternalUid',
        'device_id' => 'getDeviceId',
        'skip_register_consult' => 'getSkipRegisterConsult'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('biz_scenario', $data ?? [], null);
        $this->setIfExists('mobile_number', $data ?? [], null);
        $this->setIfExists('verified_time', $data ?? [], null);
        $this->setIfExists('external_uid', $data ?? [], null);
        $this->setIfExists('device_id', $data ?? [], null);
        $this->setIfExists('skip_register_consult', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets biz_scenario
     *
     * @return string|null
     */
    public function getBizScenario()
    {
        return $this->container['biz_scenario'];
    }

    /**
     * Sets biz_scenario
     *
     * @param string|null $biz_scenario Userâ€™s bizScenario
     *
     * @return self
     */
    public function setBizScenario($biz_scenario)
    {
        if (is_null($biz_scenario)) {
            throw new \InvalidArgumentException('non-nullable biz_scenario cannot be null');
        }
        $this->container['biz_scenario'] = $biz_scenario;

        return $this;
    }

    /**
     * Gets mobile_number
     *
     * @return string|null
     */
    public function getMobileNumber()
    {
        return $this->container['mobile_number'];
    }

    /**
     * Sets mobile_number
     *
     * @param string|null $mobile_number User's phone number. If this field is filled in, the user must log in with the number that has been included
     *
     * @return self
     */
    public function setMobileNumber($mobile_number)
    {
        if (is_null($mobile_number)) {
            throw new \InvalidArgumentException('non-nullable mobile_number cannot be null');
        }
        $this->container['mobile_number'] = $mobile_number;

        return $this;
    }

    /**
     * Gets verified_time
     *
     * @return string|null
     */
    public function getVerifiedTime()
    {
        return $this->container['verified_time'];
    }

    /**
     * Sets verified_time
     *
     * @param string|null $verified_time Value which states that the mobile number that has been included in seamlessData has verified ownership and does not require OTP verification by the provider, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
     *
     * @return self
     */
    public function setVerifiedTime($verified_time)
    {
        if (is_null($verified_time)) {
            throw new \InvalidArgumentException('non-nullable verified_time cannot be null');
        }
        $this->container['verified_time'] = $verified_time;

        return $this;
    }

    /**
     * Gets external_uid
     *
     * @return string|null
     */
    public function getExternalUid()
    {
        return $this->container['external_uid'];
    }

    /**
     * Sets external_uid
     *
     * @param string|null $external_uid User identifier on partner application
     *
     * @return self
     */
    public function setExternalUid($external_uid)
    {
        if (is_null($external_uid)) {
            throw new \InvalidArgumentException('non-nullable external_uid cannot be null');
        }
        $this->container['external_uid'] = $external_uid;

        return $this;
    }

    /**
     * Gets device_id
     *
     * @return string|null
     */
    public function getDeviceId()
    {
        return $this->container['device_id'];
    }

    /**
     * Sets device_id
     *
     * @param string|null $device_id User's device identifier
     *
     * @return self
     */
    public function setDeviceId($device_id)
    {
        if (is_null($device_id)) {
            throw new \InvalidArgumentException('non-nullable device_id cannot be null');
        }
        $this->container['device_id'] = $device_id;

        return $this;
    }

    /**
     * Gets skip_register_consult
     *
     * @return bool|null
     */
    public function getSkipRegisterConsult()
    {
        return $this->container['skip_register_consult'];
    }

    /**
     * Sets skip_register_consult
     *
     * @param bool|null $skip_register_consult Identifier to differentiate seamless registration flow. The possible values are true or false
     *
     * @return self
     */
    public function setSkipRegisterConsult($skip_register_consult)
    {
        if (is_null($skip_register_consult)) {
            throw new \InvalidArgumentException('non-nullable skip_register_consult cannot be null');
        }
        $this->container['skip_register_consult'] = $skip_register_consult;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


