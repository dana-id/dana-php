<?php
/**
 * Oauth2UrlDataSeamlessData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\Widget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Widget API
 *
 * API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\Widget\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * Oauth2UrlDataSeamlessData Class Doc Comment
 *
 * @category Class
 * @description Option for binding process.Please refer sample below to know how to include seamlessData
 * @package  Dana\Widget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Oauth2UrlDataSeamlessData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Oauth2UrlData_seamlessData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bizScenario' => 'string',
        'mobileNumber' => 'string',
        'verifiedTime' => 'string',
        'externalUid' => 'string',
        'deviceId' => 'string',
        'skipRegisterConsult' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bizScenario' => null,
        'mobileNumber' => null,
        'verifiedTime' => null,
        'externalUid' => null,
        'deviceId' => null,
        'skipRegisterConsult' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'bizScenario' => false,
        'mobileNumber' => false,
        'verifiedTime' => false,
        'externalUid' => false,
        'deviceId' => false,
        'skipRegisterConsult' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bizScenario' => 'bizScenario',
        'mobileNumber' => 'mobileNumber',
        'verifiedTime' => 'verifiedTime',
        'externalUid' => 'externalUid',
        'deviceId' => 'deviceId',
        'skipRegisterConsult' => 'skipRegisterConsult'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bizScenario' => 'setBizScenario',
        'mobileNumber' => 'setMobileNumber',
        'verifiedTime' => 'setVerifiedTime',
        'externalUid' => 'setExternalUid',
        'deviceId' => 'setDeviceId',
        'skipRegisterConsult' => 'setSkipRegisterConsult'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bizScenario' => 'getBizScenario',
        'mobileNumber' => 'getMobileNumber',
        'verifiedTime' => 'getVerifiedTime',
        'externalUid' => 'getExternalUid',
        'deviceId' => 'getDeviceId',
        'skipRegisterConsult' => 'getSkipRegisterConsult'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('bizScenario', $data ?? [], null);
        $this->setIfExists('mobileNumber', $data ?? [], null);
        $this->setIfExists('verifiedTime', $data ?? [], null);
        $this->setIfExists('externalUid', $data ?? [], null);
        $this->setIfExists('deviceId', $data ?? [], null);
        $this->setIfExists('skipRegisterConsult', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bizScenario
     *
     * @return string|null
     */
    public function getBizScenario()
    {
        return $this->container['bizScenario'];
    }

    /**
     * Sets bizScenario
     *
     * @param string|null $bizScenario Userâ€™s bizScenario
     *
     * @return self
     */
    public function setBizScenario($bizScenario)
    {
        if (is_null($bizScenario)) {
            throw new \InvalidArgumentException('non-nullable bizScenario cannot be null');
        }
        $this->container['bizScenario'] = $bizScenario;

        return $this;
    }

    /**
     * Gets mobileNumber
     *
     * @return string|null
     */
    public function getMobileNumber()
    {
        return $this->container['mobileNumber'];
    }

    /**
     * Sets mobileNumber
     *
     * @param string|null $mobileNumber User's phone number. If this field is filled in, the user must log in with the number that has been included
     *
     * @return self
     */
    public function setMobileNumber($mobileNumber)
    {
        if (is_null($mobileNumber)) {
            throw new \InvalidArgumentException('non-nullable mobileNumber cannot be null');
        }
        $this->container['mobileNumber'] = $mobileNumber;

        return $this;
    }

    /**
     * Gets verifiedTime
     *
     * @return string|null
     */
    public function getVerifiedTime()
    {
        return $this->container['verifiedTime'];
    }

    /**
     * Sets verifiedTime
     *
     * @param string|null $verifiedTime Value which states that the mobile number that has been included in seamlessData has verified ownership and does not require OTP verification by the provider, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
     *
     * @return self
     */
    public function setVerifiedTime($verifiedTime)
    {
        if (is_null($verifiedTime)) {
            throw new \InvalidArgumentException('non-nullable verifiedTime cannot be null');
        }
        $this->container['verifiedTime'] = $verifiedTime;

        return $this;
    }

    /**
     * Gets externalUid
     *
     * @return string|null
     */
    public function getExternalUid()
    {
        return $this->container['externalUid'];
    }

    /**
     * Sets externalUid
     *
     * @param string|null $externalUid User identifier on partner application
     *
     * @return self
     */
    public function setExternalUid($externalUid)
    {
        if (is_null($externalUid)) {
            throw new \InvalidArgumentException('non-nullable externalUid cannot be null');
        }
        $this->container['externalUid'] = $externalUid;

        return $this;
    }

    /**
     * Gets deviceId
     *
     * @return string|null
     */
    public function getDeviceId()
    {
        return $this->container['deviceId'];
    }

    /**
     * Sets deviceId
     *
     * @param string|null $deviceId User's device identifier
     *
     * @return self
     */
    public function setDeviceId($deviceId)
    {
        if (is_null($deviceId)) {
            throw new \InvalidArgumentException('non-nullable deviceId cannot be null');
        }
        $this->container['deviceId'] = $deviceId;

        return $this;
    }

    /**
     * Gets skipRegisterConsult
     *
     * @return bool|null
     */
    public function getSkipRegisterConsult()
    {
        return $this->container['skipRegisterConsult'];
    }

    /**
     * Sets skipRegisterConsult
     *
     * @param bool|null $skipRegisterConsult Identifier to differentiate seamless registration flow. The possible values are true or false
     *
     * @return self
     */
    public function setSkipRegisterConsult($skipRegisterConsult)
    {
        if (is_null($skipRegisterConsult)) {
            throw new \InvalidArgumentException('non-nullable skipRegisterConsult cannot be null');
        }
        $this->container['skipRegisterConsult'] = $skipRegisterConsult;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


