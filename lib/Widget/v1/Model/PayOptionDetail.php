<?php
/**
 * PayOptionDetail
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\Widget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Widget API
 *
 * API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\Widget\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * PayOptionDetail Class Doc Comment
 *
 * @category Class
 * @package  Dana\Widget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayOptionDetail implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PayOptionDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'payMethod' => 'string',
        'payOption' => 'string',
        'transAmount' => '\Dana\Widget\v1\Model\Money',
        'feeAmount' => '\Dana\Widget\v1\Model\Money',
        'cardToken' => 'string',
        'merchantToken' => 'string',
        'additionalInfo' => '\Dana\Widget\v1\Model\PayOptionDetailAdditionalInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'payMethod' => null,
        'payOption' => null,
        'transAmount' => null,
        'feeAmount' => null,
        'cardToken' => null,
        'merchantToken' => null,
        'additionalInfo' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'payMethod' => false,
        'payOption' => false,
        'transAmount' => false,
        'feeAmount' => false,
        'cardToken' => false,
        'merchantToken' => false,
        'additionalInfo' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payMethod' => 'payMethod',
        'payOption' => 'payOption',
        'transAmount' => 'transAmount',
        'feeAmount' => 'feeAmount',
        'cardToken' => 'cardToken',
        'merchantToken' => 'merchantToken',
        'additionalInfo' => 'additionalInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payMethod' => 'setPayMethod',
        'payOption' => 'setPayOption',
        'transAmount' => 'setTransAmount',
        'feeAmount' => 'setFeeAmount',
        'cardToken' => 'setCardToken',
        'merchantToken' => 'setMerchantToken',
        'additionalInfo' => 'setAdditionalInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payMethod' => 'getPayMethod',
        'payOption' => 'getPayOption',
        'transAmount' => 'getTransAmount',
        'feeAmount' => 'getFeeAmount',
        'cardToken' => 'getCardToken',
        'merchantToken' => 'getMerchantToken',
        'additionalInfo' => 'getAdditionalInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('payMethod', $data ?? [], null);
        $this->setIfExists('payOption', $data ?? [], null);
        $this->setIfExists('transAmount', $data ?? [], null);
        $this->setIfExists('feeAmount', $data ?? [], null);
        $this->setIfExists('cardToken', $data ?? [], null);
        $this->setIfExists('merchantToken', $data ?? [], null);
        $this->setIfExists('additionalInfo', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['payMethod'] === null) {
            $invalidProperties[] = "'payMethod' can't be null";
        }
        if ((mb_strlen($this->container['payMethod']) > 64)) {
            $invalidProperties[] = "invalid value for 'payMethod', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['payOption'] === null) {
            $invalidProperties[] = "'payOption' can't be null";
        }
        if ((mb_strlen($this->container['payOption']) > 64)) {
            $invalidProperties[] = "invalid value for 'payOption', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['cardToken']) && (mb_strlen($this->container['cardToken']) > 64)) {
            $invalidProperties[] = "invalid value for 'cardToken', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['merchantToken']) && (mb_strlen($this->container['merchantToken']) > 64)) {
            $invalidProperties[] = "invalid value for 'merchantToken', the character length must be smaller than or equal to 64.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payMethod
     *
     * @return string
     */
    public function getPayMethod()
    {
        return $this->container['payMethod'];
    }

    /**
     * Sets payMethod
     *
     * @param string $payMethod Payment Method, e.g. CREDIT_CARD
     *
     * @return self
     */
    public function setPayMethod($payMethod)
    {
        if (is_null($payMethod)) {
            throw new \InvalidArgumentException('non-nullable payMethod cannot be null');
        }
        if ((mb_strlen($payMethod) > 64)) {
            throw new \InvalidArgumentException('invalid length for $payMethod when calling PayOptionDetail., must be smaller than or equal to 64.');
        }

        $this->container['payMethod'] = $payMethod;

        return $this;
    }

    /**
     * Gets payOption
     *
     * @return string
     */
    public function getPayOption()
    {
        return $this->container['payOption'];
    }

    /**
     * Sets payOption
     *
     * @param string $payOption Payment option which shows the provider of this payment e.g. CREDIT_CARD_VISA
     *
     * @return self
     */
    public function setPayOption($payOption)
    {
        if (is_null($payOption)) {
            throw new \InvalidArgumentException('non-nullable payOption cannot be null');
        }
        if ((mb_strlen($payOption) > 64)) {
            throw new \InvalidArgumentException('invalid length for $payOption when calling PayOptionDetail., must be smaller than or equal to 64.');
        }

        $this->container['payOption'] = $payOption;

        return $this;
    }

    /**
     * Gets transAmount
     *
     * @return \Dana\Widget\v1\Model\Money|null
     */
    public function getTransAmount()
    {
        return $this->container['transAmount'];
    }

    /**
     * Sets transAmount
     *
     * @param \Dana\Widget\v1\Model\Money|null $transAmount Trans amount. Contains value and currency
     *
     * @return self
     */
    public function setTransAmount($transAmount)
    {
        if (is_null($transAmount)) {
            throw new \InvalidArgumentException('non-nullable transAmount cannot be null');
        }
        $this->container['transAmount'] = $transAmount;

        return $this;
    }

    /**
     * Gets feeAmount
     *
     * @return \Dana\Widget\v1\Model\Money|null
     */
    public function getFeeAmount()
    {
        return $this->container['feeAmount'];
    }

    /**
     * Sets feeAmount
     *
     * @param \Dana\Widget\v1\Model\Money|null $feeAmount Fee amount. Contains value and currency
     *
     * @return self
     */
    public function setFeeAmount($feeAmount)
    {
        if (is_null($feeAmount)) {
            throw new \InvalidArgumentException('non-nullable feeAmount cannot be null');
        }
        $this->container['feeAmount'] = $feeAmount;

        return $this;
    }

    /**
     * Gets cardToken
     *
     * @return string|null
     */
    public function getCardToken()
    {
        return $this->container['cardToken'];
    }

    /**
     * Sets cardToken
     *
     * @param string|null $cardToken Card token used for this payment
     *
     * @return self
     */
    public function setCardToken($cardToken)
    {
        if (is_null($cardToken)) {
            throw new \InvalidArgumentException('non-nullable cardToken cannot be null');
        }
        if ((mb_strlen($cardToken) > 64)) {
            throw new \InvalidArgumentException('invalid length for $cardToken when calling PayOptionDetail., must be smaller than or equal to 64.');
        }

        $this->container['cardToken'] = $cardToken;

        return $this;
    }

    /**
     * Gets merchantToken
     *
     * @return string|null
     */
    public function getMerchantToken()
    {
        return $this->container['merchantToken'];
    }

    /**
     * Sets merchantToken
     *
     * @param string|null $merchantToken Merchant token used for this payment
     *
     * @return self
     */
    public function setMerchantToken($merchantToken)
    {
        if (is_null($merchantToken)) {
            throw new \InvalidArgumentException('non-nullable merchantToken cannot be null');
        }
        if ((mb_strlen($merchantToken) > 64)) {
            throw new \InvalidArgumentException('invalid length for $merchantToken when calling PayOptionDetail., must be smaller than or equal to 64.');
        }

        $this->container['merchantToken'] = $merchantToken;

        return $this;
    }

    /**
     * Gets additionalInfo
     *
     * @return \Dana\Widget\v1\Model\PayOptionDetailAdditionalInfo|null
     */
    public function getAdditionalInfo()
    {
        return $this->container['additionalInfo'];
    }

    /**
     * Sets additionalInfo
     *
     * @param \Dana\Widget\v1\Model\PayOptionDetailAdditionalInfo|null $additionalInfo additionalInfo
     *
     * @return self
     */
    public function setAdditionalInfo($additionalInfo)
    {
        if (is_null($additionalInfo)) {
            throw new \InvalidArgumentException('non-nullable additionalInfo cannot be null');
        }
        $this->container['additionalInfo'] = $additionalInfo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


