<?php
/**
 * WidgetPaymentRequestAdditionalInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\Widget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Widget API
 *
 * API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\Widget\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * WidgetPaymentRequestAdditionalInfo Class Doc Comment
 *
 * @category Class
 * @package  Dana\Widget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WidgetPaymentRequestAdditionalInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WidgetPaymentRequestAdditionalInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'support_deep_link_checkout_url' => 'string',
        'phone_number' => 'string',
        'public_user_id' => 'string',
        'product_code' => 'string',
        'service_info' => '\Dana\Widget\v1\Model\ServiceInfo',
        'order' => '\Dana\Widget\v1\Model\Order',
        'mcc' => 'string',
        'env_info' => '\Dana\Widget\v1\Model\EnvInfo',
        'extend_info' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'support_deep_link_checkout_url' => null,
        'phone_number' => null,
        'public_user_id' => null,
        'product_code' => null,
        'service_info' => null,
        'order' => null,
        'mcc' => null,
        'env_info' => null,
        'extend_info' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'support_deep_link_checkout_url' => false,
        'phone_number' => false,
        'public_user_id' => false,
        'product_code' => false,
        'service_info' => false,
        'order' => false,
        'mcc' => false,
        'env_info' => false,
        'extend_info' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'support_deep_link_checkout_url' => 'supportDeepLinkCheckoutUrl',
        'phone_number' => 'phoneNumber',
        'public_user_id' => 'publicUserId',
        'product_code' => 'productCode',
        'service_info' => 'serviceInfo',
        'order' => 'order',
        'mcc' => 'mcc',
        'env_info' => 'envInfo',
        'extend_info' => 'extendInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'support_deep_link_checkout_url' => 'setSupportDeepLinkCheckoutUrl',
        'phone_number' => 'setPhoneNumber',
        'public_user_id' => 'setPublicUserId',
        'product_code' => 'setProductCode',
        'service_info' => 'setServiceInfo',
        'order' => 'setOrder',
        'mcc' => 'setMcc',
        'env_info' => 'setEnvInfo',
        'extend_info' => 'setExtendInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'support_deep_link_checkout_url' => 'getSupportDeepLinkCheckoutUrl',
        'phone_number' => 'getPhoneNumber',
        'public_user_id' => 'getPublicUserId',
        'product_code' => 'getProductCode',
        'service_info' => 'getServiceInfo',
        'order' => 'getOrder',
        'mcc' => 'getMcc',
        'env_info' => 'getEnvInfo',
        'extend_info' => 'getExtendInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('support_deep_link_checkout_url', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('public_user_id', $data ?? [], null);
        $this->setIfExists('product_code', $data ?? [], null);
        $this->setIfExists('service_info', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('mcc', $data ?? [], null);
        $this->setIfExists('env_info', $data ?? [], null);
        $this->setIfExists('extend_info', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['support_deep_link_checkout_url']) && (mb_strlen($this->container['support_deep_link_checkout_url']) > 64)) {
            $invalidProperties[] = "invalid value for 'support_deep_link_checkout_url', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['phone_number']) && (mb_strlen($this->container['phone_number']) > 64)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['public_user_id']) && (mb_strlen($this->container['public_user_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'public_user_id', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['product_code'] === null) {
            $invalidProperties[] = "'product_code' can't be null";
        }
        if ((mb_strlen($this->container['product_code']) > 32)) {
            $invalidProperties[] = "invalid value for 'product_code', the character length must be smaller than or equal to 32.";
        }

        if ($this->container['order'] === null) {
            $invalidProperties[] = "'order' can't be null";
        }
        if ($this->container['mcc'] === null) {
            $invalidProperties[] = "'mcc' can't be null";
        }
        if ((mb_strlen($this->container['mcc']) > 64)) {
            $invalidProperties[] = "invalid value for 'mcc', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['env_info'] === null) {
            $invalidProperties[] = "'env_info' can't be null";
        }
        if (!is_null($this->container['extend_info']) && (mb_strlen($this->container['extend_info']) > 4096)) {
            $invalidProperties[] = "invalid value for 'extend_info', the character length must be smaller than or equal to 4096.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets support_deep_link_checkout_url
     *
     * @return string|null
     */
    public function getSupportDeepLinkCheckoutUrl()
    {
        return $this->container['support_deep_link_checkout_url'];
    }

    /**
     * Sets support_deep_link_checkout_url
     *
     * @param string|null $support_deep_link_checkout_url Additional information of deeplink checkout URL. For Mini Program, DANA will treat as false
     *
     * @return self
     */
    public function setSupportDeepLinkCheckoutUrl($support_deep_link_checkout_url)
    {
        if (is_null($support_deep_link_checkout_url)) {
            throw new \InvalidArgumentException('non-nullable support_deep_link_checkout_url cannot be null');
        }
        if ((mb_strlen($support_deep_link_checkout_url) > 64)) {
            throw new \InvalidArgumentException('invalid length for $support_deep_link_checkout_url when calling WidgetPaymentRequestAdditionalInfo., must be smaller than or equal to 64.');
        }

        $this->container['support_deep_link_checkout_url'] = $support_deep_link_checkout_url;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number Additional information of user's phone number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            throw new \InvalidArgumentException('non-nullable phone_number cannot be null');
        }
        if ((mb_strlen($phone_number) > 64)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling WidgetPaymentRequestAdditionalInfo., must be smaller than or equal to 64.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets public_user_id
     *
     * @return string|null
     */
    public function getPublicUserId()
    {
        return $this->container['public_user_id'];
    }

    /**
     * Sets public_user_id
     *
     * @param string|null $public_user_id Additional information of public user's identifier
     *
     * @return self
     */
    public function setPublicUserId($public_user_id)
    {
        if (is_null($public_user_id)) {
            throw new \InvalidArgumentException('non-nullable public_user_id cannot be null');
        }
        if ((mb_strlen($public_user_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $public_user_id when calling WidgetPaymentRequestAdditionalInfo., must be smaller than or equal to 64.');
        }

        $this->container['public_user_id'] = $public_user_id;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string $product_code Additional information of product code
     *
     * @return self
     */
    public function setProductCode($product_code)
    {
        if (is_null($product_code)) {
            throw new \InvalidArgumentException('non-nullable product_code cannot be null');
        }
        if ((mb_strlen($product_code) > 32)) {
            throw new \InvalidArgumentException('invalid length for $product_code when calling WidgetPaymentRequestAdditionalInfo., must be smaller than or equal to 32.');
        }

        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets service_info
     *
     * @return \Dana\Widget\v1\Model\ServiceInfo|null
     */
    public function getServiceInfo()
    {
        return $this->container['service_info'];
    }

    /**
     * Sets service_info
     *
     * @param \Dana\Widget\v1\Model\ServiceInfo|null $service_info service_info
     *
     * @return self
     */
    public function setServiceInfo($service_info)
    {
        if (is_null($service_info)) {
            throw new \InvalidArgumentException('non-nullable service_info cannot be null');
        }
        $this->container['service_info'] = $service_info;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \Dana\Widget\v1\Model\Order
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \Dana\Widget\v1\Model\Order $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets mcc
     *
     * @return string
     */
    public function getMcc()
    {
        return $this->container['mcc'];
    }

    /**
     * Sets mcc
     *
     * @param string $mcc Additional information of merchant category code. This parameter is used to identify the type of business in which a merchant is engaged.
     *
     * @return self
     */
    public function setMcc($mcc)
    {
        if (is_null($mcc)) {
            throw new \InvalidArgumentException('non-nullable mcc cannot be null');
        }
        if ((mb_strlen($mcc) > 64)) {
            throw new \InvalidArgumentException('invalid length for $mcc when calling WidgetPaymentRequestAdditionalInfo., must be smaller than or equal to 64.');
        }

        $this->container['mcc'] = $mcc;

        return $this;
    }

    /**
     * Gets env_info
     *
     * @return \Dana\Widget\v1\Model\EnvInfo
     */
    public function getEnvInfo()
    {
        return $this->container['env_info'];
    }

    /**
     * Sets env_info
     *
     * @param \Dana\Widget\v1\Model\EnvInfo $env_info env_info
     *
     * @return self
     */
    public function setEnvInfo($env_info)
    {
        if (is_null($env_info)) {
            throw new \InvalidArgumentException('non-nullable env_info cannot be null');
        }
        $this->container['env_info'] = $env_info;

        return $this;
    }

    /**
     * Gets extend_info
     *
     * @return string|null
     */
    public function getExtendInfo()
    {
        return $this->container['extend_info'];
    }

    /**
     * Sets extend_info
     *
     * @param string|null $extend_info Additional information of extend
     *
     * @return self
     */
    public function setExtendInfo($extend_info)
    {
        if (is_null($extend_info)) {
            throw new \InvalidArgumentException('non-nullable extend_info cannot be null');
        }
        if ((mb_strlen($extend_info) > 4096)) {
            throw new \InvalidArgumentException('invalid length for $extend_info when calling WidgetPaymentRequestAdditionalInfo., must be smaller than or equal to 4096.');
        }

        $this->container['extend_info'] = $extend_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


