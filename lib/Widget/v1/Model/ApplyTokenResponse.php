<?php
/**
 * ApplyTokenResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\Widget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Widget API
 *
 * API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\Widget\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * ApplyTokenResponse Class Doc Comment
 *
 * @category Class
 * @package  Dana\Widget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApplyTokenResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ApplyTokenResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'responseCode' => 'string',
        'responseMessage' => 'string',
        'tokenType' => 'string',
        'accessToken' => 'string',
        'accessTokenExpiryTime' => 'string',
        'refreshToken' => 'string',
        'refreshTokenExpiryTime' => 'string',
        'additionalInfo' => '\Dana\Widget\v1\Model\ApplyTokenResponseAdditionalInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'responseCode' => null,
        'responseMessage' => null,
        'tokenType' => null,
        'accessToken' => null,
        'accessTokenExpiryTime' => null,
        'refreshToken' => null,
        'refreshTokenExpiryTime' => null,
        'additionalInfo' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'responseCode' => false,
        'responseMessage' => false,
        'tokenType' => false,
        'accessToken' => false,
        'accessTokenExpiryTime' => false,
        'refreshToken' => false,
        'refreshTokenExpiryTime' => false,
        'additionalInfo' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'responseCode' => 'responseCode',
        'responseMessage' => 'responseMessage',
        'tokenType' => 'tokenType',
        'accessToken' => 'accessToken',
        'accessTokenExpiryTime' => 'accessTokenExpiryTime',
        'refreshToken' => 'refreshToken',
        'refreshTokenExpiryTime' => 'refreshTokenExpiryTime',
        'additionalInfo' => 'additionalInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'responseCode' => 'setResponseCode',
        'responseMessage' => 'setResponseMessage',
        'tokenType' => 'setTokenType',
        'accessToken' => 'setAccessToken',
        'accessTokenExpiryTime' => 'setAccessTokenExpiryTime',
        'refreshToken' => 'setRefreshToken',
        'refreshTokenExpiryTime' => 'setRefreshTokenExpiryTime',
        'additionalInfo' => 'setAdditionalInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'responseCode' => 'getResponseCode',
        'responseMessage' => 'getResponseMessage',
        'tokenType' => 'getTokenType',
        'accessToken' => 'getAccessToken',
        'accessTokenExpiryTime' => 'getAccessTokenExpiryTime',
        'refreshToken' => 'getRefreshToken',
        'refreshTokenExpiryTime' => 'getRefreshTokenExpiryTime',
        'additionalInfo' => 'getAdditionalInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('responseCode', $data ?? [], null);
        $this->setIfExists('responseMessage', $data ?? [], null);
        $this->setIfExists('tokenType', $data ?? [], null);
        $this->setIfExists('accessToken', $data ?? [], null);
        $this->setIfExists('accessTokenExpiryTime', $data ?? [], null);
        $this->setIfExists('refreshToken', $data ?? [], null);
        $this->setIfExists('refreshTokenExpiryTime', $data ?? [], null);
        $this->setIfExists('additionalInfo', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['responseCode'] === null) {
            $invalidProperties[] = "'responseCode' can't be null";
        }
        if ((mb_strlen($this->container['responseCode']) > 7)) {
            $invalidProperties[] = "invalid value for 'responseCode', the character length must be smaller than or equal to 7.";
        }

        if ($this->container['responseMessage'] === null) {
            $invalidProperties[] = "'responseMessage' can't be null";
        }
        if ((mb_strlen($this->container['responseMessage']) > 150)) {
            $invalidProperties[] = "invalid value for 'responseMessage', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['tokenType']) && (mb_strlen($this->container['tokenType']) > 7)) {
            $invalidProperties[] = "invalid value for 'tokenType', the character length must be smaller than or equal to 7.";
        }

        if ($this->container['accessToken'] === null) {
            $invalidProperties[] = "'accessToken' can't be null";
        }
        if ((mb_strlen($this->container['accessToken']) > 512)) {
            $invalidProperties[] = "invalid value for 'accessToken', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['accessTokenExpiryTime']) && (mb_strlen($this->container['accessTokenExpiryTime']) > 25)) {
            $invalidProperties[] = "invalid value for 'accessTokenExpiryTime', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['accessTokenExpiryTime']) && !preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/", $this->container['accessTokenExpiryTime'])) {
            $invalidProperties[] = "invalid value for 'accessTokenExpiryTime', must be conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/.";
        }

        if (!is_null($this->container['refreshToken']) && (mb_strlen($this->container['refreshToken']) > 512)) {
            $invalidProperties[] = "invalid value for 'refreshToken', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['refreshTokenExpiryTime']) && (mb_strlen($this->container['refreshTokenExpiryTime']) > 25)) {
            $invalidProperties[] = "invalid value for 'refreshTokenExpiryTime', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['refreshTokenExpiryTime']) && !preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/", $this->container['refreshTokenExpiryTime'])) {
            $invalidProperties[] = "invalid value for 'refreshTokenExpiryTime', must be conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets responseCode
     *
     * @return string
     */
    public function getResponseCode()
    {
        return $this->container['responseCode'];
    }

    /**
     * Sets responseCode
     *
     * @param string $responseCode Response code. Refer to https://dashboard.dana.id/api-docs/read/110#HTML-ApplyToken-ResponseCodeandMessage
     *
     * @return self
     */
    public function setResponseCode($responseCode)
    {
        if (is_null($responseCode)) {
            throw new \InvalidArgumentException('non-nullable responseCode cannot be null');
        }
        if ((mb_strlen($responseCode) > 7)) {
            throw new \InvalidArgumentException('invalid length for $responseCode when calling ApplyTokenResponse., must be smaller than or equal to 7.');
        }

        $this->container['responseCode'] = $responseCode;

        return $this;
    }

    /**
     * Gets responseMessage
     *
     * @return string
     */
    public function getResponseMessage()
    {
        return $this->container['responseMessage'];
    }

    /**
     * Sets responseMessage
     *
     * @param string $responseMessage Response message. Refer to https://dashboard.dana.id/api-docs/read/110#HTML-ApplyToken-ResponseCodeandMessage
     *
     * @return self
     */
    public function setResponseMessage($responseMessage)
    {
        if (is_null($responseMessage)) {
            throw new \InvalidArgumentException('non-nullable responseMessage cannot be null');
        }
        if ((mb_strlen($responseMessage) > 150)) {
            throw new \InvalidArgumentException('invalid length for $responseMessage when calling ApplyTokenResponse., must be smaller than or equal to 150.');
        }

        $this->container['responseMessage'] = $responseMessage;

        return $this;
    }

    /**
     * Gets tokenType
     *
     * @return string|null
     */
    public function getTokenType()
    {
        return $this->container['tokenType'];
    }

    /**
     * Sets tokenType
     *
     * @param string|null $tokenType Token type. Present if successfully processed
     *
     * @return self
     */
    public function setTokenType($tokenType)
    {
        if (is_null($tokenType)) {
            throw new \InvalidArgumentException('non-nullable tokenType cannot be null');
        }
        if ((mb_strlen($tokenType) > 7)) {
            throw new \InvalidArgumentException('invalid length for $tokenType when calling ApplyTokenResponse., must be smaller than or equal to 7.');
        }

        $this->container['tokenType'] = $tokenType;

        return $this;
    }

    /**
     * Gets accessToken
     *
     * @return string
     */
    public function getAccessToken()
    {
        return $this->container['accessToken'];
    }

    /**
     * Sets accessToken
     *
     * @param string $accessToken This token is called Customer Token that will be used as a parameter on header in other API “Authorization-Customer”. Present if successfully processed
     *
     * @return self
     */
    public function setAccessToken($accessToken)
    {
        if (is_null($accessToken)) {
            throw new \InvalidArgumentException('non-nullable accessToken cannot be null');
        }
        if ((mb_strlen($accessToken) > 512)) {
            throw new \InvalidArgumentException('invalid length for $accessToken when calling ApplyTokenResponse., must be smaller than or equal to 512.');
        }

        $this->container['accessToken'] = $accessToken;

        return $this;
    }

    /**
     * Gets accessTokenExpiryTime
     *
     * @return string|null
     */
    public function getAccessTokenExpiryTime()
    {
        return $this->container['accessTokenExpiryTime'];
    }

    /**
     * Sets accessTokenExpiryTime
     *
     * @param string|null $accessTokenExpiryTime Expiry time for access token was given to user, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time). Present if successfully processed
     *
     * @return self
     */
    public function setAccessTokenExpiryTime($accessTokenExpiryTime)
    {
        if (is_null($accessTokenExpiryTime)) {
            throw new \InvalidArgumentException('non-nullable accessTokenExpiryTime cannot be null');
        }
        if ((mb_strlen($accessTokenExpiryTime) > 25)) {
            throw new \InvalidArgumentException('invalid length for $accessTokenExpiryTime when calling ApplyTokenResponse., must be smaller than or equal to 25.');
        }
        if ((!preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/", ObjectSerializer::toString($accessTokenExpiryTime)))) {
            throw new \InvalidArgumentException("invalid value for \$accessTokenExpiryTime when calling ApplyTokenResponse., must conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/.");
        }

        $this->container['accessTokenExpiryTime'] = $accessTokenExpiryTime;

        return $this;
    }

    /**
     * Gets refreshToken
     *
     * @return string|null
     */
    public function getRefreshToken()
    {
        return $this->container['refreshToken'];
    }

    /**
     * Sets refreshToken
     *
     * @param string|null $refreshToken This token is used for refresh session if existing token has been expired. Present if successfully processed
     *
     * @return self
     */
    public function setRefreshToken($refreshToken)
    {
        if (is_null($refreshToken)) {
            throw new \InvalidArgumentException('non-nullable refreshToken cannot be null');
        }
        if ((mb_strlen($refreshToken) > 512)) {
            throw new \InvalidArgumentException('invalid length for $refreshToken when calling ApplyTokenResponse., must be smaller than or equal to 512.');
        }

        $this->container['refreshToken'] = $refreshToken;

        return $this;
    }

    /**
     * Gets refreshTokenExpiryTime
     *
     * @return string|null
     */
    public function getRefreshTokenExpiryTime()
    {
        return $this->container['refreshTokenExpiryTime'];
    }

    /**
     * Sets refreshTokenExpiryTime
     *
     * @param string|null $refreshTokenExpiryTime Expiry time for refresh token was given to user, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time). Present if successfully processed
     *
     * @return self
     */
    public function setRefreshTokenExpiryTime($refreshTokenExpiryTime)
    {
        if (is_null($refreshTokenExpiryTime)) {
            throw new \InvalidArgumentException('non-nullable refreshTokenExpiryTime cannot be null');
        }
        if ((mb_strlen($refreshTokenExpiryTime) > 25)) {
            throw new \InvalidArgumentException('invalid length for $refreshTokenExpiryTime when calling ApplyTokenResponse., must be smaller than or equal to 25.');
        }
        if ((!preg_match("/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/", ObjectSerializer::toString($refreshTokenExpiryTime)))) {
            throw new \InvalidArgumentException("invalid value for \$refreshTokenExpiryTime when calling ApplyTokenResponse., must conform to the pattern /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/.");
        }

        $this->container['refreshTokenExpiryTime'] = $refreshTokenExpiryTime;

        return $this;
    }

    /**
     * Gets additionalInfo
     *
     * @return \Dana\Widget\v1\Model\ApplyTokenResponseAdditionalInfo|null
     */
    public function getAdditionalInfo()
    {
        return $this->container['additionalInfo'];
    }

    /**
     * Sets additionalInfo
     *
     * @param \Dana\Widget\v1\Model\ApplyTokenResponseAdditionalInfo|null $additionalInfo Additional information
     *
     * @return self
     */
    public function setAdditionalInfo($additionalInfo)
    {
        if (is_null($additionalInfo)) {
            throw new \InvalidArgumentException('non-nullable additionalInfo cannot be null');
        }
        $this->container['additionalInfo'] = $additionalInfo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


