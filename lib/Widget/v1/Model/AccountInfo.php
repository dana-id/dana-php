<?php
/**
 * AccountInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\Widget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Widget API
 *
 * API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\Widget\v1\Model;

use \ArrayAccess;
use \Dana\ObjectSerializer;
use \Dana\Model\ModelInterface;

/**
 * AccountInfo Class Doc Comment
 *
 * @category Class
 * @package  Dana\Widget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'balance_type' => 'string',
        'amount' => '\Dana\Widget\v1\Model\Money',
        'float_amount' => '\Dana\Widget\v1\Model\Money',
        'hold_amount' => '\Dana\Widget\v1\Model\Money',
        'available_balance' => '\Dana\Widget\v1\Model\Money',
        'ledger_balance' => '\Dana\Widget\v1\Model\Money',
        'current_multilateral_limit' => '\Dana\Widget\v1\Model\Money',
        'registration_status_code' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'balance_type' => null,
        'amount' => null,
        'float_amount' => null,
        'hold_amount' => null,
        'available_balance' => null,
        'ledger_balance' => null,
        'current_multilateral_limit' => null,
        'registration_status_code' => null,
        'status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'balance_type' => false,
        'amount' => false,
        'float_amount' => false,
        'hold_amount' => false,
        'available_balance' => false,
        'ledger_balance' => false,
        'current_multilateral_limit' => false,
        'registration_status_code' => false,
        'status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'balance_type' => 'balanceType',
        'amount' => 'amount',
        'float_amount' => 'floatAmount',
        'hold_amount' => 'holdAmount',
        'available_balance' => 'availableBalance',
        'ledger_balance' => 'ledgerBalance',
        'current_multilateral_limit' => 'currentMultilateralLimit',
        'registration_status_code' => 'registrationStatusCode',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'balance_type' => 'setBalanceType',
        'amount' => 'setAmount',
        'float_amount' => 'setFloatAmount',
        'hold_amount' => 'setHoldAmount',
        'available_balance' => 'setAvailableBalance',
        'ledger_balance' => 'setLedgerBalance',
        'current_multilateral_limit' => 'setCurrentMultilateralLimit',
        'registration_status_code' => 'setRegistrationStatusCode',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'balance_type' => 'getBalanceType',
        'amount' => 'getAmount',
        'float_amount' => 'getFloatAmount',
        'hold_amount' => 'getHoldAmount',
        'available_balance' => 'getAvailableBalance',
        'ledger_balance' => 'getLedgerBalance',
        'current_multilateral_limit' => 'getCurrentMultilateralLimit',
        'registration_status_code' => 'getRegistrationStatusCode',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('balance_type', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('float_amount', $data ?? [], null);
        $this->setIfExists('hold_amount', $data ?? [], null);
        $this->setIfExists('available_balance', $data ?? [], null);
        $this->setIfExists('ledger_balance', $data ?? [], null);
        $this->setIfExists('current_multilateral_limit', $data ?? [], null);
        $this->setIfExists('registration_status_code', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['balance_type']) && (mb_strlen($this->container['balance_type']) > 70)) {
            $invalidProperties[] = "invalid value for 'balance_type', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['registration_status_code']) && (mb_strlen($this->container['registration_status_code']) > 4)) {
            $invalidProperties[] = "invalid value for 'registration_status_code', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['status']) && (mb_strlen($this->container['status']) > 4)) {
            $invalidProperties[] = "invalid value for 'status', the character length must be smaller than or equal to 4.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets balance_type
     *
     * @return string|null
     */
    public function getBalanceType()
    {
        return $this->container['balance_type'];
    }

    /**
     * Sets balance_type
     *
     * @param string|null $balance_type Account information of balance type to specify which balance type expected to be returned. Will return all available balance type if this parameter empty
     *
     * @return self
     */
    public function setBalanceType($balance_type)
    {
        if (is_null($balance_type)) {
            throw new \InvalidArgumentException('non-nullable balance_type cannot be null');
        }
        if ((mb_strlen($balance_type) > 70)) {
            throw new \InvalidArgumentException('invalid length for $balance_type when calling AccountInfo., must be smaller than or equal to 70.');
        }

        $this->container['balance_type'] = $balance_type;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \Dana\Widget\v1\Model\Money|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \Dana\Widget\v1\Model\Money|null $amount Account information of amount which include the net active amount. Contains two sub-fields:<br> 1. Value: Amount, including the cents<br> 2. Currency: Currency code based on ISO
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets float_amount
     *
     * @return \Dana\Widget\v1\Model\Money|null
     */
    public function getFloatAmount()
    {
        return $this->container['float_amount'];
    }

    /**
     * Sets float_amount
     *
     * @param \Dana\Widget\v1\Model\Money|null $float_amount Account information of float amount which include the inactive amount due to cut off period. Contains two sub-fields:<br> 1. Value: Amount, including the cents<br> 2. Currency: Currency code based on ISO
     *
     * @return self
     */
    public function setFloatAmount($float_amount)
    {
        if (is_null($float_amount)) {
            throw new \InvalidArgumentException('non-nullable float_amount cannot be null');
        }
        $this->container['float_amount'] = $float_amount;

        return $this;
    }

    /**
     * Gets hold_amount
     *
     * @return \Dana\Widget\v1\Model\Money|null
     */
    public function getHoldAmount()
    {
        return $this->container['hold_amount'];
    }

    /**
     * Sets hold_amount
     *
     * @param \Dana\Widget\v1\Model\Money|null $hold_amount Account information of hold amount which include the unusable amount due to certain type of transaction. Contains two sub-fields:<br> 1. Value: Amount, including the cents<br> 2. Currency: Currency code based on ISO
     *
     * @return self
     */
    public function setHoldAmount($hold_amount)
    {
        if (is_null($hold_amount)) {
            throw new \InvalidArgumentException('non-nullable hold_amount cannot be null');
        }
        $this->container['hold_amount'] = $hold_amount;

        return $this;
    }

    /**
     * Gets available_balance
     *
     * @return \Dana\Widget\v1\Model\Money|null
     */
    public function getAvailableBalance()
    {
        return $this->container['available_balance'];
    }

    /**
     * Sets available_balance
     *
     * @param \Dana\Widget\v1\Model\Money|null $available_balance Account information of available balance which include the active amount that can be used for transaction. Contains two sub-fields:<br> 1. Value: Amount, including the cents<br> 2. Currency: Currency code based on ISO
     *
     * @return self
     */
    public function setAvailableBalance($available_balance)
    {
        if (is_null($available_balance)) {
            throw new \InvalidArgumentException('non-nullable available_balance cannot be null');
        }
        $this->container['available_balance'] = $available_balance;

        return $this;
    }

    /**
     * Gets ledger_balance
     *
     * @return \Dana\Widget\v1\Model\Money|null
     */
    public function getLedgerBalance()
    {
        return $this->container['ledger_balance'];
    }

    /**
     * Sets ledger_balance
     *
     * @param \Dana\Widget\v1\Model\Money|null $ledger_balance Account information of ledger balance which include the starting balance for this day. Contains two sub-fields:<br> 1. Value: Amount, including the cents<br> 2. Currency: Currency code based on ISO
     *
     * @return self
     */
    public function setLedgerBalance($ledger_balance)
    {
        if (is_null($ledger_balance)) {
            throw new \InvalidArgumentException('non-nullable ledger_balance cannot be null');
        }
        $this->container['ledger_balance'] = $ledger_balance;

        return $this;
    }

    /**
     * Gets current_multilateral_limit
     *
     * @return \Dana\Widget\v1\Model\Money|null
     */
    public function getCurrentMultilateralLimit()
    {
        return $this->container['current_multilateral_limit'];
    }

    /**
     * Sets current_multilateral_limit
     *
     * @param \Dana\Widget\v1\Model\Money|null $current_multilateral_limit Account information of current multilateral limit. Contains two sub-fields:<br> 1. Value: Amount, including the cents<br> 2. Currency: Currency code based on ISO
     *
     * @return self
     */
    public function setCurrentMultilateralLimit($current_multilateral_limit)
    {
        if (is_null($current_multilateral_limit)) {
            throw new \InvalidArgumentException('non-nullable current_multilateral_limit cannot be null');
        }
        $this->container['current_multilateral_limit'] = $current_multilateral_limit;

        return $this;
    }

    /**
     * Gets registration_status_code
     *
     * @return string|null
     */
    public function getRegistrationStatusCode()
    {
        return $this->container['registration_status_code'];
    }

    /**
     * Sets registration_status_code
     *
     * @param string|null $registration_status_code Account information of customer registration status
     *
     * @return self
     */
    public function setRegistrationStatusCode($registration_status_code)
    {
        if (is_null($registration_status_code)) {
            throw new \InvalidArgumentException('non-nullable registration_status_code cannot be null');
        }
        if ((mb_strlen($registration_status_code) > 4)) {
            throw new \InvalidArgumentException('invalid length for $registration_status_code when calling AccountInfo., must be smaller than or equal to 4.');
        }

        $this->container['registration_status_code'] = $registration_status_code;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Account information of status. The values include:<br> 1 = Active Account<br> 2 = Closed Account<br> 4 = New Account<br> 6 = Restricted Account<br> 7 = Frozen Account
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        if ((mb_strlen($status) > 4)) {
            throw new \InvalidArgumentException('invalid length for $status when calling AccountInfo., must be smaller than or equal to 4.');
        }

        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


