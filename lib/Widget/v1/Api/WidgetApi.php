<?php
/**
 * WidgetApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Dana\Widget
 * @author   DANA Indonesia
 * @link     https://dashboard.dana.id/
 */

/**
 * Widget API
 *
 * API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dana\Widget\v1\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Dana\ApiException;
use Dana\Configuration;
use Dana\HeaderSelector;
use Dana\ObjectSerializer;
use Dana\Utils\SnapHeader;

/**
 * WidgetApi Class Doc Comment
 *
 * @category Class
 * @package  Dana\Widget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WidgetApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'accountUnbinding' => [
            'application/json',
        ],
        'applyOTT' => [
            'application/json',
        ],
        'applyToken' => [
            'application/json',
        ],
        'balanceInquiry' => [
            'application/json',
        ],
        'cancelOrder' => [
            'application/json',
        ],
        'queryPayment' => [
            'application/json',
        ],
        'queryUserProfile' => [
            'application/json',
        ],
        'refundOrder' => [
            'application/json',
        ],
        'widgetPayment' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation accountUnbinding
     *
     * Account unbinding - Binding
     *
     * @param  \Dana\Widget\v1\Model\AccountUnbindingRequest $accountUnbindingRequest accountUnbindingRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountUnbinding'] to see the possible values for this operation
     *
     * @throws \Dana\Widget\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dana\Widget\v1\Model\AccountUnbindingResponse
     */
    public function accountUnbinding($accountUnbindingRequest, string $contentType = self::contentTypes['accountUnbinding'][0])
    {
        list($response) = $this->accountUnbindingWithHttpInfo($accountUnbindingRequest, $contentType);
        return $response;
    }

    /**
     * Operation accountUnbindingWithHttpInfo
     *
     * Account unbinding - Binding
     *
     * @param  \Dana\Widget\v1\Model\AccountUnbindingRequest $accountUnbindingRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountUnbinding'] to see the possible values for this operation
     *
     * @throws \Dana\Widget\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dana\Widget\v1\Model\AccountUnbindingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountUnbindingWithHttpInfo($accountUnbindingRequest, string $contentType = self::contentTypes['accountUnbinding'][0])
    {
        $request = $this->accountUnbindingRequest($accountUnbindingRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Dana\Widget\v1\Model\AccountUnbindingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dana\Widget\v1\Model\AccountUnbindingResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dana\Widget\v1\Model\AccountUnbindingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Dana\Widget\v1\Model\AccountUnbindingResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dana\Widget\v1\Model\AccountUnbindingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountUnbindingAsync
     *
     * Account unbinding - Binding
     *
     * @param  \Dana\Widget\v1\Model\AccountUnbindingRequest $accountUnbindingRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountUnbinding'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountUnbindingAsync($accountUnbindingRequest, string $contentType = self::contentTypes['accountUnbinding'][0])
    {
        return $this->accountUnbindingAsyncWithHttpInfo($accountUnbindingRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountUnbindingAsyncWithHttpInfo
     *
     * Account unbinding - Binding
     *
     * @param  \Dana\Widget\v1\Model\AccountUnbindingRequest $accountUnbindingRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountUnbinding'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountUnbindingAsyncWithHttpInfo($accountUnbindingRequest, string $contentType = self::contentTypes['accountUnbinding'][0])
    {
        $returnType = '\Dana\Widget\v1\Model\AccountUnbindingResponse';
        $request = $this->accountUnbindingRequest($accountUnbindingRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountUnbinding'
     *
     * @param  \Dana\Widget\v1\Model\AccountUnbindingRequest $accountUnbindingRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountUnbinding'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountUnbindingRequest($accountUnbindingRequest, string $contentType = self::contentTypes['accountUnbinding'][0])
    {

        // verify the required parameter 'accountUnbindingRequest' is set
        if ($accountUnbindingRequest === null || (is_array($accountUnbindingRequest) && count($accountUnbindingRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountUnbindingRequest when calling accountUnbinding'
            );
        }


        $resourcePath = '/v1.0/registration-account-unbinding.htm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($accountUnbindingRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($accountUnbindingRequest));
            } else {
                $httpBody = $accountUnbindingRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // Generate signature and add security headers for DANA API if private key is configured
        $privateKey = $this->config->getApiKeyWithPrefix('PRIVATE_KEY');
        $privateKeyPath = $this->config->getApiKeyWithPrefix('PRIVATE_KEY_PATH');
        $clientKey = $this->config->getApiKeyWithPrefix('X_PARTNER_ID');
        if (isset($accountUnbindingRequest)) {
            $resourcePathForSignature = '/v1.0/registration-account-unbinding.htm';
            if ($accountUnbindingRequest !== null) {
                $resourcePathForSignature = str_replace(
                    '{' . 'AccountUnbindingRequest' . '}',
                    ObjectSerializer::toPathValue($accountUnbindingRequest),
                    $resourcePathForSignature
                );
            }

            // Generate security headers using SnapHeader utility
            $bodyJson = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($accountUnbindingRequest));
            
            // Determine the signature scenario based on operation ID
            $operationId = 'accountUnbinding';
            
            // Set scenario based on operation ID using PHP comparison
            if (strpos($operationId, 'applyToken') !== false) {
                // SNAP signature scenario: APPLY TOKEN
                $scenario = SnapHeader::SCENARIO_APPLY_TOKEN;
            } else if (strpos($operationId, 'applyOTT') !== false) {
                // SNAP signature scenario: APPLY OTT
                $scenario = SnapHeader::SCENARIO_APPLY_OTT;
            } else if (strpos($operationId, 'accountUnbinding') !== false) {
                // SNAP signature scenario: ACCOUNT UNBINDING
                $scenario = SnapHeader::SCENARIO_UNBINDING_ACCOUNT;
            } else if (strpos($operationId, 'balanceInquiry') !== false) {
                // SNAP signature scenario: BALANCE INQUIRY
                $scenario = SnapHeader::SCENARIO_BALANCE_INQUIRY;
            } else {
                // Default B2B signature scenario
                $scenario = '';
            }
            $snapHeaders = SnapHeader::generateHeaders('POST', $resourcePathForSignature, $bodyJson, $scenario, $this->config);
            
            // Add security headers to the request
            foreach ($snapHeaders as $key => $value) {
                $headers[$key] = $value;
            }
        }

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation applyOTT
     *
     * Apply OTT - Widget
     *
     * @param  \Dana\Widget\v1\Model\ApplyOTTRequest $applyOTTRequest applyOTTRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyOTT'] to see the possible values for this operation
     *
     * @throws \Dana\Widget\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dana\Widget\v1\Model\ApplyOTTResponse
     */
    public function applyOTT($applyOTTRequest, string $contentType = self::contentTypes['applyOTT'][0])
    {
        list($response) = $this->applyOTTWithHttpInfo($applyOTTRequest, $contentType);
        return $response;
    }

    /**
     * Operation applyOTTWithHttpInfo
     *
     * Apply OTT - Widget
     *
     * @param  \Dana\Widget\v1\Model\ApplyOTTRequest $applyOTTRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyOTT'] to see the possible values for this operation
     *
     * @throws \Dana\Widget\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dana\Widget\v1\Model\ApplyOTTResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function applyOTTWithHttpInfo($applyOTTRequest, string $contentType = self::contentTypes['applyOTT'][0])
    {
        $request = $this->applyOTTRequest($applyOTTRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Dana\Widget\v1\Model\ApplyOTTResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dana\Widget\v1\Model\ApplyOTTResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dana\Widget\v1\Model\ApplyOTTResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Dana\Widget\v1\Model\ApplyOTTResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dana\Widget\v1\Model\ApplyOTTResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation applyOTTAsync
     *
     * Apply OTT - Widget
     *
     * @param  \Dana\Widget\v1\Model\ApplyOTTRequest $applyOTTRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyOTT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyOTTAsync($applyOTTRequest, string $contentType = self::contentTypes['applyOTT'][0])
    {
        return $this->applyOTTAsyncWithHttpInfo($applyOTTRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation applyOTTAsyncWithHttpInfo
     *
     * Apply OTT - Widget
     *
     * @param  \Dana\Widget\v1\Model\ApplyOTTRequest $applyOTTRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyOTT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyOTTAsyncWithHttpInfo($applyOTTRequest, string $contentType = self::contentTypes['applyOTT'][0])
    {
        $returnType = '\Dana\Widget\v1\Model\ApplyOTTResponse';
        $request = $this->applyOTTRequest($applyOTTRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'applyOTT'
     *
     * @param  \Dana\Widget\v1\Model\ApplyOTTRequest $applyOTTRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyOTT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function applyOTTRequest($applyOTTRequest, string $contentType = self::contentTypes['applyOTT'][0])
    {

        // verify the required parameter 'applyOTTRequest' is set
        if ($applyOTTRequest === null || (is_array($applyOTTRequest) && count($applyOTTRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $applyOTTRequest when calling applyOTT'
            );
        }


        $resourcePath = '/rest/v1.1/qr/apply-ott';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($applyOTTRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($applyOTTRequest));
            } else {
                $httpBody = $applyOTTRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // Generate signature and add security headers for DANA API if private key is configured
        $privateKey = $this->config->getApiKeyWithPrefix('PRIVATE_KEY');
        $privateKeyPath = $this->config->getApiKeyWithPrefix('PRIVATE_KEY_PATH');
        $clientKey = $this->config->getApiKeyWithPrefix('X_PARTNER_ID');
        if (isset($applyOTTRequest)) {
            $resourcePathForSignature = '/rest/v1.1/qr/apply-ott';
            if ($applyOTTRequest !== null) {
                $resourcePathForSignature = str_replace(
                    '{' . 'ApplyOTTRequest' . '}',
                    ObjectSerializer::toPathValue($applyOTTRequest),
                    $resourcePathForSignature
                );
            }

            // Generate security headers using SnapHeader utility
            $bodyJson = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($applyOTTRequest));
            
            // Determine the signature scenario based on operation ID
            $operationId = 'applyOTT';
            
            // Set scenario based on operation ID using PHP comparison
            if (strpos($operationId, 'applyToken') !== false) {
                // SNAP signature scenario: APPLY TOKEN
                $scenario = SnapHeader::SCENARIO_APPLY_TOKEN;
            } else if (strpos($operationId, 'applyOTT') !== false) {
                // SNAP signature scenario: APPLY OTT
                $scenario = SnapHeader::SCENARIO_APPLY_OTT;
            } else if (strpos($operationId, 'accountUnbinding') !== false) {
                // SNAP signature scenario: ACCOUNT UNBINDING
                $scenario = SnapHeader::SCENARIO_UNBINDING_ACCOUNT;
            } else if (strpos($operationId, 'balanceInquiry') !== false) {
                // SNAP signature scenario: BALANCE INQUIRY
                $scenario = SnapHeader::SCENARIO_BALANCE_INQUIRY;
            } else {
                // Default B2B signature scenario
                $scenario = '';
            }
            $snapHeaders = SnapHeader::generateHeaders('POST', $resourcePathForSignature, $bodyJson, $scenario, $this->config);
            
            // Add security headers to the request
            foreach ($snapHeaders as $key => $value) {
                $headers[$key] = $value;
            }
        }

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation applyToken
     *
     * Apply Token, required by Apply OTT - Binding
     *
     * @param  \Dana\Widget\v1\Model\ApplyTokenRequest $applyTokenRequest applyTokenRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyToken'] to see the possible values for this operation
     *
     * @throws \Dana\Widget\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dana\Widget\v1\Model\ApplyTokenResponse
     */
    public function applyToken($applyTokenRequest, string $contentType = self::contentTypes['applyToken'][0])
    {
        list($response) = $this->applyTokenWithHttpInfo($applyTokenRequest, $contentType);
        return $response;
    }

    /**
     * Operation applyTokenWithHttpInfo
     *
     * Apply Token, required by Apply OTT - Binding
     *
     * @param  \Dana\Widget\v1\Model\ApplyTokenRequest $applyTokenRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyToken'] to see the possible values for this operation
     *
     * @throws \Dana\Widget\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dana\Widget\v1\Model\ApplyTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function applyTokenWithHttpInfo($applyTokenRequest, string $contentType = self::contentTypes['applyToken'][0])
    {
        $request = $this->applyTokenRequest($applyTokenRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Dana\Widget\v1\Model\ApplyTokenResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dana\Widget\v1\Model\ApplyTokenResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dana\Widget\v1\Model\ApplyTokenResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Dana\Widget\v1\Model\ApplyTokenResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dana\Widget\v1\Model\ApplyTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation applyTokenAsync
     *
     * Apply Token, required by Apply OTT - Binding
     *
     * @param  \Dana\Widget\v1\Model\ApplyTokenRequest $applyTokenRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyTokenAsync($applyTokenRequest, string $contentType = self::contentTypes['applyToken'][0])
    {
        return $this->applyTokenAsyncWithHttpInfo($applyTokenRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation applyTokenAsyncWithHttpInfo
     *
     * Apply Token, required by Apply OTT - Binding
     *
     * @param  \Dana\Widget\v1\Model\ApplyTokenRequest $applyTokenRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyTokenAsyncWithHttpInfo($applyTokenRequest, string $contentType = self::contentTypes['applyToken'][0])
    {
        $returnType = '\Dana\Widget\v1\Model\ApplyTokenResponse';
        $request = $this->applyTokenRequest($applyTokenRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'applyToken'
     *
     * @param  \Dana\Widget\v1\Model\ApplyTokenRequest $applyTokenRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function applyTokenRequest($applyTokenRequest, string $contentType = self::contentTypes['applyToken'][0])
    {

        // verify the required parameter 'applyTokenRequest' is set
        if ($applyTokenRequest === null || (is_array($applyTokenRequest) && count($applyTokenRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $applyTokenRequest when calling applyToken'
            );
        }


        $resourcePath = '/v1.0/access-token/b2b2c.htm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($applyTokenRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($applyTokenRequest));
            } else {
                $httpBody = $applyTokenRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // Generate signature and add security headers for DANA API if private key is configured
        $privateKey = $this->config->getApiKeyWithPrefix('PRIVATE_KEY');
        $privateKeyPath = $this->config->getApiKeyWithPrefix('PRIVATE_KEY_PATH');
        $clientKey = $this->config->getApiKeyWithPrefix('X_PARTNER_ID');
        if (isset($applyTokenRequest)) {
            $resourcePathForSignature = '/v1.0/access-token/b2b2c.htm';
            if ($applyTokenRequest !== null) {
                $resourcePathForSignature = str_replace(
                    '{' . 'ApplyTokenRequest' . '}',
                    ObjectSerializer::toPathValue($applyTokenRequest),
                    $resourcePathForSignature
                );
            }

            // Generate security headers using SnapHeader utility
            $bodyJson = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($applyTokenRequest));
            
            // Determine the signature scenario based on operation ID
            $operationId = 'applyToken';
            
            // Set scenario based on operation ID using PHP comparison
            if (strpos($operationId, 'applyToken') !== false) {
                // SNAP signature scenario: APPLY TOKEN
                $scenario = SnapHeader::SCENARIO_APPLY_TOKEN;
            } else if (strpos($operationId, 'applyOTT') !== false) {
                // SNAP signature scenario: APPLY OTT
                $scenario = SnapHeader::SCENARIO_APPLY_OTT;
            } else if (strpos($operationId, 'accountUnbinding') !== false) {
                // SNAP signature scenario: ACCOUNT UNBINDING
                $scenario = SnapHeader::SCENARIO_UNBINDING_ACCOUNT;
            } else if (strpos($operationId, 'balanceInquiry') !== false) {
                // SNAP signature scenario: BALANCE INQUIRY
                $scenario = SnapHeader::SCENARIO_BALANCE_INQUIRY;
            } else {
                // Default B2B signature scenario
                $scenario = '';
            }
            $snapHeaders = SnapHeader::generateHeaders('POST', $resourcePathForSignature, $bodyJson, $scenario, $this->config);
            
            // Add security headers to the request
            foreach ($snapHeaders as $key => $value) {
                $headers[$key] = $value;
            }
        }

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation balanceInquiry
     *
     * Balance Inquiry
     *
     * @param  \Dana\Widget\v1\Model\BalanceInquiryRequest $balanceInquiryRequest balanceInquiryRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['balanceInquiry'] to see the possible values for this operation
     *
     * @throws \Dana\Widget\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dana\Widget\v1\Model\BalanceInquiryResponse
     */
    public function balanceInquiry($balanceInquiryRequest, string $contentType = self::contentTypes['balanceInquiry'][0])
    {
        list($response) = $this->balanceInquiryWithHttpInfo($balanceInquiryRequest, $contentType);
        return $response;
    }

    /**
     * Operation balanceInquiryWithHttpInfo
     *
     * Balance Inquiry
     *
     * @param  \Dana\Widget\v1\Model\BalanceInquiryRequest $balanceInquiryRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['balanceInquiry'] to see the possible values for this operation
     *
     * @throws \Dana\Widget\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dana\Widget\v1\Model\BalanceInquiryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function balanceInquiryWithHttpInfo($balanceInquiryRequest, string $contentType = self::contentTypes['balanceInquiry'][0])
    {
        $request = $this->balanceInquiryRequest($balanceInquiryRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Dana\Widget\v1\Model\BalanceInquiryResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dana\Widget\v1\Model\BalanceInquiryResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dana\Widget\v1\Model\BalanceInquiryResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Dana\Widget\v1\Model\BalanceInquiryResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dana\Widget\v1\Model\BalanceInquiryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation balanceInquiryAsync
     *
     * Balance Inquiry
     *
     * @param  \Dana\Widget\v1\Model\BalanceInquiryRequest $balanceInquiryRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['balanceInquiry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function balanceInquiryAsync($balanceInquiryRequest, string $contentType = self::contentTypes['balanceInquiry'][0])
    {
        return $this->balanceInquiryAsyncWithHttpInfo($balanceInquiryRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation balanceInquiryAsyncWithHttpInfo
     *
     * Balance Inquiry
     *
     * @param  \Dana\Widget\v1\Model\BalanceInquiryRequest $balanceInquiryRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['balanceInquiry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function balanceInquiryAsyncWithHttpInfo($balanceInquiryRequest, string $contentType = self::contentTypes['balanceInquiry'][0])
    {
        $returnType = '\Dana\Widget\v1\Model\BalanceInquiryResponse';
        $request = $this->balanceInquiryRequest($balanceInquiryRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'balanceInquiry'
     *
     * @param  \Dana\Widget\v1\Model\BalanceInquiryRequest $balanceInquiryRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['balanceInquiry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function balanceInquiryRequest($balanceInquiryRequest, string $contentType = self::contentTypes['balanceInquiry'][0])
    {

        // verify the required parameter 'balanceInquiryRequest' is set
        if ($balanceInquiryRequest === null || (is_array($balanceInquiryRequest) && count($balanceInquiryRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $balanceInquiryRequest when calling balanceInquiry'
            );
        }


        $resourcePath = '/v1.0/balance-inquiry.htm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($balanceInquiryRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($balanceInquiryRequest));
            } else {
                $httpBody = $balanceInquiryRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // Generate signature and add security headers for DANA API if private key is configured
        $privateKey = $this->config->getApiKeyWithPrefix('PRIVATE_KEY');
        $privateKeyPath = $this->config->getApiKeyWithPrefix('PRIVATE_KEY_PATH');
        $clientKey = $this->config->getApiKeyWithPrefix('X_PARTNER_ID');
        if (isset($balanceInquiryRequest)) {
            $resourcePathForSignature = '/v1.0/balance-inquiry.htm';
            if ($balanceInquiryRequest !== null) {
                $resourcePathForSignature = str_replace(
                    '{' . 'BalanceInquiryRequest' . '}',
                    ObjectSerializer::toPathValue($balanceInquiryRequest),
                    $resourcePathForSignature
                );
            }

            // Generate security headers using SnapHeader utility
            $bodyJson = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($balanceInquiryRequest));
            
            // Determine the signature scenario based on operation ID
            $operationId = 'balanceInquiry';
            
            // Set scenario based on operation ID using PHP comparison
            if (strpos($operationId, 'applyToken') !== false) {
                // SNAP signature scenario: APPLY TOKEN
                $scenario = SnapHeader::SCENARIO_APPLY_TOKEN;
            } else if (strpos($operationId, 'applyOTT') !== false) {
                // SNAP signature scenario: APPLY OTT
                $scenario = SnapHeader::SCENARIO_APPLY_OTT;
            } else if (strpos($operationId, 'accountUnbinding') !== false) {
                // SNAP signature scenario: ACCOUNT UNBINDING
                $scenario = SnapHeader::SCENARIO_UNBINDING_ACCOUNT;
            } else if (strpos($operationId, 'balanceInquiry') !== false) {
                // SNAP signature scenario: BALANCE INQUIRY
                $scenario = SnapHeader::SCENARIO_BALANCE_INQUIRY;
            } else {
                // Default B2B signature scenario
                $scenario = '';
            }
            $snapHeaders = SnapHeader::generateHeaders('POST', $resourcePathForSignature, $bodyJson, $scenario, $this->config);
            
            // Add security headers to the request
            foreach ($snapHeaders as $key => $value) {
                $headers[$key] = $value;
            }
        }

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelOrder
     *
     * Cancel Order - Widget
     *
     * @param  \Dana\Widget\v1\Model\CancelOrderRequest $cancelOrderRequest cancelOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelOrder'] to see the possible values for this operation
     *
     * @throws \Dana\Widget\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dana\Widget\v1\Model\CancelOrderResponse
     */
    public function cancelOrder($cancelOrderRequest, string $contentType = self::contentTypes['cancelOrder'][0])
    {
        list($response) = $this->cancelOrderWithHttpInfo($cancelOrderRequest, $contentType);
        return $response;
    }

    /**
     * Operation cancelOrderWithHttpInfo
     *
     * Cancel Order - Widget
     *
     * @param  \Dana\Widget\v1\Model\CancelOrderRequest $cancelOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelOrder'] to see the possible values for this operation
     *
     * @throws \Dana\Widget\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dana\Widget\v1\Model\CancelOrderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelOrderWithHttpInfo($cancelOrderRequest, string $contentType = self::contentTypes['cancelOrder'][0])
    {
        $request = $this->cancelOrderRequest($cancelOrderRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Dana\Widget\v1\Model\CancelOrderResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dana\Widget\v1\Model\CancelOrderResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dana\Widget\v1\Model\CancelOrderResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Dana\Widget\v1\Model\CancelOrderResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dana\Widget\v1\Model\CancelOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelOrderAsync
     *
     * Cancel Order - Widget
     *
     * @param  \Dana\Widget\v1\Model\CancelOrderRequest $cancelOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelOrderAsync($cancelOrderRequest, string $contentType = self::contentTypes['cancelOrder'][0])
    {
        return $this->cancelOrderAsyncWithHttpInfo($cancelOrderRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelOrderAsyncWithHttpInfo
     *
     * Cancel Order - Widget
     *
     * @param  \Dana\Widget\v1\Model\CancelOrderRequest $cancelOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelOrderAsyncWithHttpInfo($cancelOrderRequest, string $contentType = self::contentTypes['cancelOrder'][0])
    {
        $returnType = '\Dana\Widget\v1\Model\CancelOrderResponse';
        $request = $this->cancelOrderRequest($cancelOrderRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelOrder'
     *
     * @param  \Dana\Widget\v1\Model\CancelOrderRequest $cancelOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelOrderRequest($cancelOrderRequest, string $contentType = self::contentTypes['cancelOrder'][0])
    {

        // verify the required parameter 'cancelOrderRequest' is set
        if ($cancelOrderRequest === null || (is_array($cancelOrderRequest) && count($cancelOrderRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cancelOrderRequest when calling cancelOrder'
            );
        }


        $resourcePath = '/v1.0/debit/cancel.htm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cancelOrderRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cancelOrderRequest));
            } else {
                $httpBody = $cancelOrderRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // Generate signature and add security headers for DANA API if private key is configured
        $privateKey = $this->config->getApiKeyWithPrefix('PRIVATE_KEY');
        $privateKeyPath = $this->config->getApiKeyWithPrefix('PRIVATE_KEY_PATH');
        $clientKey = $this->config->getApiKeyWithPrefix('X_PARTNER_ID');
        if (isset($cancelOrderRequest)) {
            $resourcePathForSignature = '/v1.0/debit/cancel.htm';
            if ($cancelOrderRequest !== null) {
                $resourcePathForSignature = str_replace(
                    '{' . 'CancelOrderRequest' . '}',
                    ObjectSerializer::toPathValue($cancelOrderRequest),
                    $resourcePathForSignature
                );
            }

            // Generate security headers using SnapHeader utility
            $bodyJson = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cancelOrderRequest));
            
            // Determine the signature scenario based on operation ID
            $operationId = 'cancelOrder';
            
            // Set scenario based on operation ID using PHP comparison
            if (strpos($operationId, 'applyToken') !== false) {
                // SNAP signature scenario: APPLY TOKEN
                $scenario = SnapHeader::SCENARIO_APPLY_TOKEN;
            } else if (strpos($operationId, 'applyOTT') !== false) {
                // SNAP signature scenario: APPLY OTT
                $scenario = SnapHeader::SCENARIO_APPLY_OTT;
            } else if (strpos($operationId, 'accountUnbinding') !== false) {
                // SNAP signature scenario: ACCOUNT UNBINDING
                $scenario = SnapHeader::SCENARIO_UNBINDING_ACCOUNT;
            } else if (strpos($operationId, 'balanceInquiry') !== false) {
                // SNAP signature scenario: BALANCE INQUIRY
                $scenario = SnapHeader::SCENARIO_BALANCE_INQUIRY;
            } else {
                // Default B2B signature scenario
                $scenario = '';
            }
            $snapHeaders = SnapHeader::generateHeaders('POST', $resourcePathForSignature, $bodyJson, $scenario, $this->config);
            
            // Add security headers to the request
            foreach ($snapHeaders as $key => $value) {
                $headers[$key] = $value;
            }
        }

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryPayment
     *
     * Query Payment - Widget
     *
     * @param  \Dana\Widget\v1\Model\QueryPaymentRequest $queryPaymentRequest queryPaymentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryPayment'] to see the possible values for this operation
     *
     * @throws \Dana\Widget\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dana\Widget\v1\Model\QueryPaymentResponse
     */
    public function queryPayment($queryPaymentRequest, string $contentType = self::contentTypes['queryPayment'][0])
    {
        list($response) = $this->queryPaymentWithHttpInfo($queryPaymentRequest, $contentType);
        return $response;
    }

    /**
     * Operation queryPaymentWithHttpInfo
     *
     * Query Payment - Widget
     *
     * @param  \Dana\Widget\v1\Model\QueryPaymentRequest $queryPaymentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryPayment'] to see the possible values for this operation
     *
     * @throws \Dana\Widget\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dana\Widget\v1\Model\QueryPaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryPaymentWithHttpInfo($queryPaymentRequest, string $contentType = self::contentTypes['queryPayment'][0])
    {
        $request = $this->queryPaymentRequest($queryPaymentRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Dana\Widget\v1\Model\QueryPaymentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dana\Widget\v1\Model\QueryPaymentResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dana\Widget\v1\Model\QueryPaymentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Dana\Widget\v1\Model\QueryPaymentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dana\Widget\v1\Model\QueryPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryPaymentAsync
     *
     * Query Payment - Widget
     *
     * @param  \Dana\Widget\v1\Model\QueryPaymentRequest $queryPaymentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryPaymentAsync($queryPaymentRequest, string $contentType = self::contentTypes['queryPayment'][0])
    {
        return $this->queryPaymentAsyncWithHttpInfo($queryPaymentRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryPaymentAsyncWithHttpInfo
     *
     * Query Payment - Widget
     *
     * @param  \Dana\Widget\v1\Model\QueryPaymentRequest $queryPaymentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryPaymentAsyncWithHttpInfo($queryPaymentRequest, string $contentType = self::contentTypes['queryPayment'][0])
    {
        $returnType = '\Dana\Widget\v1\Model\QueryPaymentResponse';
        $request = $this->queryPaymentRequest($queryPaymentRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryPayment'
     *
     * @param  \Dana\Widget\v1\Model\QueryPaymentRequest $queryPaymentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function queryPaymentRequest($queryPaymentRequest, string $contentType = self::contentTypes['queryPayment'][0])
    {

        // verify the required parameter 'queryPaymentRequest' is set
        if ($queryPaymentRequest === null || (is_array($queryPaymentRequest) && count($queryPaymentRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $queryPaymentRequest when calling queryPayment'
            );
        }


        $resourcePath = '/rest/v1.1/debit/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($queryPaymentRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($queryPaymentRequest));
            } else {
                $httpBody = $queryPaymentRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // Generate signature and add security headers for DANA API if private key is configured
        $privateKey = $this->config->getApiKeyWithPrefix('PRIVATE_KEY');
        $privateKeyPath = $this->config->getApiKeyWithPrefix('PRIVATE_KEY_PATH');
        $clientKey = $this->config->getApiKeyWithPrefix('X_PARTNER_ID');
        if (isset($queryPaymentRequest)) {
            $resourcePathForSignature = '/rest/v1.1/debit/status';
            if ($queryPaymentRequest !== null) {
                $resourcePathForSignature = str_replace(
                    '{' . 'QueryPaymentRequest' . '}',
                    ObjectSerializer::toPathValue($queryPaymentRequest),
                    $resourcePathForSignature
                );
            }

            // Generate security headers using SnapHeader utility
            $bodyJson = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($queryPaymentRequest));
            
            // Determine the signature scenario based on operation ID
            $operationId = 'queryPayment';
            
            // Set scenario based on operation ID using PHP comparison
            if (strpos($operationId, 'applyToken') !== false) {
                // SNAP signature scenario: APPLY TOKEN
                $scenario = SnapHeader::SCENARIO_APPLY_TOKEN;
            } else if (strpos($operationId, 'applyOTT') !== false) {
                // SNAP signature scenario: APPLY OTT
                $scenario = SnapHeader::SCENARIO_APPLY_OTT;
            } else if (strpos($operationId, 'accountUnbinding') !== false) {
                // SNAP signature scenario: ACCOUNT UNBINDING
                $scenario = SnapHeader::SCENARIO_UNBINDING_ACCOUNT;
            } else if (strpos($operationId, 'balanceInquiry') !== false) {
                // SNAP signature scenario: BALANCE INQUIRY
                $scenario = SnapHeader::SCENARIO_BALANCE_INQUIRY;
            } else {
                // Default B2B signature scenario
                $scenario = '';
            }
            $snapHeaders = SnapHeader::generateHeaders('POST', $resourcePathForSignature, $bodyJson, $scenario, $this->config);
            
            // Add security headers to the request
            foreach ($snapHeaders as $key => $value) {
                $headers[$key] = $value;
            }
        }

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryUserProfile
     *
     * Query User Profile
     *
     * @param  \Dana\Widget\v1\Model\QueryUserProfileRequest $queryUserProfileRequest queryUserProfileRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryUserProfile'] to see the possible values for this operation
     *
     * @throws \Dana\Widget\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dana\Widget\v1\Model\QueryUserProfileResponse
     */
    public function queryUserProfile($queryUserProfileRequest, string $contentType = self::contentTypes['queryUserProfile'][0])
    {
        list($response) = $this->queryUserProfileWithHttpInfo($queryUserProfileRequest, $contentType);
        return $response;
    }

    /**
     * Operation queryUserProfileWithHttpInfo
     *
     * Query User Profile
     *
     * @param  \Dana\Widget\v1\Model\QueryUserProfileRequest $queryUserProfileRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryUserProfile'] to see the possible values for this operation
     *
     * @throws \Dana\Widget\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dana\Widget\v1\Model\QueryUserProfileResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryUserProfileWithHttpInfo($queryUserProfileRequest, string $contentType = self::contentTypes['queryUserProfile'][0])
    {
        $request = $this->queryUserProfileRequest($queryUserProfileRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Dana\Widget\v1\Model\QueryUserProfileResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dana\Widget\v1\Model\QueryUserProfileResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dana\Widget\v1\Model\QueryUserProfileResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Dana\Widget\v1\Model\QueryUserProfileResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dana\Widget\v1\Model\QueryUserProfileResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryUserProfileAsync
     *
     * Query User Profile
     *
     * @param  \Dana\Widget\v1\Model\QueryUserProfileRequest $queryUserProfileRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryUserProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryUserProfileAsync($queryUserProfileRequest, string $contentType = self::contentTypes['queryUserProfile'][0])
    {
        return $this->queryUserProfileAsyncWithHttpInfo($queryUserProfileRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryUserProfileAsyncWithHttpInfo
     *
     * Query User Profile
     *
     * @param  \Dana\Widget\v1\Model\QueryUserProfileRequest $queryUserProfileRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryUserProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryUserProfileAsyncWithHttpInfo($queryUserProfileRequest, string $contentType = self::contentTypes['queryUserProfile'][0])
    {
        $returnType = '\Dana\Widget\v1\Model\QueryUserProfileResponse';
        $request = $this->queryUserProfileRequest($queryUserProfileRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryUserProfile'
     *
     * @param  \Dana\Widget\v1\Model\QueryUserProfileRequest $queryUserProfileRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['queryUserProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function queryUserProfileRequest($queryUserProfileRequest, string $contentType = self::contentTypes['queryUserProfile'][0])
    {

        // verify the required parameter 'queryUserProfileRequest' is set
        if ($queryUserProfileRequest === null || (is_array($queryUserProfileRequest) && count($queryUserProfileRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $queryUserProfileRequest when calling queryUserProfile'
            );
        }


        $resourcePath = '/dana/member/query/queryUserProfile.htm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($queryUserProfileRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($queryUserProfileRequest));
            } else {
                $httpBody = $queryUserProfileRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // Generate signature and add security headers for DANA API if private key is configured
        $privateKey = $this->config->getApiKeyWithPrefix('PRIVATE_KEY');
        $privateKeyPath = $this->config->getApiKeyWithPrefix('PRIVATE_KEY_PATH');
        $clientKey = $this->config->getApiKeyWithPrefix('X_PARTNER_ID');
        if (isset($queryUserProfileRequest)) {
            $resourcePathForSignature = '/dana/member/query/queryUserProfile.htm';
            if ($queryUserProfileRequest !== null) {
                $resourcePathForSignature = str_replace(
                    '{' . 'QueryUserProfileRequest' . '}',
                    ObjectSerializer::toPathValue($queryUserProfileRequest),
                    $resourcePathForSignature
                );
            }

            // Generate security headers using SnapHeader utility
            $bodyJson = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($queryUserProfileRequest));
            
            // Determine the signature scenario based on operation ID
            $operationId = 'queryUserProfile';
            
            // Set scenario based on operation ID using PHP comparison
            if (strpos($operationId, 'applyToken') !== false) {
                // SNAP signature scenario: APPLY TOKEN
                $scenario = SnapHeader::SCENARIO_APPLY_TOKEN;
            } else if (strpos($operationId, 'applyOTT') !== false) {
                // SNAP signature scenario: APPLY OTT
                $scenario = SnapHeader::SCENARIO_APPLY_OTT;
            } else if (strpos($operationId, 'accountUnbinding') !== false) {
                // SNAP signature scenario: ACCOUNT UNBINDING
                $scenario = SnapHeader::SCENARIO_UNBINDING_ACCOUNT;
            } else if (strpos($operationId, 'balanceInquiry') !== false) {
                // SNAP signature scenario: BALANCE INQUIRY
                $scenario = SnapHeader::SCENARIO_BALANCE_INQUIRY;
            } else {
                // Default B2B signature scenario
                $scenario = '';
            }
            $snapHeaders = SnapHeader::generateHeaders('POST', $resourcePathForSignature, $bodyJson, $scenario, $this->config);
            
            // Add security headers to the request
            foreach ($snapHeaders as $key => $value) {
                $headers[$key] = $value;
            }
        }

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refundOrder
     *
     * Refund Order - Widget
     *
     * @param  \Dana\Widget\v1\Model\RefundOrderRequest $refundOrderRequest refundOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundOrder'] to see the possible values for this operation
     *
     * @throws \Dana\Widget\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dana\Widget\v1\Model\RefundOrderResponse
     */
    public function refundOrder($refundOrderRequest, string $contentType = self::contentTypes['refundOrder'][0])
    {
        list($response) = $this->refundOrderWithHttpInfo($refundOrderRequest, $contentType);
        return $response;
    }

    /**
     * Operation refundOrderWithHttpInfo
     *
     * Refund Order - Widget
     *
     * @param  \Dana\Widget\v1\Model\RefundOrderRequest $refundOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundOrder'] to see the possible values for this operation
     *
     * @throws \Dana\Widget\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dana\Widget\v1\Model\RefundOrderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function refundOrderWithHttpInfo($refundOrderRequest, string $contentType = self::contentTypes['refundOrder'][0])
    {
        $request = $this->refundOrderRequest($refundOrderRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Dana\Widget\v1\Model\RefundOrderResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dana\Widget\v1\Model\RefundOrderResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dana\Widget\v1\Model\RefundOrderResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Dana\Widget\v1\Model\RefundOrderResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dana\Widget\v1\Model\RefundOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation refundOrderAsync
     *
     * Refund Order - Widget
     *
     * @param  \Dana\Widget\v1\Model\RefundOrderRequest $refundOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundOrderAsync($refundOrderRequest, string $contentType = self::contentTypes['refundOrder'][0])
    {
        return $this->refundOrderAsyncWithHttpInfo($refundOrderRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refundOrderAsyncWithHttpInfo
     *
     * Refund Order - Widget
     *
     * @param  \Dana\Widget\v1\Model\RefundOrderRequest $refundOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundOrderAsyncWithHttpInfo($refundOrderRequest, string $contentType = self::contentTypes['refundOrder'][0])
    {
        $returnType = '\Dana\Widget\v1\Model\RefundOrderResponse';
        $request = $this->refundOrderRequest($refundOrderRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refundOrder'
     *
     * @param  \Dana\Widget\v1\Model\RefundOrderRequest $refundOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function refundOrderRequest($refundOrderRequest, string $contentType = self::contentTypes['refundOrder'][0])
    {

        // verify the required parameter 'refundOrderRequest' is set
        if ($refundOrderRequest === null || (is_array($refundOrderRequest) && count($refundOrderRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $refundOrderRequest when calling refundOrder'
            );
        }


        $resourcePath = '/v1.0/debit/refund.htm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($refundOrderRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($refundOrderRequest));
            } else {
                $httpBody = $refundOrderRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // Generate signature and add security headers for DANA API if private key is configured
        $privateKey = $this->config->getApiKeyWithPrefix('PRIVATE_KEY');
        $privateKeyPath = $this->config->getApiKeyWithPrefix('PRIVATE_KEY_PATH');
        $clientKey = $this->config->getApiKeyWithPrefix('X_PARTNER_ID');
        if (isset($refundOrderRequest)) {
            $resourcePathForSignature = '/v1.0/debit/refund.htm';
            if ($refundOrderRequest !== null) {
                $resourcePathForSignature = str_replace(
                    '{' . 'RefundOrderRequest' . '}',
                    ObjectSerializer::toPathValue($refundOrderRequest),
                    $resourcePathForSignature
                );
            }

            // Generate security headers using SnapHeader utility
            $bodyJson = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($refundOrderRequest));
            
            // Determine the signature scenario based on operation ID
            $operationId = 'refundOrder';
            
            // Set scenario based on operation ID using PHP comparison
            if (strpos($operationId, 'applyToken') !== false) {
                // SNAP signature scenario: APPLY TOKEN
                $scenario = SnapHeader::SCENARIO_APPLY_TOKEN;
            } else if (strpos($operationId, 'applyOTT') !== false) {
                // SNAP signature scenario: APPLY OTT
                $scenario = SnapHeader::SCENARIO_APPLY_OTT;
            } else if (strpos($operationId, 'accountUnbinding') !== false) {
                // SNAP signature scenario: ACCOUNT UNBINDING
                $scenario = SnapHeader::SCENARIO_UNBINDING_ACCOUNT;
            } else if (strpos($operationId, 'balanceInquiry') !== false) {
                // SNAP signature scenario: BALANCE INQUIRY
                $scenario = SnapHeader::SCENARIO_BALANCE_INQUIRY;
            } else {
                // Default B2B signature scenario
                $scenario = '';
            }
            $snapHeaders = SnapHeader::generateHeaders('POST', $resourcePathForSignature, $bodyJson, $scenario, $this->config);
            
            // Add security headers to the request
            foreach ($snapHeaders as $key => $value) {
                $headers[$key] = $value;
            }
        }

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation widgetPayment
     *
     * Widget Payment - Widget
     *
     * @param  \Dana\Widget\v1\Model\WidgetPaymentRequest $widgetPaymentRequest widgetPaymentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['widgetPayment'] to see the possible values for this operation
     *
     * @throws \Dana\Widget\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Dana\Widget\v1\Model\WidgetPaymentResponse
     */
    public function widgetPayment($widgetPaymentRequest, string $contentType = self::contentTypes['widgetPayment'][0])
    {
        list($response) = $this->widgetPaymentWithHttpInfo($widgetPaymentRequest, $contentType);
        return $response;
    }

    /**
     * Operation widgetPaymentWithHttpInfo
     *
     * Widget Payment - Widget
     *
     * @param  \Dana\Widget\v1\Model\WidgetPaymentRequest $widgetPaymentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['widgetPayment'] to see the possible values for this operation
     *
     * @throws \Dana\Widget\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Dana\Widget\v1\Model\WidgetPaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function widgetPaymentWithHttpInfo($widgetPaymentRequest, string $contentType = self::contentTypes['widgetPayment'][0])
    {
        $request = $this->widgetPaymentRequest($widgetPaymentRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Dana\Widget\v1\Model\WidgetPaymentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Dana\Widget\v1\Model\WidgetPaymentResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Dana\Widget\v1\Model\WidgetPaymentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Dana\Widget\v1\Model\WidgetPaymentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Dana\Widget\v1\Model\WidgetPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation widgetPaymentAsync
     *
     * Widget Payment - Widget
     *
     * @param  \Dana\Widget\v1\Model\WidgetPaymentRequest $widgetPaymentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['widgetPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function widgetPaymentAsync($widgetPaymentRequest, string $contentType = self::contentTypes['widgetPayment'][0])
    {
        return $this->widgetPaymentAsyncWithHttpInfo($widgetPaymentRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation widgetPaymentAsyncWithHttpInfo
     *
     * Widget Payment - Widget
     *
     * @param  \Dana\Widget\v1\Model\WidgetPaymentRequest $widgetPaymentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['widgetPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function widgetPaymentAsyncWithHttpInfo($widgetPaymentRequest, string $contentType = self::contentTypes['widgetPayment'][0])
    {
        $returnType = '\Dana\Widget\v1\Model\WidgetPaymentResponse';
        $request = $this->widgetPaymentRequest($widgetPaymentRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'widgetPayment'
     *
     * @param  \Dana\Widget\v1\Model\WidgetPaymentRequest $widgetPaymentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['widgetPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function widgetPaymentRequest($widgetPaymentRequest, string $contentType = self::contentTypes['widgetPayment'][0])
    {

        // verify the required parameter 'widgetPaymentRequest' is set
        if ($widgetPaymentRequest === null || (is_array($widgetPaymentRequest) && count($widgetPaymentRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $widgetPaymentRequest when calling widgetPayment'
            );
        }


        $resourcePath = '/rest/redirection/v1.0/debit/payment-host-to-host';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($widgetPaymentRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($widgetPaymentRequest));
            } else {
                $httpBody = $widgetPaymentRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // Generate signature and add security headers for DANA API if private key is configured
        $privateKey = $this->config->getApiKeyWithPrefix('PRIVATE_KEY');
        $privateKeyPath = $this->config->getApiKeyWithPrefix('PRIVATE_KEY_PATH');
        $clientKey = $this->config->getApiKeyWithPrefix('X_PARTNER_ID');
        if (isset($widgetPaymentRequest)) {
            $resourcePathForSignature = '/rest/redirection/v1.0/debit/payment-host-to-host';
            if ($widgetPaymentRequest !== null) {
                $resourcePathForSignature = str_replace(
                    '{' . 'WidgetPaymentRequest' . '}',
                    ObjectSerializer::toPathValue($widgetPaymentRequest),
                    $resourcePathForSignature
                );
            }

            // Generate security headers using SnapHeader utility
            $bodyJson = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($widgetPaymentRequest));
            
            // Determine the signature scenario based on operation ID
            $operationId = 'widgetPayment';
            
            // Set scenario based on operation ID using PHP comparison
            if (strpos($operationId, 'applyToken') !== false) {
                // SNAP signature scenario: APPLY TOKEN
                $scenario = SnapHeader::SCENARIO_APPLY_TOKEN;
            } else if (strpos($operationId, 'applyOTT') !== false) {
                // SNAP signature scenario: APPLY OTT
                $scenario = SnapHeader::SCENARIO_APPLY_OTT;
            } else if (strpos($operationId, 'accountUnbinding') !== false) {
                // SNAP signature scenario: ACCOUNT UNBINDING
                $scenario = SnapHeader::SCENARIO_UNBINDING_ACCOUNT;
            } else if (strpos($operationId, 'balanceInquiry') !== false) {
                // SNAP signature scenario: BALANCE INQUIRY
                $scenario = SnapHeader::SCENARIO_BALANCE_INQUIRY;
            } else {
                // Default B2B signature scenario
                $scenario = '';
            }
            $snapHeaders = SnapHeader::generateHeaders('POST', $resourcePathForSignature, $bodyJson, $scenario, $this->config);
            
            // Add security headers to the request
            foreach ($snapHeaders as $key => $value) {
                $headers[$key] = $value;
            }
        }

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
